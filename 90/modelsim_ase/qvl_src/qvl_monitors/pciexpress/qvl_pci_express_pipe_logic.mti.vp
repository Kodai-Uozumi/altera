//              Copyright 2006-2007 Mentor Graphics Corporation
//                           All Rights Reserved.
//
//              THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY
//            INFORMATION WHICH IS THE PROPERTY OF MENTOR GRAPHICS
//           CORPORATION OR ITS LICENSORS AND IS SUBJECT TO LICENSE
//                                  TERMS.
//
//                   Questa Verification Library (QVL)
//

/*************************************************************************
*
* PURPOSE     This file is part of Questa Verification Library (QVL).
*
* DESCRIPTION This monitor checks the PCI Express PIPE interface for 
*             compliance with PCI Express Base specification. 
*
* REFERENCES  PCI Express Base Specification, Revision 1.0a, July 22, 2002.
*             PCI Express Base Specification, Revision 1.1, March 28, 2005.
*             PHY Interface for the PCI Express architecture, Version 1.00,
*             June 19, 2003.
*
* INPUTS
*             areset_n                    - Asynchronous reset, active low 
*             reset_n                     - Synchronous reset, active low 
*
*             pclk                        - Parallel interface clock.
*             tx_data                     - Parallel PCI Express data input 
*     					    to the PHY Device.
*             tx_data_k                   - Data/Control signal for symbols 
*                                           on 'tx_data'. 
*             tx_detect_rx_loopback       - Signal which indicates when to
*                                           start receiver detection and 
*                                           loopback.
*             tx_elecidle                 - Signal which indicates when to
*                                           drive electrical idle.
*             tx_compliance               - Signal which indicates when to 
*                                           set the running disparity to 
*                                           -ve, while transmitting the
*                                           compliance pattern.
*             rx_polarity                 - Signal which indicates when to
*                                           perform polarity inversion on 
*                                           the received data.
*             power_down                  - Command which transits the power
*                                           states of the PHY.
*             rx_data                     - Parallel PCI Express data output 
*                                           from the PHY Device.
*             rx_data_k                   - Data/Control signal for symbols 
*                                           on 'rx_data'.
*             rx_valid                    - Signal which indicates that 
* 					    valid data is available on the
*                                           'rx_data'.
*             rx_elecidle                 - Signal which indicates that 
*                                           electrical idle is detected.
*             rx_status                   - Signal that encodes the receiver
*                                           status.
*             phystatus                   - Signal which indicates the
*                                           succesful poer state transitions.
*             disable_descrambler         - When set, disables the
*                                           descrambling.
*             skip_link_training          - When set, the monitor
*                                           does not track the link 
*                                           training sequence. The
*                                           LTSSM state machine is inactive 
*                                           and default link width is maximum
*                                           link width specified by the user.
*                                           Monitor tracks all the training 
*                                           ordered sets as well as  
*                                           other ordered sets. 
*             extended_sync_enable        - Extended Synch bit of the Link
*                                           control register(offset 10h).
*             L0s_entry_supported         - Signal which indicates whether 
*                                           transition to L0s ASPM state is 
*                                           supported. 
*             device_control_register     - Device control register.
*                                           (Off set 08h)
*
*             device_capabilities_register - Device capabilities register.
*                                           (Off set 04h)
*
*             phy_layer_checks_disable    - Disables all the physical layer
*                                           checks.
*
*             link_layer_checks_disable   - Disables all the link layer checks.
*
*             transaction_layer_checks_disable 
*
*                                         - Disables all the transaction layer
*                                           checks.
*             enable_vc_id                - A logic high in a bit enables
*                                           corresponding VC ID
*             tc_mapped_to_vc_id_0        - TC's mapped to VC ID 0
*             tc_mapped_to_vc_id_1        - TC's mapped to VC ID 1
*             tc_mapped_to_vc_id_2        - TC's mapped to VC ID 2
*             tc_mapped_to_vc_id_3        - TC's mapped to VC ID 3
*             tc_mapped_to_vc_id_4        - TC's mapped to VC ID 4
*             tc_mapped_to_vc_id_5        - TC's mapped to VC ID 5
*             tc_mapped_to_vc_id_6        - TC's mapped to VC ID 6
*             tc_mapped_to_vc_id_7        - TC's mapped to VC ID 7
*
* MONITOR INSTANTIATION
*
*       1. In a MAC Layer device : 
*       --------------------------
*
*       +---------------+                 +-----------------+
*       | MAC Layer     |  Transmit       |                 |
*       |       +---+   |  Interface      |                 |
*       |       | M |<--|---------------->|   PHY Layer     |
*       |       | O |   |                 |                 |
*       |       | N |   |                 |                 |
*       |       | I |   |                 |                 |
*       |       | T |   |  Receive        |                 |
*       |       | O |   |  Interface      |                 |
*       |       | R |<--|<----------------|                 |
*       |       +---+   |                 |                 |
*       |               |                 |                 |
*       +---------------+                 +-----------------+
*
*       2. In an PHY Layer device :
*       ---------------------------
*
*       +---------------+                 +-----------------+
*       |  MAC Layer    |  Transmit       | PHY Layer       |
*       |               |  Interface      |  +---+          |
*       |               |---------------->|->| M |          |
*       |               |                 |  | O |          |
*       |               |                 |  | N |          |
*       |               |                 |  | I |          |
*       |               |  Receive        |  | T |          |
*       |               |  Interface      |  | O |          |
*       |               |<----------------|->| R |          |
*       |               |                 |  +---+          |
*       |               |                 |                 |
*       +---------------+                 +-----------------+
*
*     Last Modified Data : Sep 30, 2005 
*
**************************************************************************/

`ifdef ZiCwDebug
`define ZiCwDebugDelay1 #1
`define ZiCwQuietIfNoCwDebug
`else
`define ZiCwDebugDelay1
`define ZiCwQuietIfNoCwDebug -quiet
`endif //ZiCwDebug

`ifdef QVL_COVER_ON
  `ifdef QVL_SV_COVERGROUP_OFF
    // Do nothing
  `else
    `define QVL_SV_COVERGROUP
  `endif

  `ifdef QVL_MW_FINAL_COVER_OFF
    // Do nothing
  `else
    `define QVL_MW_FINAL_COVER
   `endif
`endif

`qvlmodule qvl_pci_express_pipe_logic (
				 reset_n,
				 areset_n,
				 pclk,

				 // MAC Layer to PHY Layer signals
				 tx_data,
                                 tx_data_k,
				 tx_detect_rx_loopback,
				 tx_elecidle,
				 tx_compliance,
				 rx_polarity,
                                 power_down,

				 // PHY Layer to MAC Layer signals

				 rx_data,
				 rx_data_k,
				 rx_valid,
				 rx_elecidle,
				 rx_status,
				 phystatus,
  // PCI_EXPRESS_GEN2 code start					
				 // New signal for GEN2 PIPE		 
				 rate,            
                                 tx_margin,
                                 tx_deemph,
				 tx_swing,      
  // PCI_EXPRESS_GEN2 code end
				 // Monitor configuration inputs
         
				 disable_descrambler,
                                 skip_link_training,
				 extended_sync_enable,
				 device_control_register,
				 device_capabilities_register,
				 L0s_entry_supported,
  // PCI_EXPRESS_GEN2 code start							 
				 acs_translation_blocking_enable, // Gen2 non pipe signal
				 disable_cpl_timeout,      
  // PCI_EXPRESS_GEN2 code end				       
				 phy_layer_checks_disable,
				 link_layer_checks_disable,
				 transaction_layer_checks_disable,

				 // VC Configuration

				 enable_vc_id,
				 tc_mapped_to_vc_id_0,
				 tc_mapped_to_vc_id_1,
				 tc_mapped_to_vc_id_2,
				 tc_mapped_to_vc_id_3,
				 tc_mapped_to_vc_id_4,
				 tc_mapped_to_vc_id_5,
				 tc_mapped_to_vc_id_6,
				 tc_mapped_to_vc_id_7
				 );

  // Parameter Constraints_Mode = 1, will configure some checks in this
  // monitor as constraints during 0-In Search.
 
  parameter Constraints_Mode = 0;
  wire [31:0] pw_Constraints_Mode = Constraints_Mode;

  // Parameter PCI_EXPRESS_DEVICE_TYPE specifies the device type where the 
  // monitor is instantiated. This parameter has to be set based on the 
  // PCI Express device in which monitor is instantiated.
  // 
  // Parameter value         Device
  //     0                   PCI Express end point.
  //     1                   Legacy PCI Express end point.
  //     4                   PCI Express Root Complex.
  //     5                   PCI Express switch, upstream port.
  //     6                   PCI Express switch, downstream port.
  //     7                   PCI Express to PCI/PCI-X bridge.
  //
  // By default, monitor is instantiated on the PCI Express end point
  // This information along with the Constraints_Mode will decide which checks
  // are to be turned into constraints during 0-In Search.
 
  parameter PCI_EXPRESS_DEVICE_TYPE = 0;
  wire [31:0] pw_PCI_EXPRESS_DEVICE_TYPE = PCI_EXPRESS_DEVICE_TYPE;

  // Parameter MAC_LAYER_SIDE configures the device where the monitor is 
  // instantiated. Set this parameter to 1 if the monitor is instantiated 
  // on the MAC_LAYER. By default, monitor is instantiated on the PHY_LAYER.

  parameter MAC_LAYER_SIDE = 1;
  wire [31:0] pw_MAC_LAYER_SIDE = MAC_LAYER_SIDE;

  // Parameter INTERFACE_TYPE specifies whether the PIPE interface is 16 bits
  // or 8 bits. Set this to 1 if the PIPE interface is 16 bits. By default 
  // the monitor is configured for 8 bit PIPE interface.

  parameter INTERFACE_TYPE = 0; 
  wire [31:0] pw_INTERFACE_TYPE = INTERFACE_TYPE;

  // Parameter MAX_LINK_WIDTH specifies the maximum width supported by the
  // PCI Express link. The link widths supported are 1,2,4,8,12,16 and 32.

  parameter MAX_LINK_WIDTH = 1;                                            
  wire [31:0] pw_MAX_LINK_WIDTH = MAX_LINK_WIDTH;

  // Parameter MAX_REQUESTS_ADDR_WIDTH specifies the number of address bits
  // required to address the outstanding requests. This parameter in turn
  // configures the maximum number of outstanding requests. By default, the
  // maximum number of outstanding requests can be 32.
 
  parameter MAX_REQUESTS_ADDR_WIDTH = 5;
  wire [31:0] pw_MAX_REQUESTS_ADDR_WIDTH = MAX_REQUESTS_ADDR_WIDTH;

  // Parameter RESERVED_FIELD_CHECK_ENABLE configures the monitor to track the
  // reserved field of the transaction layer packets (TLPs), Data link layer
  // packets and other reserved fields. Set this parameter to 1 if the monitor
  // has to track for any non zero value in the reserved fields. By default,
  // the monitor does not tracks for existence of non zero value in the reserved
  // field.

  parameter RESERVED_FIELD_CHECK_ENABLE = 1;
  wire [31:0] pw_RESERVED_FIELD_CHECK_ENABLE = RESERVED_FIELD_CHECK_ENABLE;

  // Parameter VENDOR_SPECIFIC_ENCODING_ENABLE = 0 configures the monitor to
  // allow the usage of vendor specific encodings in the DLL packet type as
  // well as the vendor specific message codes.

  parameter VENDOR_SPECIFIC_ENCODING_ENABLE = 0;
  wire [31:0] pw_VENDOR_SPECIFIC_ENCODING_ENABLE = 
					     VENDOR_SPECIFIC_ENCODING_ENABLE;

  parameter OVERRIDE_TIMER_VALUE = 0;
  wire [31:0] pw_OVERRIDE_TIMER_VALUE = OVERRIDE_TIMER_VALUE;

  parameter REPLAY_TIMER_VALUE = 711;
  wire [31:0] pw_REPLAY_TIMER_VALUE = REPLAY_TIMER_VALUE;

  parameter ACKNAK_TIMER_VALUE = 237;
  wire [31:0] pw_ACKNAK_TIMER_VALUE = ACKNAK_TIMER_VALUE;

  // Parameter MIN_TS1_COUNT configures the minimum number of TS1 ordered sets
  // that must be transmitted before transitioning into Polling.Configuration
  // state from Polling.active state.

  parameter MIN_TS1_COUNT = 1024;
  wire [31:0] pw_MIN_TS1_COUNT = MIN_TS1_COUNT;

  // Parameter DESKEW_SUPPORT configures the monitor to support multi lane
  // deskew on the receive side. By default, multi lane deskew is not 
  // supported.

  parameter DESKEW_SUPPORT = 0;
  wire [31:0] pw_DESKEW_SUPPORT = DESKEW_SUPPORT;

  // Parameter VC_SUPPORT configures the TC/VC mapping.
  // By default, only VC0 is supported and all the TC's are mapped to VC0.
  // Set this parameter to 1, to support all the VC's and one to one
  // mapping between TC and VC. I,e TC0/VC0, TC1/VC1, TC2/VC2 ....
  // Set this parameter to 2, to enable required VC's and to specify the TC/VC
  // mapping through ports.

  parameter VC_SUPPORT = 0;
  wire [31:0] pw_VC_SUPPORT = VC_SUPPORT;

  // Parameter HOT_PLUG_MESSAGE_ENABLE allows hot plug signaling messages.
  // By default, monitor does not allow the transmission of hot plug
  // signaling messages as per PCIE 1.1 specification.

  parameter HOT_PLUG_MESSAGE_ENABLE = 0;

  // Parameter TX_SKEW_SUPPORT configures the monitor to support skew on
  // transmit lanes. By default, skew on transmit lanes is not supported.

  parameter TX_SKEW_SUPPORT = 0;

  //----------------------------------------------------------------
  // Internal parameters for PIPE
  //----------------------------------------------------------------

  // All the modules operate in DDR mode when the PIPE interface is
  // 16 bits wide. In 8 bit mode of operation the PIPE interface is
  // always uses rising edge.

  parameter ZI_DOUBLE_DATA_RATE  = (INTERFACE_TYPE == 1) ? 1 : 0;
  wire [31:0] pw_DOUBLE_DATA_RATE = ZI_DOUBLE_DATA_RATE;

  parameter ZI_PORT_WIDTH = (INTERFACE_TYPE == 1) ?
		    (2 * 8 * MAX_LINK_WIDTH) : (8 * MAX_LINK_WIDTH);
  parameter ZI_D_OR_K_PORT_WIDTH = (INTERFACE_TYPE == 1) ?
		    (2 * MAX_LINK_WIDTH) : MAX_LINK_WIDTH;

  parameter ZI_ELECTRICAL_IDLE_VAL = 0;

  parameter PHY_LAYER_CONSTRAINT =
                   (Constraints_Mode == 1 && MAC_LAYER_SIDE == 0);
  parameter MAC_LAYER_CONSTRAINT =
                   (Constraints_Mode == 1 && MAC_LAYER_SIDE == 1);

  // PCI_EXPRESS_GEN2 code start
  // Parameter PCI_EXPRESS_GEN2 enables generation2 features of monitor.
  parameter PCI_EXPRESS_GEN2 = 0;
  wire [31:0] pw_PCI_EXPRESS_GEN2 = PCI_EXPRESS_GEN2;
  // PCI_EXPRESS_GEN2 code end

  // Additional gen1 code start
  parameter CPL_TIMEOUT_CLK = 30000;
  wire [31:0] pw_CPL_TIMEOUT_CLK = CPL_TIMEOUT_CLK;
  parameter UPDATE_FC_30US_TIMER_CLK = (INTERFACE_TYPE == 0) ? 7500 : 3750;
  wire [31:0] pw_UPDATE_FC_30US_TIMER_CLK = UPDATE_FC_30US_TIMER_CLK;
  // Additional gen1 code end
  //----------------------------------------------------------------

  // Input declarations 

  input reset_n; // Global synchronous reset signal
  input areset_n; // Global asynchronous reset signal
  input pclk; // Parallel interface lock

  // MAC Layer to PHY layer signals

  input [ZI_PORT_WIDTH - 1 :0] tx_data;
  input [ZI_D_OR_K_PORT_WIDTH - 1:0] tx_data_k;
  input tx_detect_rx_loopback;
  input [MAX_LINK_WIDTH - 1:0] tx_elecidle;
  input [MAX_LINK_WIDTH - 1:0] tx_compliance;
  input [MAX_LINK_WIDTH - 1:0] rx_polarity; 
  input [1:0] power_down;

  // PHY Layer to MAC layer signals

  input [ZI_PORT_WIDTH - 1 :0] rx_data;
  input [ZI_D_OR_K_PORT_WIDTH - 1 :0] rx_data_k;
  input [MAX_LINK_WIDTH - 1:0] rx_valid;
  input [MAX_LINK_WIDTH - 1:0] rx_elecidle;
  input [(3*MAX_LINK_WIDTH) - 1 :0] rx_status;
  input phystatus;
  // PCI_EXPRESS_GEN2 code start							 
  input rate;
  input [2:0] tx_margin;
  input tx_deemph;
  input tx_swing;
  // PCI_EXPRESS_GEN2 code end
  input disable_descrambler;
  input skip_link_training;
  input extended_sync_enable;
  input L0s_entry_supported;
  input [15:0] device_control_register;
  input [31:0] device_capabilities_register;
  // PCI_EXPRESS_GEN2 code start
  input acs_translation_blocking_enable;
  input disable_cpl_timeout;
  // PCI_EXPRESS_GEN2 code end
  input phy_layer_checks_disable;
  input link_layer_checks_disable;
  input transaction_layer_checks_disable;

  // VC Configuration

  input [7:0] enable_vc_id;
  input [7:0] tc_mapped_to_vc_id_0;
  input [7:0] tc_mapped_to_vc_id_1;
  input [7:0] tc_mapped_to_vc_id_2;
  input [7:0] tc_mapped_to_vc_id_3;
  input [7:0] tc_mapped_to_vc_id_4;
  input [7:0] tc_mapped_to_vc_id_5;
  input [7:0] tc_mapped_to_vc_id_6;
  input [7:0] tc_mapped_to_vc_id_7;

  // Internal parameter declarations

  parameter ZI_SYMBOL_DATA_WIDTH = (INTERFACE_TYPE) ? 10 : 1;

// Additional Gen1 code start      

  // Parameter declaration for states
  parameter ZI_LTSSM_POLLING_ACTIVE_STATE = 0;
  parameter ZI_LTSSM_POLLING_CFG_STATE = 1;
  parameter ZI_LTSSM_POLLING_SPEED_STATE = 2;
  parameter ZI_LTSSM_POLLING_COMPLIANCE_STATE = 3;
  parameter ZI_LTSSM_CFG_RCVRCFG_STATE = 4;
  parameter ZI_LTSSM_CFG_IDLE_STATE = 5;
  parameter ZI_LTSSM_L0_STATE = 6;
  parameter ZI_LTSSM_RECOVERY_LOCK_STATE = 7;
  parameter ZI_LTSSM_RECOVERY_RCVRCFG_STATE = 8;
  parameter ZI_LTSSM_RECOVERY_IDLE_STATE = 9;
  parameter ZI_LTSSM_TX_L0s_STATE = 10;
  parameter ZI_LTSSM_RX_L0s_STATE = 11;
  parameter ZI_LTSSM_RESET_STATE = 12;
  parameter ZI_LTSSM_LOOPBACK_STATE = 13;
  parameter ZI_LTSSM_DISABLE_STATE = 14;
  parameter ZI_LTSSM_CFG_COMPLETE_STATE = 15;

  // For power management support.

  parameter ZI_LTSSM_L1_STATE = 16;
  parameter ZI_LTSSM_L2_STATE = 17;
  parameter ZI_LTSSM_L1_ENTRY_STATE = 19;
  parameter ZI_LTSSM_L2_ENTRY_STATE = 20;
  // Gen2 recovery speed state
  parameter ZI_LTSSM_RECOVERY_SPEED_STATE = 18; // New state in recovery

 // Additional Gen1 code end  

  // Register declarations

  reg tx_posedge_toggle;
  reg tx_negedge_toggle;
  reg rx_posedge_toggle;
  reg rx_negedge_toggle;
  reg tx_lane_reverse_posedge;
  reg tx_lane_reverse_negedge;
  reg [MAX_LINK_WIDTH * 8 - 1:0] temp_int_tx_descrambled_data;
  reg rx_lane_reverse_posedge;
  reg rx_lane_reverse_negedge;
  reg [MAX_LINK_WIDTH * 8 - 1:0] temp_int_rx_descrambled_data;

  // Register declarations for gate signals

  reg [31:0] tx_clk_gate_lane;
  reg [31:0] rx_clk_gate_lane;

  // Register parameter_checks_active ensures that the
  // checks on the parameter fires only once.

  reg parameter_checks_active;

  reg [7:0] tx_n_fts_temp;
  reg [7:0] rx_n_fts_temp;
  reg tx_n_fts_field_not_same;
  reg rx_n_fts_field_not_same;
  // Additional gen1 code start
  reg [7:0] link_number_tx_temp;
  reg [7:0] link_number_rx_temp;
  reg tx_link_num_field_not_same;
  reg rx_link_num_field_not_same;
  // Additional gen1 code end

  // Register declarations for deskew support

  reg data_aligned_posedge; // Indicates that the data is aligned.
  reg r_data_aligned_posedge;
  reg [3:0] valid_bit_count_posedge;
  reg [31:0] active_lanes_bitmap_posedge;
 
  reg data_aligned_negedge;
  reg r_data_aligned_negedge;
  reg [3:0] valid_bit_count_negedge;
  reg [31:0] active_lanes_bitmap_negedge;

  reg tx_data_aligned_posedge;
  reg r_tx_data_aligned_posedge;
  reg [3:0] tx_valid_bit_count_posedge;
  reg [31:0] tx_active_lanes_bitmap_posedge;
  
  reg tx_data_aligned_negedge;
  reg r_tx_data_aligned_negedge;
  reg [3:0] tx_valid_bit_count_negedge;
  reg [31:0] tx_active_lanes_bitmap_negedge;

  // Wire declarations

  // Transmit interface signals. All these signals are outputs from the
  // lane receiver modules. Each bit corresponds to a lane receiver
  // module instantiation.

  wire [31:0] tx_d_or_k_code; // Asserted when a K code is detected. 
  wire [31:0] tx_deskew_d_or_k_code; // Deskewed d_or_k_code_signal (PIPE only)
  wire [31:0] tx_valid_code; // Asserted whenever a valid 10b code is detected.
  wire [31:0] tx_current_rd; // Running disparity
  wire [31:0] tx_eidle; // Asserted when electrical idle is detected.
  wire [31:0] tx_10b_code_violation; // When deasserted this bit will indicate
                                     // that a 10B code violation has occurred.
  // PCI_EXPRESS_GEN2 code start
  wire [31:0] xmtd_eie_os; // Asserted when a EIE ordered set is detected.
  wire [31:0] xmtd_eie; // Asserted when a EIE symbol is detected.
  // PCI_EXPRESS_GEN2 code end
  wire [31:0] xmtd_skp_os; // Asserted when a SKP ordered set is detected.
  wire [31:0] xmtd_idle_os; // Asserted when a IDL ordered set is detected.
  wire [31:0] xmtd_fts_os; // Asserted when a FTS ordered set is detected.
  wire [31:0] xmtd_ts1; // Asserted when a TS1 ordered set is detected.
  wire [31:0] xmtd_ts2; // Asserted when a TS2 ordered set is detected.
  wire [31:0] xmtd_lane_num; // Asserted when a valid lane number is 
                             // detected in TS1/TS2 ordered set.
  wire [31:0] xmtd_link_num; // Asserted when a valid link number is 
			     // detected in TS1/TS2 ordered set.
  // PCI_EXPRESS_GEN2 code start
  wire [31:0] xmtd_gen1; // Asserted when the gen1 speed bit is set in the TS1/TS2
  wire [31:0] xmtd_gen2; // Asserted when the gen2 speed bit is set in the TS1/TS2
  wire [31:0] xmtd_autonomous; // Asserted when the autonomous bit is set in the TS1/TS2
  wire [31:0] xmtd_speed_change; // Asserted when the speed change bit is set in the TS1/TS2
  wire [31:0] xmtd_compliance_receive; // Asserted when the complainec receive bit is set in the TS1/TS2
  wire [31:0] xmtd_compliance_receive_loopback; // Asserted when the complainec rx and loopback bit are set in the TS1/TS2
  // PCI_EXPRESS_GEN2 code end
  wire [31:0] xmtd_reset; // Asserted when the reset bit in the TS1/TS2 

  wire [31:0] xmtd_loopback; // Asserted when loopback bit is set in TS1/TS2
  wire [31:0] xmtd_disable; // Asserted when disable bit is set in the TS1/TS2
  wire [31:0] xmtd_no_scramble; // Asserted when disable scrambling is set 
				// in TS1/TS2
  wire [31:0] xmtd_idle_data; // Asserted when idle data is detected.
  wire [31:0] xmtd_comp_pattern;  // Asserted when compliance pattern 
				  // is detected.
  // PCI_EXPRESS_GEN2 code start
  wire [31:0] xmtd_modified_comp_pattern;
  // PCI_EXPRESS_GEN2 code end

  wire xmting_dllp_tlp; // Asserted when a DLLP or a TLP is on the link.

  // Receive interface signals. All these signals are outputs from the
  // lane receiver modules. Each bit corresponds to a lane receiver 
  // module instantiation. 
 
  wire [31:0] rx_d_or_k_code; // Asserted when a K code is detected.
  wire [31:0] rx_deskew_d_or_k_code; // Deskewed d_or_k_code_signal (PIPE only)
  wire [31:0] rx_valid_code; // Asserted whenever a valid 10b code is detected.
  wire [31:0] rx_current_rd; // Running disparity  
  wire [31:0] rx_eidle; // Asserted when electrical idle is detected.
  wire [31:0] rx_10b_code_violation; // When deasserted this bit will indicate
                                     // that a 10B code violation has occurred.
  // PCI_EXPRESS_GEN2 code start
  wire [31:0] rcvd_eie_os; // Asserted when a EIE ordered set is detected.
  wire [31:0] rcvd_eie; // Asserted when a EIE symbol is detected.
  // PCI_EXPRESS_GEN2 code end
  wire [31:0] rcvd_skp_os; // Asserted when a SKP ordered set is detected.
  wire [31:0] rcvd_idle_os; // Asserted when a IDL ordered set is detected.
  wire [31:0] rcvd_fts_os; // Asserted when a FTS ordered set is detected.
  wire [31:0] rcvd_ts1; // Asserted when a TS1 ordered set is detected.
  wire [31:0] rcvd_ts2; // Asserted when a TS2 ordered set is detected.
  wire [31:0] rcvd_lane_num; // Asserted when a valid lane number is 
                             // detected in TS1/TS2 ordered set.
  wire [31:0] rcvd_link_num; // Asserted when a valid link number is
                             // detected in TS1/TS2 ordered set.
  // PCI_EXPRESS_GEN2 code start
  wire [31:0] rcvd_gen1; // Asserted when the gen1 speed bit is set in the TS1/TS2
  wire [31:0] rcvd_gen2; // Asserted when the gen2 speed bit is set in the TS1/TS2
  wire [31:0] rcvd_autonomous; // Asserted when the autonomous bit is set in the TS1/TS2
  wire [31:0] rcvd_speed_change; // Asserted when the speed change bit is set in the TS1/TS2
  wire [31:0] rcvd_compliance_receive; // Asserted when the complainec receive bit is set in the TS1/TS2
  wire [31:0] rcvd_compliance_receive_loopback; // Asserted when the complainec rx and loopback bit are set in the TS1/TS2
  // PCI_EXPRESS_GEN2 code end
  wire [31:0] rcvd_reset; // Asserted when the reset bit in the TS1/TS2 
 
  wire [31:0] rcvd_loopback; // Asserted when loopback bit is set in TS1/TS2
  wire [31:0] rcvd_disable; // Asserted when disable bit is set in the TS1/TS2
  wire [31:0] rcvd_no_scramble; // Asserted when disable scrambling is set 
				// in TS1/TS2
  wire [31:0] skp_added;    // asserted when PHY adds skip in SKIP ordered set
  wire [31:0] skp_removed;  // asserted when PHY removes skip from SKIP ordered set

  wire [31:0] rcvd_idle_data; // Asserted when idle data is detected. 
  wire [31:0] rcvd_comp_pattern;  // Asserted when compliance pattern 
				  // is detected.

  // PCI_EXPRESS_GEN2 code start
  wire [31:0] rcvd_modified_comp_pattern;
  // PCI_EXPRESS_GEN2 code end

  wire rcving_dllp_tlp; // Asserted when a DLLP or a TLP is on the link.

  wire [32 *10 - 1:0] tx_10b_data;
  wire [32 *10 - 1:0] rx_10b_data;
  wire [32 * 8 - 1:0] tx_8b_decoded_data;
  wire [32 * 8 - 1:0] rx_8b_decoded_data;
  wire [32 * 8 - 1:0] tx_descrambled_data;
  wire [32 * 8 - 1:0] rx_descrambled_data;
  wire [32 * 8 - 1:0] tx_n_fts;
  wire [32 * 8 - 1:0] rx_n_fts;

  wire [MAX_LINK_WIDTH - 1:0] int_skp_added;
  wire [MAX_LINK_WIDTH - 1:0] int_skp_removed; 
  wire [MAX_LINK_WIDTH * 8 - 1:0] int_tx_descrambled_data;
  wire [MAX_LINK_WIDTH * 8 - 1:0] int_rx_descrambled_data;
  wire [MAX_LINK_WIDTH - 1:0] int_tx_eidle;
  wire [MAX_LINK_WIDTH - 1:0] int_tx_10b_code_violation;
  // PCI_EXPRESS_GEN2 code start
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_eie_os;
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_eie;
  // PCI_EXPRESS_GEN2 code end
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_skp_os;
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_idle_os;
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_fts_os;
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_ts1;
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_ts2;
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_lane_num;
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_link_num;
  // PCI_EXPRESS_GEN2 code start
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_gen1; 
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_gen2; 
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_autonomous; 
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_speed_change; 
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_compliance_receive; 
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_compliance_receive_loopback; 
  // PCI_EXPRESS_GEN2 code end
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_reset;
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_loopback;
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_disable;
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_no_scramble;
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_idle_data;
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_comp_pattern;
  // PCI_EXPRESS_GEN2 code start
  wire [MAX_LINK_WIDTH - 1:0] int_xmtd_modified_comp_pattern;
  // PCI_EXPRESS_GEN2 code end
  wire [MAX_LINK_WIDTH - 1:0] int_tx_valid; 
  wire [MAX_LINK_WIDTH - 1:0] int_tx_d_or_k_code; 
 
  wire [MAX_LINK_WIDTH - 1:0] int_rx_valid;         
  wire [MAX_LINK_WIDTH - 1:0] int_rx_d_or_k_code;
  wire [MAX_LINK_WIDTH - 1:0] int_rx_eidle;
  wire [MAX_LINK_WIDTH - 1:0] int_rx_10b_code_violation;
  // PCI_EXPRESS_GEN2 code start
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_eie_os;
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_eie;
  // PCI_EXPRESS_GEN2 code end
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_skp_os;
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_idle_os;
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_fts_os;
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_ts1;
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_ts2;
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_lane_num;
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_link_num;
  // PCI_EXPRESS_GEN2 code start
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_gen1; 
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_gen2; 
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_autonomous; 
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_speed_change; 
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_compliance_receive; 
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_compliance_receive_loopback; 
  // PCI_EXPRESS_GEN2 code end
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_reset;
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_loopback;
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_disable;
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_no_scramble;
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_idle_data;
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_comp_pattern;
  // PCI_EXPRESS_GEN2 code start
  wire [MAX_LINK_WIDTH - 1:0] int_rcvd_modified_comp_pattern;
  // PCI_EXPRESS_GEN2 code end

  wire [32 * ZI_SYMBOL_DATA_WIDTH - 1:0] int_tx_symbols_p;
  wire [32 * ZI_SYMBOL_DATA_WIDTH - 1:0] int_tx_symbols_n;
  wire [32 * ZI_SYMBOL_DATA_WIDTH - 1:0] int_rx_symbols_p;
  wire [32 * ZI_SYMBOL_DATA_WIDTH - 1:0] int_rx_symbols_n;

  wire tx_level_select; // Transmit level select signal
  wire rx_level_select; // Receive level select signal

  wire [31:0] tx_lane_0_detected; // A logic high on any one of the bits 
				  // indicate that lane 0 is detected on 
				  // that lane 
  wire [31:0] rx_lane_0_detected; // A logic high on any one of the bits 
				  // indicate that lane 0 is detected on 
				  // that lane

  wire tlp_xmtd_tx; // TLP transmitted
  wire dllp_xmtd_tx; // DLLP transmitted
  wire [2:0] dllp_count_tx; // DLLPs transmitted in a symbol time
  wire [1:0] tlp_count_tx; // TLPs transmitted in a symbol time
  wire nullified_tlp_xmtd_tx; // Nullified TLP is transmitted
  wire tx_inc_sdp_stp;
  wire tx_inc_pad;
  wire tx_inc_end;
  wire tx_inc_stp_on_non_zero_lane;
 
  wire tlp_xmtd_rx; // TLP received 
  wire dllp_xmtd_rx; // DLLP received
  wire [2:0] dllp_count_rx; // DLLPs received in a symbol time
  wire [1:0] tlp_count_rx; // TLPs received in a symbol time
  wire nullified_tlp_xmtd_rx; // Nullified TLP is transmitted 
  wire rx_inc_sdp_stp; 
  wire rx_inc_pad;
  wire rx_inc_end; 
  wire rx_inc_stp_on_non_zero_lane;

  wire [1:0] rx_tlp_detected; // A TLP is detected
  wire [69:0] rx_tlp_pkt1; // TLP packet 1 contents
  wire [69:0] rx_tlp_pkt2; // TLP packet 2 contents
  wire [1:0] rx_malformed_tlp; // Malformed TLP
  wire [1:0] tx_tlp_detected;
  wire [69:0] tx_tlp_pkt1;
  wire [69:0] tx_tlp_pkt2;
  wire [1:0] tx_malformed_tlp;
  wire [1:0] tx_tlps_with_digests; // TLPs with TLP digest detected
  wire [1:0] tx_tlps_with_ecrc; // TLPs with ECRC detected
  wire [1:0] rx_tlps_with_digests;
  wire [1:0] rx_tlps_with_ecrc;

// Additional gen1 code start
  wire initial_cfg_started_tx;
  wire initial_cfg_started_rx;
  wire [15:0] last_captured_req_id_tx;
  wire [15:0] last_captured_req_id_rx;
  wire lock_established_tx;
  wire lock_established_rx;
  wire lock_completed_tx;
  wire lock_completed_rx;
// Additional gen1 code end

  wire tx_lane_reverse; // Lane reversal on transmit interface
  wire rx_lane_reverse; // Lane reversal on receive interface
 
  wire link_width_negotiated;
  // PCI_EXPRESS_GEN2 code start
  wire current_speed_5gt;
  wire stable_speed_5gt;
  wire [3:0] xmtd_eie_before_fts_count;
  wire [3:0] rcvd_eie_before_fts_count;
  wire changed_speed_recovery;
  // PCI_EXPRESS_GEN2 code end
  wire [5:0] link_width;
  wire [31:0] link_width_bitmap;
  wire phy_status;
  wire dll_status;
  wire [1:0] tx_retry_progress;
  wire [1:0] rx_retry_progress;
  wire [1:0] xmtd_lcrc_error;
  wire [1:0] rcvd_lcrc_error;

  // Statistics
  wire tx_dllp_ack_detected;
  wire tx_dllp_ack_ended;
  wire tx_dllp_nak_detected;
  wire tx_dllp_nak_ended;
  wire tx_dllp_pm_enter_L1_detected;
  wire tx_dllp_pm_enter_L1_ended;
  wire tx_dllp_pm_enter_L23_detected;
  wire tx_dllp_pm_enter_L23_ended;
  wire tx_dllp_pm_active_req_L0s_detected;
  wire tx_dllp_pm_active_req_L0s_ended;
  wire tx_dllp_pm_active_req_L1_detected;
  wire tx_dllp_pm_active_req_L1_ended;
  wire tx_dllp_pm_request_ack_detected;
  wire tx_dllp_pm_request_ack_ended;
  wire tx_dllp_vendor_specific_detected;
  wire tx_dllp_vendor_specific_ended;
  wire tx_dllp_initfc1_p_detected;
  wire tx_dllp_initfc1_p_ended;
  wire tx_dllp_initfc1_np_detected;
  wire tx_dllp_initfc1_np_ended;
  wire tx_dllp_initfc1_cpl_detected;
  wire tx_dllp_initfc1_cpl_ended;
  wire tx_dllp_initfc2_p_detected;
  wire tx_dllp_initfc2_p_ended;
  wire tx_dllp_initfc2_np_detected;
  wire tx_dllp_initfc2_np_ended;
  wire tx_dllp_updatefc_p_detected;
  wire tx_dllp_updatefc_p_ended;
  wire tx_dllp_updatefc_np_detected;
  wire tx_dllp_updatefc_np_ended;
  wire tx_dllp_updatefc_cpl_detected;
  wire tx_dllp_updatefc_cpl_ended;
  wire tx_detected_dllp_pkt_valid;
  wire [63:0] tx_detected_dllp_pkt;
  wire tx_ended_dllp_pkt_valid;
  wire [63:0] tx_ended_dllp_pkt;
  wire [11:0] tx_current_expected_tlp_seq_num;
  wire [11:0] tx_ack_nak_sequence_number_of_dllp;
  wire vc_tlp_transmitted;

  wire rx_dllp_ack_detected;
  wire rx_dllp_ack_ended;
  wire rx_dllp_nak_detected;
  wire rx_dllp_nak_ended;
  wire rx_dllp_pm_enter_L1_detected;
  wire rx_dllp_pm_enter_L1_ended;
  wire rx_dllp_pm_enter_L23_detected;
  wire rx_dllp_pm_enter_L23_ended;
  wire rx_dllp_pm_active_req_L0s_detected;
  wire rx_dllp_pm_active_req_L0s_ended;
  wire rx_dllp_pm_active_req_L1_detected;
  wire rx_dllp_pm_active_req_L1_ended;
  wire rx_dllp_pm_request_ack_detected;
  wire rx_dllp_pm_request_ack_ended;
  wire rx_dllp_vendor_specific_detected;
  wire rx_dllp_vendor_specific_ended;
  wire rx_dllp_initfc1_p_detected;
  wire rx_dllp_initfc1_p_ended;
  wire rx_dllp_initfc1_np_detected;
  wire rx_dllp_initfc1_np_ended;
  wire rx_dllp_initfc1_cpl_detected;
  wire rx_dllp_initfc1_cpl_ended;
  wire rx_dllp_initfc2_p_detected;
  wire rx_dllp_initfc2_p_ended;
  wire rx_dllp_initfc2_np_detected;
  wire rx_dllp_initfc2_np_ended;
  wire rx_dllp_initfc2_cpl_detected;
  wire rx_dllp_initfc2_cpl_ended;
  wire rx_dllp_updatefc_p_detected;
  wire rx_dllp_updatefc_p_ended;
  wire rx_dllp_updatefc_np_detected;
  wire rx_dllp_updatefc_np_ended;
  wire rx_dllp_updatefc_cpl_detected;
  wire rx_dllp_updatefc_cpl_ended;
  wire rx_detected_dllp_pkt_valid;
  wire [63:0] rx_detected_dllp_pkt;
  wire rx_ended_dllp_pkt_valid;
  wire [63:0] rx_ended_dllp_pkt;
  wire [11:0] rx_current_expected_tlp_seq_num;
  wire [11:0] rx_ack_nak_sequence_number_of_dllp;
  wire vc_tlp_received;

  wire [11:0] tx_num_outstanding_tlps;
  wire tx_incr_detected_duplicate_tlp;
  wire tx_incr_ended_duplicate_tlp;

  wire [11:0] rx_num_outstanding_tlps;
  wire rx_incr_detected_duplicate_tlp;
  wire rx_incr_ended_duplicate_tlp;

  wire [15:0] tx_replay_timer;
  wire [15:0] tx_acknak_timer;

  wire [15:0] rx_replay_timer;
  wire [15:0] rx_acknak_timer;

  wire [32 * 8 - 1:0] link_number_tx;
  wire [32 * 8 - 1:0] link_number_rx;

  wire int_disable_descramble;
  wire disable_descramble;

  // Wire declarations for deskew

  wire deskew_fifo_flush; // To flush the deskew fifo
  wire deskew_fifo_read;
  wire deskew_fifo_read_temp;
  wire data_not_aligned; // Indicates that the data is not aligned.
  wire [31:0] deskew_fifo_full; // Full flag from deskew FIFOs.
  wire [31:0] com_read_from_fifo; // Asserted when COM is read from deskew FIFO
  wire [31:0] deskew_fifo_empty; // Empty flag from deskew FIFOs.
  wire fifo_empty; // Asserted when any of the deskew FIFOs are empty.
  wire [MAX_LINK_WIDTH - 1:0] masked_bitmap;
  wire com_read_from_all_lanes;
  wire data_aligned;
  wire r_data_aligned;
  wire [3:0] valid_bit_count;
  wire [31:0] active_lanes_bitmap;
  wire com_on_consecutive_lanes;

  wire tx_deskew_fifo_flush; // Flush the transmit FIFOs
  wire tx_deskew_fifo_read; // Enable reading of transmit FIFO
  wire tx_deskew_fifo_read_temp;
  wire tx_data_not_aligned;
  wire [31:0] tx_deskew_fifo_full;
  wire [31:0] tx_com_read_from_fifo;
  wire [31:0] tx_deskew_fifo_empty;
  wire tx_fifo_empty;
  wire [MAX_LINK_WIDTH - 1:0] tx_masked_bitmap;
  wire tx_data_aligned;
  wire r_tx_data_aligned;
  wire tx_com_read_from_all_lanes;
  wire [3:0] tx_valid_bit_count;
  wire [31:0] tx_active_lanes_bitmap;
  wire tx_com_on_consecutive_lanes;

  // Wire declarations for Power Management 

  wire xmtd_pm_active_state_nak_tlp;
  wire xmtd_pm_pme_tlp;
  wire xmtd_pme_turn_off_tlp;
  wire xmtd_pme_to_ack_tlp;
  wire [2:0] xmtd_pm_enter_command_flag;
  
  wire rcvd_pm_active_state_nak_tlp;
  wire rcvd_pm_pme_tlp; 
  wire rcvd_pme_turn_off_tlp;
  wire rcvd_pme_to_ack_tlp;
  wire [2:0] rcvd_pm_enter_command_flag;

  wire eidle_detected_tx;
  wire eidle_detected_rx;

  wire reset;
  wire areset;

  // Integer declarations

  integer index, index1, i, j, a, b, c;

  //-------------------- PIPE Support --------------------------
  // Declarations for PIPE interface support
  //------------------------------------------------------------

  reg [MAX_LINK_WIDTH * 8 - 1 :0] tx_data_low_byte;
  reg [MAX_LINK_WIDTH * 8 - 1 :0] tx_data_high_byte;
  reg [MAX_LINK_WIDTH * 8 - 1 :0] rx_data_low_byte;
  reg [MAX_LINK_WIDTH * 8 - 1 :0] rx_data_high_byte;

  reg [(MAX_LINK_WIDTH + 1) * 8 - 1:0] temp_tx_data_low_byte;
  reg [(MAX_LINK_WIDTH + 1) * 8 - 1:0] temp_tx_data_high_byte;
  reg [(MAX_LINK_WIDTH + 1) * 8 - 1:0] temp_rx_data_low_byte;
  reg [(MAX_LINK_WIDTH + 1) * 8 - 1:0] temp_rx_data_high_byte;
  reg [15:0] temp_tx_data;
  reg [15:0] temp_rx_data;

  reg [MAX_LINK_WIDTH - 1:0] tx_data_k_low_byte;
  reg [MAX_LINK_WIDTH - 1:0] tx_data_k_high_byte;
  reg [1:0] temp_tx_data_k;

  reg [MAX_LINK_WIDTH - 1:0] rx_data_k_low_byte;
  reg [MAX_LINK_WIDTH - 1:0] rx_data_k_high_byte;
  reg [1:0] temp_rx_data_k;

  reg no_check_for_edb_without_stp;

  wire [MAX_LINK_WIDTH * 8 - 1 :0] tx_data_8_bit;
  wire [MAX_LINK_WIDTH * 8 - 1 :0] rx_data_8_bit;

  wire [31:0] int_tx_elecidle;
  wire [31:0] int_rx_elecidle;
  wire [31:0] rx_valid_in;

  //-------------------------------------------------------------
  // Internal wires for TC/VC Mapping
  //------------------------------------------------------------

  wire [7:0] enable_vc_id_real;
  wire [7:0] tc_mapped_to_vc_id_0_real;
  wire [7:0] tc_mapped_to_vc_id_1_real;
  wire [7:0] tc_mapped_to_vc_id_2_real;
  wire [7:0] tc_mapped_to_vc_id_3_real;
  wire [7:0] tc_mapped_to_vc_id_4_real;
  wire [7:0] tc_mapped_to_vc_id_5_real;
  wire [7:0] tc_mapped_to_vc_id_6_real;
  wire [7:0] tc_mapped_to_vc_id_7_real;
  wire [7:0] tc_mapped_bitmap;

  //-------------------------------------------------------------

  wire compliance_check_enable;


//`ifxdef ZI_FOR_SEARCH
//  Currently not Supported for Search
//`endxif

`protected

    MTI!#K-L!V\O(piCs-\Q\x1U-<j5i^EaT#]7"=xDi'~~,|,;]$A$lue$]uc%=GlI={rk$H![N^C]
    G?XorQ#{uR5UH}K[[1Vlm|?oZvslAeQWJkVB}3YT]Y]]My1m+ISuI3=N|R;Yu~5Buexu=|w[a@hd
    +=%J>WxVzk@ijsxA$W?bBWRr-RXHsoYWgzp-p$$v-H,;?}pRW>]yn$]p[Z,Z1zKve~={oiIKI(pm
    _G(%y#S42Xw^pwHm\#B[q*{BXN,_7kZ1Z+!,zC}x+ur<p21;U+}klGBT;]5JRv<<<Xn'j7nx}_q/
    B]GzI~O~Cm~$}!sXFNzu{w,E]1kz$=pXaxpTYJ\VsOTvRZzaCuEw>jz;7Hex;W07X=_$+$$>p!mg
    xj^_H\{]7vz#\u3?C^V-sv+lREH?>]O~$_}jZo>JOC{mkCRY27m\[RV<\j_=UCrB/kUATVADu<>B
    TXwXXe*3[mj>@-w<*ZYJrl7mT5CUR*BliJrIBQlw<URBVTx[X+sAx2OWnomae=isk3DE_;xunD~G
    UlX@A-[,}/a]{Qi,uZVQJDK<ok'^#]$eY@'O~K7D[o3C!k?UxZ'HaH^iEwoYKod9:$I2V=iQ7Gr'
    BREOlUllp)s_KABTr3ro{#nR>YKBv_[5!Reo@=zXrpI+{>ose<HAn->rw}LTjVzj@D-\zeV@,{H+
    vV}BpX[wei=_iDso+TxY@3sBV{J^YnH;V<p&@p$vHt"[eR;l^=W;^Eet_jkvFl=XGyvon@uv*u|,
    X{5vmw~O'>asi@B;-H=3pA>8YB$WO{5_DX1C=1-?]]=z*,X@-Ou_HX_Wc>rj2}\V<{BkQO{=;#A=
    u#GQ5?QA^;V^\zlvBzoo'DmDY,Op~LEpv@[eQ^KH3Hm{zR1}X@J>\H=Qlk}='>/jJxWiaK#O>aE~
    a<s,]Wp<+[iU_!=VI@^H,;H!_E_xlpekwBZ}1C?$2$io]=o72I{2Oej!$VG=;jiyo@D3^Wo5373K
    Z<@J'+=ktH12w7~>Wp=j}XI!z[~<UBH!ZH5A5+Xw^nE'uxw<{{HmvU$k\D;uV!AQUlC!lG>;[~U5
    zDz>Xe'i=7$b)B=Uk7H1[mx}$%]e]{']io4Sf;7U~=WAJ&/D_V$kn-C;vO*B1@O$Blnr}Z>irET>
    v+HH}xa[!3;zkV?paB~1Zp,kTm1Hl!v}EC^FjmX}Da,{o;=>X<,OI\'YK_}B-5w$rj:sBv~k<l~u
    Q{Hxmm'D}+a,Dz*!7B1]2IKx{^JCpe}Jr~=URR+rH_i3<{*otk>1k>jnr'@W;i=innO+{UA@>+,?
    ]WQiGKHs{8W\<Qi>*Zs<~[X={?\*QY8^X2-l,2]1}5w+\@J7UT-Vk''/BIpIkTO=nxxUR2j!3>3G
    E<T$*1ZOw}puA>C!.[Xnm|e^{,R\[}<GT'5YH[&k*{{Il^-Ax<3=o\Uj's;p,}n=r7QQmloi&=H!
    oiDAsPR[Z,sA_$Q~jVRCB~vZX7?}Bm31YYB=o;u=a'Is+{'i7+szr34w[iz3Hp2'mUxt+7{7Rw!>
    77e*DR^Q&AV+TGBMgRnIT}+sV#9#<|P)WEeE&k<
`endprotected
  assign int_tx_symbols_p = 320'b0;
  assign int_tx_symbols_n = 320'b0;
  assign int_rx_symbols_p = 320'b0;
  assign int_rx_symbols_n = 320'b0;

  // Assignments for PIPE Interface

  assign int_tx_elecidle = tx_elecidle;
  assign int_rx_elecidle = rx_elecidle;
  assign rx_valid_in = rx_valid;

  assign disable_descramble = (int_disable_descramble | disable_descrambler);

  assign areset = ~areset_n;
  assign reset = ~reset_n;

  // Assign statements

  //----------------------------------------------------------------
  // TC/VC Mapping assignments
  //
  // 
  // Case 1 When VC_SUPPORT parameter is set to 0, then only VC0 is 
  // supported and all the TC's are mapped to VC0 
  // Case 2 When VC_SUPPORT parameter is set to 1, then all the VC's 
  // are supported and one to one TC/VC mapping is assumed.
  // Case 3 When VC_SUPPORT parameter is set to 2, then user has to 
  // configure the TC/VC mapping and enable the VC's.
  // TC - ID is nothing but the bit position in the 8 bit vector.
  //----------------------------------------------------------------

  assign enable_vc_id_real = (VC_SUPPORT == 0) ? 8'b1 : 
         ((VC_SUPPORT == 1) ? 8'b1111_1111 : enable_vc_id);
  assign tc_mapped_to_vc_id_0_real = (VC_SUPPORT == 0) ? 8'hFF :
	 ((VC_SUPPORT == 1) ? 8'b0000_0001 : tc_mapped_to_vc_id_0); 
  assign tc_mapped_to_vc_id_1_real = (VC_SUPPORT== 0) ? 8'b0 :
	 ((VC_SUPPORT == 1) ? 8'b0000_0010 : tc_mapped_to_vc_id_1);
  assign tc_mapped_to_vc_id_2_real = (VC_SUPPORT == 0) ? 8'b0 :
	 ((VC_SUPPORT == 1) ? 8'b0000_0100 : tc_mapped_to_vc_id_2);
  assign tc_mapped_to_vc_id_3_real = (VC_SUPPORT == 0) ? 8'b0 :
	 ((VC_SUPPORT == 1) ? 8'b0000_1000 : tc_mapped_to_vc_id_3); 
  assign tc_mapped_to_vc_id_4_real = (VC_SUPPORT == 0) ? 8'b0 :
	 ((VC_SUPPORT == 1) ? 8'b0001_0000 : tc_mapped_to_vc_id_4); 
  assign tc_mapped_to_vc_id_5_real = (VC_SUPPORT == 0) ? 8'b0 :
	 ((VC_SUPPORT == 1) ? 8'b0010_0000 : tc_mapped_to_vc_id_5); 
  assign tc_mapped_to_vc_id_6_real = (VC_SUPPORT == 0) ? 8'b0 :
         ((VC_SUPPORT == 1) ? 8'b0100_0000 : tc_mapped_to_vc_id_6);
  assign tc_mapped_to_vc_id_7_real = (VC_SUPPORT == 0) ? 8'b0 : 
         ((VC_SUPPORT == 1) ? 8'b1000_0000 : tc_mapped_to_vc_id_7);

  assign tc_mapped_bitmap = (tc_mapped_to_vc_id_0_real | 
			     tc_mapped_to_vc_id_1_real |
			     tc_mapped_to_vc_id_2_real |
			     tc_mapped_to_vc_id_3_real |
			     tc_mapped_to_vc_id_4_real |
			     tc_mapped_to_vc_id_5_real |
			     tc_mapped_to_vc_id_6_real |
			     tc_mapped_to_vc_id_7_real);

// Additional gen1 code end  
  //----------------------------------------------------------------
  // This block generates the level select signals
  //----------------------------------------------------------------

  assign tx_level_select = (ZI_DOUBLE_DATA_RATE) ?
                    (~(tx_posedge_toggle ^ tx_negedge_toggle)) : 1'b1;
  assign rx_level_select = (ZI_DOUBLE_DATA_RATE) ?
                    (~(rx_posedge_toggle ^ rx_negedge_toggle)) : 1'b1;

`protected

    MTI!#VO*}nrWwl@2[_!IC1jUGLVnv3npwE3G_iDc?$"?1G$}4l+K3U1IWEpTOQ|NkTO\V#a\|5$B
    ?,O@R7D#O:<s+kxRL!{H47Os[|/ZA+zn'}z[\*<ir=-i}HB.@7QB{_T<N=)=ji*s\luiRp-tv>*!
    on7ew9:-rZ\RAo[<EKBAGBB}-DiCe*VmI;x$5:2sc+}]zxz#1!}~^q[Wn'7DVIi{>5#1aaTT_JWs
    G_D^2R-vn1/E#lrHY#\an-p[;-o!o-J^rG\=lAlt,,~TmUem}W_R]73}K{7DKC?UIC?1n7JkR#2{
    EH\[#XXVO+!A=xW7@[xp]~{zOp_wzl!W,@>\pVTZ01#=;De#TYIU3knTpu'2TuDYE+{w}ll@KTaW
    v[]k!H'^\orXRR\A[|!A{[@=[vLI{{T|YfpO;5U5B15k2]wrzk-jZ<6MZCiQU}xx]XRWY=>jVTZ1
    VQBC<EYj,@}5,sUk(wI_sr5$~UX$_$sa{e2[k=Ox@OOEBip3~pC?DK1ITGcK^\[]H[Rpqjlr<oa!
    u:vCTmw*XCN2Tl=3oKe^E<pAzs21y}]w^Ql^A}Y[u;^V{I$D{L<_kW[2u<.\J7]l]#{jSY>J<]xO
    H\U\kABX_BWJGzvHA#+IAmQxu2\O,_I{ZiCRZDX$wko[I]Bv_Kwa3a[ZzH>Zm~+}?'xRB{*;C-I]
    R[\5Q<'A-BBuHU}_5EGoBO\C*O}kTvbs2VlRV~a^1TC)@\QVD#z7Cs#ETVYG35O2VUAJBkx[r+{;
    epE=K]UQ~CJnO+C[KD1{-_?_35u-{wj*?[~!!H$~IOu[eAo^s^xH;]u>iXpVTUu_*3;-76;V-p'T
    uWx}}adX=w-#]k=R2u#}>l;FYXR'iR<T>Y<'of}{v~&pZ1w+r\HJsBY)Y~ZA]nIO5R1v7'-kq_5Q
    R\pIVzc<T!]$KA}t]1mA[~zmpax,ovj**;'xu{'s,U*[[zix57[7zz?17]EwA=}\O=7D~XBCBGK$
    OsBRkI2U1zeHH5e'b~U@UPkjn-J'ep}s?o2w3V{<Ej#YUsLYY^K+VG@W1vu]D>W6CNldY_lY'GT-
    <>e>VEA<LszW{^2,BW{ump*o}Lm]si#n6pTVl{l-7AI!I=rZkwX<oc3{*oY]xuSkew@#5Iwasg?z
    p^%Dz3*C$D^}#Wlze5e&VIT2'Bz1C?JG[^E[lmK^oYw#h
`endprotected
  //-------------------------------------------------------------------------
  // Lane reversal is done as follows.
  //-------------------------------------------------------------------------

  assign tx_lane_reverse = (tx_level_select) ? 
                           tx_lane_reverse_posedge : tx_lane_reverse_negedge;

  assign int_tx_descrambled_data = (tx_lane_reverse === 1'b1) ?
            temp_int_tx_descrambled_data : tx_descrambled_data;

  assign rx_lane_reverse = (rx_level_select) ?
                           rx_lane_reverse_posedge : rx_lane_reverse_negedge;
 
  assign int_rx_descrambled_data = (rx_lane_reverse === 1'b1) ?
            temp_int_rx_descrambled_data : rx_descrambled_data;

`protected

    MTI!#me#w~YJ1B=D2&$Q<XpmOpU<K^eE=v}7jitE_k["]o{K|Y?}G><R#*7^#ARb7BR'=@-\>5In
    ~\~pCD6U\3#&e)CKG!5BmaBmRQD]kU3<IiQve!G#YjG?<>Q+mJC}ZlTEu_^^3!>$\o]~nl!eJHI7
    nr;D#A<w^7FpyU}I'5Wp}>{a'i[YBQ2VRRKCK5!OzF~HnRe!z5,^3'k=][*/]Bz2bOw2=@{VGTre
    lIixEeT@<#{o#,=aH>EO\}!]=\Q\!VH,xN.Y'o[o[iOEH<X!*-G.b+R\5[e<Ze'1[1C^ue>vZM|7
    Z[!Y$C$>U{<-}^[!]JTR=uXe{!a0vAs]cKY>ZIl}^^OjQ#>-Ix]iUVG7B'z-?7;D!]snmv\DzC~X
    +$_n-7DWe?nXJxK'5po={D|{,>!XV*a=}<z>^s}?7li&wUwxB3Gr>5{TjlolS*IJo<e$a)az~eK}
    VICpVa/7Ua>VRk[aGH7e_nG#Vk'CE7]:;7YmI}Z>{U;];<Om\5~ELBR23Ike,,=;kR{OxY#<*8wN
    3v[w5eQx~7*T#>uzYO7ZjXAlqZ+=2%GTmX5?^$?T_-F*p@vv2K5nom5RE.A5'm~52E'REH/up^x\
    }Xn7Wv*!}[lIG!Gk[Wl2<'nMX}UeuOvKzWexlTjpoKE\ezDT+T=\E{Rs^b[<vxtpinwm-QC;GEY+
    vm_R82}W]Grk#eWH^H{]{Wv>sYR\'~xaus2u[EoGs:{ji[h&a7le}{mQQvYw*aX;JpOZK[ZEY2G*
    ,'kCYEO[5>}3:ov-Cf#_>+KI;2_nxpTA$C:FFXD\*7'{vjB]nYVpk*;vEPUa^EvC$VzKQpVWT+|1
    #H?=BQjXzs-u<@2R,B\[zYXp=YUkGJQ(^]lv]$=QHEs@Oxek$a)InHe:tJD!G]iAw7J7J*zAn]r+
    ~THInC$<Kv=a{<\OIjKo>I5+$E'?Ho=WE@5$U2VIzEYBGb]1K,u^,i$-'iECH<[zu'UVGV~+^H*w
    =j7<vRo]_$j1m#cj(Z&[Nz1X@17J5?B=AY7#V;^ATH{QupRI!mD~z/Gfn,#uerDz's=\H$n#*r_[
    3[A^zx!zomKa>$!G_!+*x!3OorQ}'A+oGx{$d]IGr|u$x2l_*juB'DI}nzGIpoUBDz#j\j,+E]R>
    }u{Hs;Q>mr2}@^K<wU;7l}y[uBwqBHo[c*eX2Pk*?37v-35iHGi]j]pe<,i<\K*23p?_D!iTVa^'
    CkCrw}cmD+GjxD_Y?m[w-@u-w@_l{z_O_m^l}]'TI\G{BC$K{DC9Te+TasiB&-l~HovB!V<VxwTx
    w55?{e{WYl-raq?HwYEon5q(IICpGTQn!}$;VbCpTXE}i,=OvsBi8r+U'K]1Dur-uW}^eG\iEn{G
    Aeu>[~OlHR*Ze-1Ho\x-^<^!n~(Ur->m{_;j[>G*<aT[JRG\Y*KwlVvv^ZxR^H!5pDuHBs2I#}k5
    eJGr_=BKOjB\O@Z,DX],EvXI@]G5\EJ&wU$K[EpWQ[RR+Cv[i7^Rw_kvzT2HQw[pO<*B$unA}mDr
    >+QeCv}<EbspszRvk5vKC]Hx'\roX_yfDB,*W[E[KT2Yz\[jA$}[}>o+B'#'#j+$X5pRaNI;@Z!a
    wr$;_5OTnue3_{O[eET7w!_W1@u=j@QB'r6\3}m5CHRn7BspL^_E$];Ewm_jmD]'ZH$HCLvOD@kR
    >W^wT1Qpmol${#Kl+CQnpr}CW2o5Zuo>a'[5Ap1n2B\~rk1$nn)U'v'LECA**~XD2E}rlWE1Yzs}
    U_U3I7~\GU>]^_.'Bes{BUYT\Qn:fW-n}*Jv}_}A'!V1v#wVx3+Tr&\oou8C|(Bazz7,qRiER3_\
    7z[
`endprotected
  //----------------------------------------------------------------
  // Deskew Logic
  //----------------------------------------------------------------

  // This signal will be asserted when any of the FIFOs are empty 

  assign fifo_empty =
           ((phy_status === 1'b0 &&
            |(deskew_fifo_empty & active_lanes_bitmap) === 1'b1 &&
             |active_lanes_bitmap === 1'b1) ||
           (phy_status === 1'b1 &&
            |(deskew_fifo_empty & link_width_bitmap) === 1'b1));

  // Flush the FIFO's when any of the FIFO is full or data is not
  // aligned. 
 
  assign deskew_fifo_flush =
             ((|deskew_fifo_full[MAX_LINK_WIDTH -1 :0] === 1'b1 &&
	       com_read_from_all_lanes !== 1'b1 &&
	       data_aligned === 1'b0 && fifo_empty === 1'b1)
              || (data_aligned === 1'b0 && r_data_aligned === 1'b1) ||
              (|deskew_fifo_full[MAX_LINK_WIDTH -1:0] === 1'b1 &&
              com_on_consecutive_lanes === 1'b0 &&
              |com_read_from_fifo[MAX_LINK_WIDTH - 1:0] === 1'b1 &&
	      data_aligned == 1'b0));
 
  // Masked bitmap variable disables the lanes which are not part of
  // the link.
 
  assign masked_bitmap = link_width_bitmap & com_read_from_fifo;
 
  // com_read_from_all_lanes is asserted whenever the COM symbol is
  // read from all the lanes of a configured link or all active lanes.
 
  assign com_read_from_all_lanes =
              ((phy_status === 1'b0 &&
               ((com_read_from_fifo & active_lanes_bitmap) ===
		 active_lanes_bitmap) && |active_lanes_bitmap === 1'b1) ||
              (phy_status === 1'b1 &&
               masked_bitmap === link_width_bitmap));
 
  // Alignment is said to be complete when all the FIFO's have COM
  // symbols. Incase of PIPE monitor, there is no concept bit count 
  // as PIPE interface is always parallel
 
  /*assign deskew_fifo_read = (INTERFACE_TYPE === 1) ?
            deskew_fifo_read_temp :
            (deskew_fifo_read_temp && valid_bit_count === 4'b1001);
  */

  assign deskew_fifo_read = deskew_fifo_read_temp;
 
  assign deskew_fifo_read_temp =
              ((data_aligned || com_read_from_all_lanes) &&
               data_not_aligned === 1'b0);

  // Data is said to be not aligned, when READ com is not READ from
  // all active lanes, or all lanes of the configured link.

  /*assign data_not_aligned =
               ((|com_read_from_fifo[MAX_LINK_WIDTH - 1:0] === 1'b1 &&
                ((com_read_from_fifo & active_lanes_bitmap) !==
		  active_lanes_bitmap) &&
                 phy_status === 1'b0) ||
                (|masked_bitmap === 1'b1 && phy_status === 1'b1 &&
                 masked_bitmap !== link_width_bitmap));
  */

  // Check whenther COM is detected on consecutive lanes after deskew limit
  // is reached

  assign com_on_consecutive_lanes =
               (|deskew_fifo_full[MAX_LINK_WIDTH - 1:0] === 1'b1 &&
                |com_read_from_fifo[MAX_LINK_WIDTH - 1:0] === 1'b1 &&
                (com_read_from_fifo[MAX_LINK_WIDTH - 1:0] == 32'h1 ||
                 com_read_from_fifo[MAX_LINK_WIDTH - 1:0] == 32'h3 ||
                 com_read_from_fifo[MAX_LINK_WIDTH - 1:0] == 32'hF ||
                 com_read_from_fifo[MAX_LINK_WIDTH - 1:0] == 32'hFF ||
                 com_read_from_fifo[MAX_LINK_WIDTH - 1:0] == 32'hFFF ||
                 com_read_from_fifo[MAX_LINK_WIDTH - 1:0] == 32'hFFFF ||
                 (&(com_read_from_fifo[MAX_LINK_WIDTH - 1:0]) === 1'b1)));

 
  parameter ALIGN_S0 = 0;
  parameter ALIGN_S1 = 1;
  parameter ALIGN_S2 = 2;
  parameter ALIGN_S3 = 3;
  parameter ALIGN_S4 = 4;
  parameter ALIGN_S5 = 5;
  parameter NO_ALIGN_STATE = 6;
 
  reg [2:0] next_state_align;
  reg [2:0] present_state_align_posedge;
  reg [2:0] present_state_align_negedge;
  reg latch_compliance_pattern_detected_posedge;
  reg latch_compliance_pattern_detected_negedge;
 
  reg [2:0] tx_next_state_align;
  reg [2:0] tx_present_state_align_posedge;
  reg [2:0] tx_present_state_align_negedge;
  reg tx_latch_compliance_pattern_detected_posedge;
  reg tx_latch_compliance_pattern_detected_negedge;

`protected

    MTI!#C)REZ2JjV?oZ=k2r,AO7i7?'1ROGU,vRkU'~OiR?lr=?7*}JpsEXl^|>U$iIenxK<a_{oiT
    }25*6XBw]O+*\0/GUCQceUv@sx7w%Bne^7kZ*d<{o@ZD=,_oWkpWg~>rU[5XITpJ7noU*H{-;F^?
    D^Js+1VCm38#jQTnj=_ajR[5_i'a7#WIvTJ\j*Y:CK+KD5k?\xETD>7;#5>H$=pGQizkUOjKpVz#
    E7-+,spw7!=#l!s@zgU{zQxluow<+IHnYZHGi5^k1z<\'J^Xe]dEjv#>Rir_E2<_sX36=a7'HwYo
    IVu~nER#zs75z\Yw50IK*J%\j-anvCY{8PuzXH]*2;uA72Vnw]goT_!-}#Too;UO!Qi*wmA[H!1s
    J@$l5ZBNT\+<uxHHvBEEdYUW\B$$rfBD{Ec>r<7-Q{Ok7rR"$2zD3H\2R7
`endprotected

  wire comma_not_aligned;
  wire latch_compliance_pattern_detected;
  wire deactivate_not_all_lanes_checks;
  wire [2:0] present_state_align;
// Additional gen1 code start	   
  wire [4:0] ltssm_present_state;
  wire [4:0] ltssm_next_state;
  wire enable_ufc_counter;
  assign enable_ufc_counter = (ltssm_present_state === ZI_LTSSM_L0_STATE ||
			       ltssm_present_state === ZI_LTSSM_TX_L0s_STATE ||
			       ltssm_present_state === ZI_LTSSM_RX_L0s_STATE); 
// Additional gen1 code end    
  wire deskew_control;
   
  wire tx_comma_not_aligned;
  wire tx_latch_compliance_pattern_detected;
  wire tx_deactivate_not_all_lanes_checks;
  wire [2:0] tx_present_state_align;

  assign comma_not_aligned = ((|com_read_from_fifo[MAX_LINK_WIDTH - 1:0] &
                           ((com_read_from_fifo & active_lanes_bitmap) !==
                             active_lanes_bitmap) && phy_status === 1'b0) ||
                           (|masked_bitmap === 1'b1 && phy_status === 1'b1
                            && masked_bitmap !== link_width_bitmap));
 
  assign tx_comma_not_aligned = ((|tx_com_read_from_fifo[MAX_LINK_WIDTH - 1:0] &
                           ((tx_com_read_from_fifo & tx_active_lanes_bitmap) !==
                             tx_active_lanes_bitmap) && phy_status === 1'b0) ||
                           (|tx_masked_bitmap === 1'b1 && phy_status === 1'b1
                            && tx_masked_bitmap !== link_width_bitmap));
 
  // Assert data_not_aligned only when compliance patterns are not
  // detected. Otherwise wait for 6 consecutive non alignments to
  // happen to conclude that data on the link is not aligned.
  // This is a change in the design of deciding on when the data is
  // not aligned. Earlier, as soon as a single non alignment was
  // seen, it was concluded that the link is not aligned.
 
  assign data_not_aligned = (next_state_align == NO_ALIGN_STATE &&
                           present_state_align != NO_ALIGN_STATE &&
                           latch_compliance_pattern_detected == 1'b0);
 
  assign tx_data_not_aligned = (tx_next_state_align == NO_ALIGN_STATE &&
                           tx_present_state_align != NO_ALIGN_STATE &&
                           tx_latch_compliance_pattern_detected == 1'b0);   

  //-------------------  Muxes --------------------------------------

  assign latch_compliance_pattern_detected = (rx_level_select) ?      
                   latch_compliance_pattern_detected_posedge :
                   latch_compliance_pattern_detected_negedge;
 
  assign present_state_align = (rx_level_select) ?
                   present_state_align_posedge :
                   present_state_align_negedge;
 
  assign tx_latch_compliance_pattern_detected = (tx_level_select) ?
                   tx_latch_compliance_pattern_detected_posedge :
                   tx_latch_compliance_pattern_detected_negedge;
 
  assign tx_present_state_align = (tx_level_select) ?
                   tx_present_state_align_posedge :
                   tx_present_state_align_negedge;
 
`protected

    MTI!#_~7o/<7ZK?xE$DJ{ezVIj]UJl^wT$lJh|>RY[yZ$k=}viO,lS=i_~uGn]{OFB?U;73(C,]e
    E,blyO!'-[*QzJY,Evus*CJ]Za}@@||#VgqpPzNk1,29x>-<}Elpaz{'GOH57?z5b*=?Ug1m~+EG
    [O|[um2@SqTlT<>S*^@o_U*Cr^2V*sE[K1VjABkRx]lDIHrR#YDW{{wwssYXs[3pG^s1IJlpU7-j
    B!_B=IUjlW[GgK<r#iVC#Q3pZ?sBDUx<'DXUm5!G~)+CTu\zR,6@w\RjRC+RRU=E0BnTKAH]I},w
    [>H5v\_-m/[}j-e<G~-vV3a5Kwzxns_z-vr^D@DJeEvGJwea}C=DD*H>{+KHV3Zl@Y,R+@sp,ZDl
    ][;}A]+VW<rasAC#n;^{av'{e}Sp>4EC<>mx1lGzC'7G,vg<VDXKje7es-Dg?H[G@<p^@wTWWA^!
    AvuVBWvprAvvQD_5r*Rxdro'~D>{pXrUvlraQ6GVpUv~jKCj+YJwE@eskxm<+R;-+R=aAK+-E>kr
    m]_{snO$OzYz*5#jY]=aEB>XXe=lw<YYiDgOvj>2sumrv*upTD3-UKnCeTTJI}EN[O~~'A{_Wz,3
    OZ]Q^KR]ITWaQzQH?*iUoBK[r1jQ${wr5!<<vKvEr31G=WO1cKr'}k<{Dl$}*)5H1uKUn!]b]sI1
    eieoGxY[WA{x+[e!@]K{KR!G7G{}Q?{DnY^'I/!v2D6EC=s^>WBTU3-eJIEzVn]G#E@~DD#UB$;E
    -H<*?+~^JzrOA+,xJ7Kz{o^4G7CW$Y=lZje]WoO_?$raR\SQ{vX2}_n[JHWzi]~[1>>knUA.*HDW
    F=#au5-s[@>}=PYo~v7WATax_7AvJAG'!2l5nW3<!K<QAIkEH*}W>YmB>n!I\3?Am*!Rulv'X+*_
    {=+$5HDTrWWjGQQ@TEPgCjx$HX3$HX-Xk}"vUnn@T*^
`endprotected
  //----------------------------------------------------------------------
  // Transmit deskew logic
  //----------------------------------------------------------------------
  
  // Assert tx_fifo_empty when any of the FIFOs are empty.
  
  assign tx_fifo_empty = 
           ((phy_status === 1'b0 &&
            |(tx_deskew_fifo_empty & tx_active_lanes_bitmap) === 1'b1 &&
            |tx_active_lanes_bitmap === 1'b1) ||
              (phy_status === 1'b1 &&
            |(tx_deskew_fifo_empty & link_width_bitmap) === 1'b1));

  // Flush the FIFOs when any of the fifo is full 
  
  assign tx_deskew_fifo_flush = 
         ((|tx_deskew_fifo_full[MAX_LINK_WIDTH - 1:0] === 1'b1 && 
             tx_com_read_from_all_lanes !== 1'b1 &&
             tx_data_aligned === 1'b0 && tx_fifo_empty === 1'b1) ||
             (tx_data_aligned === 1'b0 && r_tx_data_aligned === 1'b1) ||
	    (|tx_deskew_fifo_full[MAX_LINK_WIDTH - 1:0] === 1'b1 &&
              tx_com_on_consecutive_lanes === 1'b0 &&
              |tx_com_read_from_fifo[MAX_LINK_WIDTH - 1:0] === 1'b1 &&
               tx_data_aligned == 1'b0));

  assign tx_masked_bitmap = link_width_bitmap & tx_com_read_from_fifo;

  // tx_com_read_from_all_lanes is asserted only when COM is read from
  // all lanes of the active link or all active lanes.
  
  assign tx_com_read_from_all_lanes =
            ((phy_status === 1'b0 &&
             ((tx_com_read_from_fifo & tx_active_lanes_bitmap) ===
               tx_active_lanes_bitmap) && |tx_active_lanes_bitmap === 1'b1) ||
               (phy_status === 1'b1 &&
              tx_masked_bitmap === link_width_bitmap));

  // Allignment is said to be complete when COM is read from all lanes.
  
  /*assign tx_deskew_fifo_read = (INTERFACE_TYPE === 1)?
                tx_deskew_fifo_read_temp : 
                (tx_deskew_fifo_read_temp && tx_valid_bit_count === 4'b1001);
  */

  assign tx_deskew_fifo_read = tx_deskew_fifo_read_temp;
  
  assign tx_deskew_fifo_read_temp = 
              ((tx_data_aligned || tx_com_read_from_all_lanes) &&
               tx_data_not_aligned === 1'b0);
  
  
  /*assign tx_data_not_aligned = 
             ((|tx_com_read_from_fifo[MAX_LINK_WIDTH - 1:0] === 1'b1 &&
              ((tx_com_read_from_fifo & tx_active_lanes_bitmap) !==
                tx_active_lanes_bitmap) && phy_status === 1'b0) ||
                (|tx_masked_bitmap === 1'b1 && phy_status === 1'b1 &&
                tx_masked_bitmap !== link_width_bitmap));
  */

  // Check whenther COM is detected on consecutive lanes after deskew limit
  // is reached
 
  assign tx_com_on_consecutive_lanes =
               (|tx_deskew_fifo_full[MAX_LINK_WIDTH - 1:0] === 1'b1 &&
                |tx_com_read_from_fifo[MAX_LINK_WIDTH - 1:0] === 1'b1 &&
                (tx_com_read_from_fifo[MAX_LINK_WIDTH - 1:0] == 32'h1 ||
                 tx_com_read_from_fifo[MAX_LINK_WIDTH - 1:0] == 32'h3 ||
                 tx_com_read_from_fifo[MAX_LINK_WIDTH - 1:0] == 32'hF ||
                 tx_com_read_from_fifo[MAX_LINK_WIDTH - 1:0] == 32'hFF ||
                 tx_com_read_from_fifo[MAX_LINK_WIDTH - 1:0] == 32'hFFF ||
                 tx_com_read_from_fifo[MAX_LINK_WIDTH - 1:0] == 32'hFFFF ||
                 (&tx_com_read_from_fifo[MAX_LINK_WIDTH - 1:0] === 1'b1)));
 
  //-----------------------------------------------------------------------
  // Multiplexed signals for ZI_DOUBLE_DATA_RATE mode of operation.
  //-----------------------------------------------------------------------
 
  assign data_aligned = (rx_level_select) ?
                        data_aligned_posedge : data_aligned_negedge;
 
  assign r_data_aligned = (rx_level_select) ?
                        r_data_aligned_posedge : r_data_aligned_negedge;
 
  assign valid_bit_count = (rx_level_select) ?
                        valid_bit_count_posedge : valid_bit_count_negedge;

  assign active_lanes_bitmap = (rx_level_select) ?   
		  active_lanes_bitmap_posedge : active_lanes_bitmap_negedge;

  assign tx_data_aligned = (tx_level_select) ?
              tx_data_aligned_posedge : tx_data_aligned_negedge;
  
  assign r_tx_data_aligned = (tx_level_select) ?
            r_tx_data_aligned_posedge : r_tx_data_aligned_negedge;
  
  assign tx_valid_bit_count = (tx_level_select) ?
          tx_valid_bit_count_posedge : tx_valid_bit_count_negedge;
  
  assign tx_active_lanes_bitmap = (tx_level_select) ?
            tx_active_lanes_bitmap_posedge : tx_active_lanes_bitmap_negedge;
 
`protected

    MTI!#:V@{a{>QBoWVIIQx7B>mxHIKzi7;[R'A[_Kl7}@-zNYi+ue,z_Xr#XEQREvn5?2R\-YQX3u
    vs~V_r{|KsTR<o'!-wK5rO_[s-C==@vRuo%];17SBW,@bK57i6lWGr{j-ZU}i-*twAW3U't%1A*k
    $/}BvZBvn~l}]7<DA^v^1vjOB1Yv$-^Uu\}]Y27VA\s"I;O7a52H,s#!~*CBQ@$BeB#J|Vl+w);t
    Em@1m{swI3Zj8GHz>C[7G'32-l*,$I@QJmU*ko+-1-$x\*Il+jw~l3Q5[7vOQeDl@;Y2T^!Di1lk
    ENe%YA{}4DK+\JoRs+{+\[Xr\Ec!rOkr7!OAe]l%@=2<H]#TIVYY2aY'{Yo#_!$?*#-lr3p*xYn1
    7+H_:1wn@~Ili^a}Eu{\zPz5#ev,+$3XuGO>}!I$?TDp$W3v,lm$Lo5,Tj*A<*nuTBHTZ4?po@a[
    i=p;ji]BC^*j;Y\&ri7X7!u'QZ}^?U}E{HpGuQ3Q|}YX=QoR[Omz-<\'u?}Qk@E[l1#]iBVCE'mQ
    1[SVaA_=!rXJ=*nXXw3daGQ_6#lGmHw-QVxl>Q7pU-><u0eoBBT=-*C{vGBN'~zzj#w_7=YI-Qz}
    *!RJ>D]Z?AnKGcNyA9$VRZwxxl\;~Jr>-+WRjU1{o@pliz.5EQ]7?Es,-*+KA^<TAC=^i-THG-\?
    x;$x=v&+a'<~{\od@5Bu}v*[\ZRe@\UE\3]@^>GWdqY-5-i-$$&TYp?Za+1g}EARCR<W5VK3I_^p
    DI3IVkp{7_TjZo=,x1k~X7$,?{ZvDJQzEmYj<]I2a\iAG?]~^kBnp,{U==5\EeJ{VJ5KnI^^>xrC
    }za[<{HoBr'l*SO@{xiHA;u5[VoO7m],i}#C[,r>HJrv\W}-{l3]~AHET5@9{s<\pZx~T<[j$~@@
    jVzjRKaOzB}#O\K5}AIOyZ>'v[n=Tz>H=,IWCXw_i#UA5zx_pv];@qUs2-3GjTji>R=ZQif^#7mS
    x|T^;T<{|K[}-a<{vB6D^-H%B>7lH5@,.IY#\NzX=@O*BT?<l2B~Azf._k'o|f<a*QiGo'X5I5z=
    +T-R?BbvO;@@_s3S}a'zSjmV+#a!!1aQ3oa>loixA?GX^,a+Yf%m[{^?RBTO7rVV?e{-9.{+<U3_
    z~!zEv[5?K_JKe.Q!E*_wB]s51v>p=-}JXZ}*epgVezz]KewD@+[G@Vv|?5<{G^{w;CCC2w;5GGH
    $*}mT#vx]e#HEH]o1)J,nTcpo$2@U[2MWUQp}^vRfuAsQYi^3\>$#vswTm7YZ_5sJ'*_;qri=uaY
    vsByvs?=Du>^>X{wiI}>IaCw:!=X=Mg{Opi'p^J-VejVCV${+G?DAn#vi+E**5\H<>{wR>^!a^1C
    [YYB-G+YHX}REnmhZra[OOX}^~Wsz1K7ssk]O<GEN'$5?cAwE!3+n@''@s2lH?XIll=Bz]AT-\yz
    5-!>nVBD]VEQDUe[J-@pe^G!75Vl~Vx2IRsQA'@>^Bap^@YKnoQsY!W+{3VxU*zNJwlW=D3GlZ2s
    2<Us{U}jx\zn^ACEHE+=lxse"nY-Y#Y1H[]Hm<vJ[okU3IXpoVQ-G@C*HAzJGEX$5[=}W1nBowGj
    HXG>>e{,sxkK$KzwmFC-=n<B#JH-D\BBB=^$J=#lpkH-pn1\,5CC1Wo**kapAW:KOzJ)x=R+]ria
    =OD{^!>EW_mT}$z'Iop_<pUzBWXT)zs1?<o]1s=$rzia310rQHuXRRB/HRYGCZ~BN,E3GKHQCk+$
    ]=G?liom;Gu+$>+osVV?1-YA7rFu+VQ\UK\{w-<F\HJnx12JyOE<OJTO*(gFBYQ+VO#3o5jJ,iD*
    v,;5?{\JIaHXsOY#2[ZmmvX]nv}I{UAo1eu@ZjZm|k_@6in2;;QoBJ+HUo-Aag?V{?R3Ekl>$'C\
    JX#xjzW}Qk<o1BIXWssK+2@*~_H$G3v^_Il\xk*Yl!eBo$]GX@+,p?G^]u$mxn+s;ng&jrT1<]3o
    K,xa]XTw|xJsEoearcu-UaP<=ins*jTGWITQHw3_j>ji1^@=r#}GY^=@xU,#=_O[v^>Qw@kl[]5P
    s=-rPfmTo{$<rJCv!D~{wsurp^KT,7-]kBWGpvP,CUl3RI;Y$IU_2\~1Zl~CUeera,B1e^v,HE<C
    ZGRtBz{,.Linv3G[OiQkCv0^=?kpim{9rn-eGkol(~OW_,]#Kr@URIsY2[pRE7sE*VYjCgEw[T'e
    ~sxnG$M1p!p3-*1TCYzfv3+AX=Q57X2D=#Q?*+<@y80GU<mek[BjZ-omXn!E"EA!G5QR;iID,A$I
    ZvkDxCoH3Il@#v!D@X]Gl+<;jQl+3p=i@E[DIVp*3V*K-vbK,BU%9B>,5YX*xAxa7E5xsd'?3lnT
    Cx+zXjwDE!VTC>XoTs$<^;TA1_vK~32xV]s1$zROZpAvYvYknpV[lxo=X~n+UR<BXV+jsCUeHs~,
    =WE3VUw]AEs*eoEx,'VQ[wQ5oUnYy(w^w5Y5B]1_TJf^ZA5rm3{n]WUG<ZHVEX7,HsTwRo{E^?eB
    ]^AWC?3=;TT\;I<rw]rViR\)*1\T;OCE3vQ{ZY+s7JJ2W[vEks#lZ]o}{{[e*H~s"]~B2w*mlV[
`endprotected

// Dummy variables to remove SPC warning

  reg dummy1;
  reg dummy2;

   
  reg dummy3;
  reg dummy4;


`protected

    MTI!#YJDuMxv=H#SImWrHY_G>->>1?UV#EmT[yRAe[_J^.p~wH,znUYzrDl@$iNV?B7[HBVE>~;<
    ^m1Urc,+uY!nr@KR=<QEj[9/?UAnGYaBH[\@}e2;WwV14*{AI\ZMi{x+<_HI}o!!*+\Qt5E=iCDi
    ^,nx<=9H1;=U}1v3<CDmXs[CXI+a_\*$[k!XU5TlkB;--[ZYzK7x^A!~o{[F#5<=FisDX{w^1-Di
    UBR?p;>eD~_GU#7z>wD{IdCjT[;9E$$#1J+zs@_3KvWX5uD]1~zKL]JQ[T'l@VwD#rx_-rx!Z-en
    CS1w${]5K1iU-w_1a{_i$BZo$r7aH+M3><wBv}J2=-*uoG!~-~B=mz]R_r+TU{a+v<u'Y+xT+pAW
    rkw$e}mi5D'G^x=1?J;OV{#E*DBOVE;O$[wdJ-jIhFUUJVE_YQ']?rz-D;zuV;[w@?C5#HQ,{'hl
    v7lI<'R|J1EHi\*^UwO5Y]oBZYR;BH5+!\=j[:2DE}}#Hza]2]%G*s#h^Z>@x3;nIm_JWrkr*O<>
    z'2O7ku*i{E3];~C8RkK1Qm\R73VH=$kDTH>[p+UEU-Kx>qx1V\RIp~_2+!\I3vYJ<J-x[?:K]l=
    YjD;I_x@x\D3xD#Uinj~_kmnvCZnlWZ>B?rIAHrupTKe<v]3>XIud~<D<K^lUEUE_Z-Oausp@KY[
    KkTHKGX]p.\W+\,BJDV,A@EOa,{x7zoDX,=uWK]ZRO~UopnA{3z8cKXVe}!<pDInG=e7
`endprotected
  assign tx_data_8_bit = (INTERFACE_TYPE == 0) ? tx_data :
	    ((tx_level_select) ? tx_data_low_byte : tx_data_high_byte);

  assign tx_d_or_k_code = (INTERFACE_TYPE == 0) ? tx_data_k :
	    ((tx_level_select) ? tx_data_k_low_byte : tx_data_k_high_byte);

  assign tx_8b_decoded_data = tx_data_8_bit; 

  // No check on 10 B code violation as the interface is 8 B data.

  assign tx_10b_code_violation = 32'hFFFF_FFFF; 

`protected

    MTI!#FDz\k<_?CD[Q-Z=a-DY2$w$BoVGI>oOr[I#RD|%B;YJDY#[K<n+lUjXrV[m{<*XQi\iMo]Z
    #x;TBN?{$;zVRet!t/#Umlx-rsoArs7mQ\Cov2Ra=pX=<{vz-B~Hp}l\{xhE],GpU!r)B+_ZE$W$
    GU{]GO+[qpKoZ@\=T+U=;=O_!Dv5\]#\>Aa7XkOJW@z-@VF)IzU<YjrWB]]ZrOawc_OAG{1{=5u{
    ef[;+x\o_{{1'B^!V#3vi-*k!Y+E}^^jI-oY{a$H2D7?<B=W*oI!wHdQ*'ru+@<I>A;_5B>+sO2@
    7.3axuiURav<RR'C^CVW>,N?<$H[~\Rx$Z>I~GVjWwxZRi_]X@,Ol:ClA:5pH3=#,spmZDvoGB-x
    CO?zsvEs-X1BkA>eY+us\UjY{__-A+#B5Ie3\D}'XTX<Ge}}Kl9I_#2=;D$w$kJ@>,[35;!2nETY
    maQ,YOs5{<<~Ss#~n*KVvlnOOC5+1uTYVG+D@V>\1Y3jRTeOjs5*?-l?kf:XXZTGOp7>_\CXTmKO
    -xjA{<=*UT2V>u;@U]+{XpxxpWrA<>Kr5C5r7W'qOi+?<rn#eu_KnX7\w-w-w$@IjQ^}%,_e<#[I
    s6a53]H{<k{Ekuj[-E]p_K
`endprotected
  assign rx_data_8_bit = (INTERFACE_TYPE == 0) ? rx_data :
            ((rx_level_select) ? rx_data_low_byte : rx_data_high_byte);
                 
  assign rx_d_or_k_code = (INTERFACE_TYPE == 0) ? rx_data_k : 
            ((rx_level_select) ? rx_data_k_low_byte : rx_data_k_high_byte);

  assign rx_8b_decoded_data = rx_data_8_bit; 

  // No check on 10 B code violation as the interface is 8 B data.
  // Think on this. How to use this

  assign rx_10b_code_violation = 32'hFFFF_FFFF; 


  //-----------------------------------------------------------------
  // Lane receiver instantiations on transmit interface
  //-----------------------------------------------------------------

  // Lane 0

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode    */    PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE      */    1,
    /* TX_INTERFACE        */    1, 
    /* PHY_LANE_NUMBER     */    0,
    /* ZI_DOUBLE_DATA_RATE     */   ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */    ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */           1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE00_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[0] & pclk),
             .symbol_data_plus(int_tx_elecidle[0] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

	     .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

	     .pci_8b_data(tx_8b_decoded_data[7:0]),
	     .pci_10b_code_violation_n(tx_10b_code_violation[0]),
	     .d_or_k_code(tx_d_or_k_code[0]),

	     .pci_10b_data(tx_10b_data[9:0]),
	     .parallel_symbol_valid(tx_valid_code[0]),
	     .current_rd(tx_current_rd[0]),

	     .deskew_fifo_read(tx_deskew_fifo_read),
	     .deskew_fifo_flush(tx_deskew_fifo_flush),
	     .com_read_from_fifo(tx_com_read_from_fifo[0]),
	     .fifo_almost_full(tx_deskew_fifo_full[0]),
	     .fifo_empty(tx_deskew_fifo_empty[0]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
	     .deskew_d_or_k_code(tx_deskew_d_or_k_code[0]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[7:0]),
             .link_number(link_number_tx[7:0]),
	     .lane_0_detected(tx_lane_0_detected[0]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[7:0]),
             .electrical_idle_detected(tx_eidle[0]),
	     .idle_data_detected(xmtd_idle_data[0]),  
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[0]),
	     .eie_detected(xmtd_eie[0]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[0]),
             .idle_os_detected(xmtd_idle_os[0]),
             .fts_os_detected(xmtd_fts_os[0]),
             .ts1_detected(xmtd_ts1[0]),
             .ts2_detected(xmtd_ts2[0]),
             .lane_num_detected(xmtd_lane_num[0]),
             .link_num_detected(xmtd_link_num[0]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[0]),
             .gen2_data_rate_detected(xmtd_gen2[0]),
             .autonomous_data_rate_detected(xmtd_autonomous[0]),
             .speed_change_data_rate_detected(xmtd_speed_change[0]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[0]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[0]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[0]),
             .loopback_detected(xmtd_loopback[0]),
             .disable_detected(xmtd_disable[0]),
             .disable_scrambling_detected(xmtd_no_scramble[0]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[0]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[0])  
             );

  // Lane 1

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1, 
    /* PHY_LANE_NUMBER   */    1,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */       MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE01_TX (
             .reset(reset),
             .areset(areset),
 
             .clk(tx_clk_gate_lane[1] & pclk),
             .symbol_data_plus(int_tx_elecidle[1] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

	     .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[15:8]), 
             .pci_10b_code_violation_n(tx_10b_code_violation[1]), 
             .d_or_k_code(tx_d_or_k_code[1]), 
              
             .pci_10b_data(tx_10b_data[19:10]), 
             .parallel_symbol_valid(tx_valid_code[1]),
             .current_rd(tx_current_rd[1]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[1]),
             .fifo_almost_full(tx_deskew_fifo_full[1]),
             .fifo_empty(tx_deskew_fifo_empty[1]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[1]),
 
             .descramble_enable(!disable_descramble), 
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[15:8]), 
             .link_number(link_number_tx[15:8]),
	     .lane_0_detected(tx_lane_0_detected[1]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[15:8]),
             .electrical_idle_detected(tx_eidle[1]),
	     .idle_data_detected(xmtd_idle_data[1]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[1]),
	     .eie_detected(xmtd_eie[1]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[1]),
             .idle_os_detected(xmtd_idle_os[1]),
             .fts_os_detected(xmtd_fts_os[1]),
             .ts1_detected(xmtd_ts1[1]),
             .ts2_detected(xmtd_ts2[1]),
             .lane_num_detected(xmtd_lane_num[1]),
             .link_num_detected(xmtd_link_num[1]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[1]),
             .gen2_data_rate_detected(xmtd_gen2[1]),
             .autonomous_data_rate_detected(xmtd_autonomous[1]),
             .speed_change_data_rate_detected(xmtd_speed_change[1]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[1]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[1]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[1]),
             .loopback_detected(xmtd_loopback[1]),
             .disable_detected(xmtd_disable[1]),
             .disable_scrambling_detected(xmtd_no_scramble[1]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[1]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[1])  
             );

  // Lane 2

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1, 
    /* PHY_LANE_NUMBER   */    2,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE02_TX (
             .reset(reset),
             .areset(areset),
 
             .clk(tx_clk_gate_lane[2] & pclk),
             .symbol_data_plus(int_tx_elecidle[2] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

	     .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[23:16]),               
             .pci_10b_code_violation_n(tx_10b_code_violation[2]),    
             .d_or_k_code(tx_d_or_k_code[2]),    
               
             .pci_10b_data(tx_10b_data[29:20]),  
             .parallel_symbol_valid(tx_valid_code[2]),    
             .current_rd(tx_current_rd[2]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[2]),
             .fifo_almost_full(tx_deskew_fifo_full[2]),
             .fifo_empty(tx_deskew_fifo_empty[2]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[2]),
 
             .descramble_enable(!disable_descramble), 
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[23:16]),
             .link_number(link_number_tx[23:16]),
	     .lane_0_detected(tx_lane_0_detected[2]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[23:16]),
             .electrical_idle_detected(tx_eidle[2]),
	     .idle_data_detected(xmtd_idle_data[2]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[2]),
	     .eie_detected(xmtd_eie[2]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[2]),
             .idle_os_detected(xmtd_idle_os[2]),
             .fts_os_detected(xmtd_fts_os[2]),
             .ts1_detected(xmtd_ts1[2]),
             .ts2_detected(xmtd_ts2[2]),
             .lane_num_detected(xmtd_lane_num[2]),
             .link_num_detected(xmtd_link_num[2]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[2]),
             .gen2_data_rate_detected(xmtd_gen2[2]),
             .autonomous_data_rate_detected(xmtd_autonomous[2]),
             .speed_change_data_rate_detected(xmtd_speed_change[2]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[2]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[2]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[2]),
             .loopback_detected(xmtd_loopback[2]),
             .disable_detected(xmtd_disable[2]),
             .disable_scrambling_detected(xmtd_no_scramble[2]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[2]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[2])  
             );

   // Lane 3

   qvl_pci_express_lane_receiver #( 
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,  
    /* PHY_LANE_NUMBER   */    3,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE03_TX ( 
             .reset(reset), 
             .areset(areset), 
  
             .clk(tx_clk_gate_lane[3] & pclk),
             .symbol_data_plus(int_tx_elecidle[3] ? 10'b0 : 10'b1), 
             .symbol_data_minus(10'b0),

	     .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[31:24]),                
             .pci_10b_code_violation_n(tx_10b_code_violation[3]),       
             .d_or_k_code(tx_d_or_k_code[3]),     
                 
             .pci_10b_data(tx_10b_data[39:30]),     
             .parallel_symbol_valid(tx_valid_code[3]),     
             .current_rd(tx_current_rd[3]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[3]),
             .fifo_almost_full(tx_deskew_fifo_full[3]),
             .fifo_empty(tx_deskew_fifo_empty[3]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),	
  // PCI_EXPRESS_GEN2 code end		
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[3]),
  
             .descramble_enable(!disable_descramble),  
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[31:24]),
             .link_number(link_number_tx[31:24]), 
	     .lane_0_detected(tx_lane_0_detected[3]),
             .dllp_tlp_on_link(xmting_dllp_tlp),  
             .descrambled_data(tx_descrambled_data[31:24]), 
             .electrical_idle_detected(tx_eidle[3]), 
	     .idle_data_detected(xmtd_idle_data[3]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[3]),
	     .eie_detected(xmtd_eie[3]),	
  // PCI_EXPRESS_GEN2 code end		
             .skp_os_detected(xmtd_skp_os[3]),    
             .idle_os_detected(xmtd_idle_os[3]),  
             .fts_os_detected(xmtd_fts_os[3]),    
             .ts1_detected(xmtd_ts1[3]),  
             .ts2_detected(xmtd_ts2[3]),  
             .lane_num_detected(xmtd_lane_num[3]), 
             .link_num_detected(xmtd_link_num[3]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[3]),
             .gen2_data_rate_detected(xmtd_gen2[3]),
             .autonomous_data_rate_detected(xmtd_autonomous[3]),
             .speed_change_data_rate_detected(xmtd_speed_change[3]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[3]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[3]),
  // PCI_EXPRESS_GEN2 code end		
             .link_ctrl_reset_detected(xmtd_reset[3]),    
             .loopback_detected(xmtd_loopback[3]),   
             .disable_detected(xmtd_disable[3]),  
             .disable_scrambling_detected(xmtd_no_scramble[3]),   
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[3]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[3])	
             );

  // Lane 4

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    4,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE04_TX (
             .reset(reset),
             .areset(areset),
   
             .clk(tx_clk_gate_lane[4] & pclk),
             .symbol_data_plus(int_tx_elecidle[4] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(tx_8b_decoded_data[39:32]),
             .pci_10b_code_violation_n(tx_10b_code_violation[4]),
             .d_or_k_code(tx_d_or_k_code[4]),

             .pci_10b_data(tx_10b_data[49:40]),
             .parallel_symbol_valid(tx_valid_code[4]),
             .current_rd(tx_current_rd[4]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[4]),
             .fifo_almost_full(tx_deskew_fifo_full[4]),
             .fifo_empty(tx_deskew_fifo_empty[4]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[4]),

             .n_fts(tx_n_fts[39:32]), 
             .descramble_enable(!disable_descramble),      
	     .lanes_with_lane_num(int_xmtd_lane_num),
             .link_number(link_number_tx[39:32]),
	     .lane_0_detected(tx_lane_0_detected[4]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[39:32]),
             .electrical_idle_detected(tx_eidle[4]),
             .idle_data_detected(xmtd_idle_data[4]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[4]),
	     .eie_detected(xmtd_eie[4]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[4]),
             .idle_os_detected(xmtd_idle_os[4]),
             .fts_os_detected(xmtd_fts_os[4]),
             .ts1_detected(xmtd_ts1[4]),
             .ts2_detected(xmtd_ts2[4]),
             .lane_num_detected(xmtd_lane_num[4]),
             .link_num_detected(xmtd_link_num[4]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[4]),
             .gen2_data_rate_detected(xmtd_gen2[4]),
             .autonomous_data_rate_detected(xmtd_autonomous[4]),
             .speed_change_data_rate_detected(xmtd_speed_change[4]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[4]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[4]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[4]),
             .loopback_detected(xmtd_loopback[4]),
             .disable_detected(xmtd_disable[4]),
             .disable_scrambling_detected(xmtd_no_scramble[4]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[4]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[4])  
             );

  // Lane 5

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    5,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE05_TX (
             .reset(reset),
             .areset(areset),
   
             .clk(tx_clk_gate_lane[5] & pclk),
             .symbol_data_plus(int_tx_elecidle[5] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(tx_8b_decoded_data[47:40]),
             .pci_10b_code_violation_n(tx_10b_code_violation[5]),
             .d_or_k_code(tx_d_or_k_code[5]),

             .pci_10b_data(tx_10b_data[59:50]),
             .parallel_symbol_valid(tx_valid_code[5]),
             .current_rd(tx_current_rd[5]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[5]),
             .fifo_almost_full(tx_deskew_fifo_full[5]),
             .fifo_empty(tx_deskew_fifo_empty[5]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[5]),
   
             .descramble_enable(!disable_descramble),      
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[47:40]),
             .link_number(link_number_tx[47:40]),
	     .lane_0_detected(tx_lane_0_detected[5]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[47:40]),
             .electrical_idle_detected(tx_eidle[5]),
             .idle_data_detected(xmtd_idle_data[5]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[5]),
	     .eie_detected(xmtd_eie[5]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[5]),
             .idle_os_detected(xmtd_idle_os[5]),
             .fts_os_detected(xmtd_fts_os[5]),
             .ts1_detected(xmtd_ts1[5]),
             .ts2_detected(xmtd_ts2[5]),
             .lane_num_detected(xmtd_lane_num[5]),
             .link_num_detected(xmtd_link_num[5]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[5]),
             .gen2_data_rate_detected(xmtd_gen2[5]),
             .autonomous_data_rate_detected(xmtd_autonomous[5]),
             .speed_change_data_rate_detected(xmtd_speed_change[5]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[5]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[5]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[5]),
             .loopback_detected(xmtd_loopback[5]),
             .disable_detected(xmtd_disable[5]),
             .disable_scrambling_detected(xmtd_no_scramble[5]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[5]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[5])  
             );

  // Lane 6

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    6,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE06_TX (
             .reset(reset),
             .areset(areset),
   
             .clk(tx_clk_gate_lane[6] & pclk),
             .symbol_data_plus(int_tx_elecidle[6] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(tx_8b_decoded_data[55:48]),
             .pci_10b_code_violation_n(tx_10b_code_violation[6]),
             .d_or_k_code(tx_d_or_k_code[6]),

             .pci_10b_data(tx_10b_data[69:60]),
             .parallel_symbol_valid(tx_valid_code[6]),
             .current_rd(tx_current_rd[6]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[6]),
             .fifo_almost_full(tx_deskew_fifo_full[6]),
             .fifo_empty(tx_deskew_fifo_empty[6]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[6]),
   
             .descramble_enable(!disable_descramble),      
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[55:48]),
             .link_number(link_number_tx[55:48]),
	     .lane_0_detected(tx_lane_0_detected[6]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[55:48]),
             .electrical_idle_detected(tx_eidle[6]),
             .idle_data_detected(xmtd_idle_data[6]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[6]),
	     .eie_detected(xmtd_eie[6]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[6]),
             .idle_os_detected(xmtd_idle_os[6]),
             .fts_os_detected(xmtd_fts_os[6]),
             .ts1_detected(xmtd_ts1[6]),
             .ts2_detected(xmtd_ts2[6]),
             .lane_num_detected(xmtd_lane_num[6]),
             .link_num_detected(xmtd_link_num[6]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[6]),
             .gen2_data_rate_detected(xmtd_gen2[6]),
             .autonomous_data_rate_detected(xmtd_autonomous[6]),
             .speed_change_data_rate_detected(xmtd_speed_change[6]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[6]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[6]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[6]),
             .loopback_detected(xmtd_loopback[6]),
             .disable_detected(xmtd_disable[6]),
             .disable_scrambling_detected(xmtd_no_scramble[6]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[6]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[6])  
             );

  // Lane 7

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    7,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE07_TX (
             .reset(reset),
             .areset(areset),
   
             .clk(tx_clk_gate_lane[7] & pclk),
             .symbol_data_plus(int_tx_elecidle[7] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(tx_8b_decoded_data[63:56]),
             .pci_10b_code_violation_n(tx_10b_code_violation[7]),
             .d_or_k_code(tx_d_or_k_code[7]),

             .pci_10b_data(tx_10b_data[79:70]),
             .parallel_symbol_valid(tx_valid_code[7]),
             .current_rd(tx_current_rd[7]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[7]),
             .fifo_almost_full(tx_deskew_fifo_full[7]),
             .fifo_empty(tx_deskew_fifo_empty[7]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[7]),
   
             .descramble_enable(!disable_descramble),      
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[63:56]),
             .link_number(link_number_tx[63:56]),
	     .lane_0_detected(tx_lane_0_detected[7]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[63:56]),
             .electrical_idle_detected(tx_eidle[7]),
             .idle_data_detected(xmtd_idle_data[7]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[7]),
	     .eie_detected(xmtd_eie[7]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[7]),
             .idle_os_detected(xmtd_idle_os[7]),
             .fts_os_detected(xmtd_fts_os[7]),
             .ts1_detected(xmtd_ts1[7]),
             .ts2_detected(xmtd_ts2[7]),
             .lane_num_detected(xmtd_lane_num[7]),
             .link_num_detected(xmtd_link_num[7]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[7]),
             .gen2_data_rate_detected(xmtd_gen2[7]),
             .autonomous_data_rate_detected(xmtd_autonomous[7]),
             .speed_change_data_rate_detected(xmtd_speed_change[7]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[7]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[7]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[7]),
             .loopback_detected(xmtd_loopback[7]),
             .disable_detected(xmtd_disable[7]),
             .disable_scrambling_detected(xmtd_no_scramble[7]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[7]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[7])  
             );

  // Lane 8

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    8,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE08_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[8] & pclk),
             .symbol_data_plus(int_tx_elecidle[8] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[71:64]),
             .pci_10b_code_violation_n(tx_10b_code_violation[8]),
             .d_or_k_code(tx_d_or_k_code[8]),

             .pci_10b_data(tx_10b_data[89:80]),
             .parallel_symbol_valid(tx_valid_code[8]),
             .current_rd(tx_current_rd[8]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[8]),
             .fifo_almost_full(tx_deskew_fifo_full[8]),
             .fifo_empty(tx_deskew_fifo_empty[8]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[8]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[71:64]),
             .link_number(link_number_tx[71:64]),
             .lane_0_detected(tx_lane_0_detected[8]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[71:64]),
             .electrical_idle_detected(tx_eidle[8]),
             .idle_data_detected(xmtd_idle_data[8]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[8]),
	     .eie_detected(xmtd_eie[8]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[8]),
             .idle_os_detected(xmtd_idle_os[8]),
             .fts_os_detected(xmtd_fts_os[8]),
             .ts1_detected(xmtd_ts1[8]),
             .ts2_detected(xmtd_ts2[8]),
             .lane_num_detected(xmtd_lane_num[8]),
             .link_num_detected(xmtd_link_num[8]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[8]),
             .gen2_data_rate_detected(xmtd_gen2[8]),
             .autonomous_data_rate_detected(xmtd_autonomous[8]),
             .speed_change_data_rate_detected(xmtd_speed_change[8]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[8]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[8]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[8]),
             .loopback_detected(xmtd_loopback[8]),
             .disable_detected(xmtd_disable[8]),
             .disable_scrambling_detected(xmtd_no_scramble[8]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[8]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[8])  
             );

  // Lane 9

 qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    9,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE09_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[9] & pclk),
             .symbol_data_plus(int_tx_elecidle[9] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[79:72]),
             .pci_10b_code_violation_n(tx_10b_code_violation[9]),
             .d_or_k_code(tx_d_or_k_code[9]),

             .pci_10b_data(tx_10b_data[99:90]),
             .parallel_symbol_valid(tx_valid_code[9]),
             .current_rd(tx_current_rd[9]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[9]),
             .fifo_almost_full(tx_deskew_fifo_full[9]),
             .fifo_empty(tx_deskew_fifo_empty[9]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[9]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[79:72]),
             .link_number(link_number_tx[79:72]),
             .lane_0_detected(tx_lane_0_detected[9]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[79:72]),
             .electrical_idle_detected(tx_eidle[9]),
             .idle_data_detected(xmtd_idle_data[9]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[9]),
	     .eie_detected(xmtd_eie[9]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[9]),
             .idle_os_detected(xmtd_idle_os[9]),
             .fts_os_detected(xmtd_fts_os[9]),
             .ts1_detected(xmtd_ts1[9]),
             .ts2_detected(xmtd_ts2[9]),
             .lane_num_detected(xmtd_lane_num[9]),
             .link_num_detected(xmtd_link_num[9]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[9]),
             .gen2_data_rate_detected(xmtd_gen2[9]),
             .autonomous_data_rate_detected(xmtd_autonomous[9]),
             .speed_change_data_rate_detected(xmtd_speed_change[9]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[9]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[9]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[9]),
             .loopback_detected(xmtd_loopback[9]),
             .disable_detected(xmtd_disable[9]),
             .disable_scrambling_detected(xmtd_no_scramble[9]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[9]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[9])  
             ); 

  // Lane 10

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    10,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE10_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[10] & pclk),
             .symbol_data_plus(int_tx_elecidle[10] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[87:80]),
             .pci_10b_code_violation_n(tx_10b_code_violation[10]),
             .d_or_k_code(tx_d_or_k_code[10]),

             .pci_10b_data(tx_10b_data[109:100]),
             .parallel_symbol_valid(tx_valid_code[10]),
             .current_rd(tx_current_rd[10]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[10]),
             .fifo_almost_full(tx_deskew_fifo_full[10]),
             .fifo_empty(tx_deskew_fifo_empty[10]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[10]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[87:80]),
             .link_number(link_number_tx[87:80]),
             .lane_0_detected(tx_lane_0_detected[10]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[87:80]),
             .electrical_idle_detected(tx_eidle[10]),
             .idle_data_detected(xmtd_idle_data[10]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[10]),
	     .eie_detected(xmtd_eie[10]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[10]),
             .idle_os_detected(xmtd_idle_os[10]),
             .fts_os_detected(xmtd_fts_os[10]),
             .ts1_detected(xmtd_ts1[10]),
             .ts2_detected(xmtd_ts2[10]),
             .lane_num_detected(xmtd_lane_num[10]),
             .link_num_detected(xmtd_link_num[10]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[10]),
             .gen2_data_rate_detected(xmtd_gen2[10]),
             .autonomous_data_rate_detected(xmtd_autonomous[10]),
             .speed_change_data_rate_detected(xmtd_speed_change[10]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[10]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[10]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[10]),
             .loopback_detected(xmtd_loopback[10]),
             .disable_detected(xmtd_disable[10]),
             .disable_scrambling_detected(xmtd_no_scramble[10]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[10]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[10])  
             );

  // Lane 11

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    11,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE11_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[11] & pclk),
             .symbol_data_plus(int_tx_elecidle[11] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[95:88]),
             .pci_10b_code_violation_n(tx_10b_code_violation[11]),
             .d_or_k_code(tx_d_or_k_code[11]),

             .pci_10b_data(tx_10b_data[119:110]),
             .parallel_symbol_valid(tx_valid_code[11]),
             .current_rd(tx_current_rd[11]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[11]),
             .fifo_almost_full(tx_deskew_fifo_full[11]),
             .fifo_empty(tx_deskew_fifo_empty[11]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[11]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[95:88]),
             .link_number(link_number_tx[95:88]),
             .lane_0_detected(tx_lane_0_detected[11]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[95:88]),
             .electrical_idle_detected(tx_eidle[11]),
             .idle_data_detected(xmtd_idle_data[11]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[11]),
	     .eie_detected(xmtd_eie[11]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[11]),
             .idle_os_detected(xmtd_idle_os[11]),
             .fts_os_detected(xmtd_fts_os[11]),
             .ts1_detected(xmtd_ts1[11]),
             .ts2_detected(xmtd_ts2[11]),
             .lane_num_detected(xmtd_lane_num[11]),
             .link_num_detected(xmtd_link_num[11]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[11]),
             .gen2_data_rate_detected(xmtd_gen2[11]),
             .autonomous_data_rate_detected(xmtd_autonomous[11]),
             .speed_change_data_rate_detected(xmtd_speed_change[11]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[11]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[11]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[11]),
             .loopback_detected(xmtd_loopback[11]),
             .disable_detected(xmtd_disable[11]),
             .disable_scrambling_detected(xmtd_no_scramble[11]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[11]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[11])  
             );

  // Lane 12
 
  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    12,
    /* ZI_DOUBLE_DATA_RATE   */   ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE12_TX (
             .reset(reset),
             .areset(areset),
 
             .clk(tx_clk_gate_lane[12] & pclk),
             .symbol_data_plus(int_tx_elecidle[12] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(tx_8b_decoded_data[103:96]),
             .pci_10b_code_violation_n(tx_10b_code_violation[12]),
             .d_or_k_code(tx_d_or_k_code[12]),
 
             .pci_10b_data(tx_10b_data[129:120]),
             .parallel_symbol_valid(tx_valid_code[12]),
             .current_rd(tx_current_rd[12]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[12]),
             .fifo_almost_full(tx_deskew_fifo_full[12]),
             .fifo_empty(tx_deskew_fifo_empty[12]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[12]),
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[103:96]),
             .link_number(link_number_tx[103:96]),
             .lane_0_detected(tx_lane_0_detected[12]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[103:96]),
             .electrical_idle_detected(tx_eidle[12]),
             .idle_data_detected(xmtd_idle_data[12]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[12]),
	     .eie_detected(xmtd_eie[12]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[12]),
             .idle_os_detected(xmtd_idle_os[12]),
             .fts_os_detected(xmtd_fts_os[12]),
             .ts1_detected(xmtd_ts1[12]),
             .ts2_detected(xmtd_ts2[12]),
             .lane_num_detected(xmtd_lane_num[12]),
             .link_num_detected(xmtd_link_num[12]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[12]),
             .gen2_data_rate_detected(xmtd_gen2[12]),
             .autonomous_data_rate_detected(xmtd_autonomous[12]),
             .speed_change_data_rate_detected(xmtd_speed_change[12]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[12]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[12]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[12]),
             .loopback_detected(xmtd_loopback[12]),
             .disable_detected(xmtd_disable[12]),
             .disable_scrambling_detected(xmtd_no_scramble[12]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[12]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[12])  
             );

  // Lane 13
 
  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    13,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE13_TX (
             .reset(reset),
             .areset(areset),
 
             .clk(tx_clk_gate_lane[13] & pclk),
             .symbol_data_plus(int_tx_elecidle[13] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(tx_8b_decoded_data[111:104]),
             .pci_10b_code_violation_n(tx_10b_code_violation[13]),
             .d_or_k_code(tx_d_or_k_code[13]),
 
             .pci_10b_data(tx_10b_data[139:130]),
             .parallel_symbol_valid(tx_valid_code[13]),
             .current_rd(tx_current_rd[13]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[13]),
             .fifo_almost_full(tx_deskew_fifo_full[13]),
             .fifo_empty(tx_deskew_fifo_empty[13]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[13]),
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[111:104]),
             .link_number(link_number_tx[111:104]),
             .lane_0_detected(tx_lane_0_detected[13]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[111:104]),
             .electrical_idle_detected(tx_eidle[13]),
             .idle_data_detected(xmtd_idle_data[13]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[13]),
	     .eie_detected(xmtd_eie[13]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[13]),
             .idle_os_detected(xmtd_idle_os[13]),
             .fts_os_detected(xmtd_fts_os[13]),
             .ts1_detected(xmtd_ts1[13]),
             .ts2_detected(xmtd_ts2[13]),
             .lane_num_detected(xmtd_lane_num[13]),
             .link_num_detected(xmtd_link_num[13]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[13]),
             .gen2_data_rate_detected(xmtd_gen2[13]),
             .autonomous_data_rate_detected(xmtd_autonomous[13]),
             .speed_change_data_rate_detected(xmtd_speed_change[13]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[13]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[13]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[13]),
             .loopback_detected(xmtd_loopback[13]),
             .disable_detected(xmtd_disable[13]),
             .disable_scrambling_detected(xmtd_no_scramble[13]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[13]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[13])  
             );

  // Lane 14
 
  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    14,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE14_TX (
             .reset(reset),
             .areset(areset),
 
             .clk(tx_clk_gate_lane[14] & pclk),
             .symbol_data_plus(int_tx_elecidle[14] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(tx_8b_decoded_data[119:112]),
             .pci_10b_code_violation_n(tx_10b_code_violation[14]),
             .d_or_k_code(tx_d_or_k_code[14]),  
 
             .pci_10b_data(tx_10b_data[149:140]),
             .parallel_symbol_valid(tx_valid_code[14]),    
             .current_rd(tx_current_rd[14]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[14]),
             .fifo_almost_full(tx_deskew_fifo_full[14]),
             .fifo_empty(tx_deskew_fifo_empty[14]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[14]),
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[119:112]),
             .link_number(link_number_tx[119:112]),
             .lane_0_detected(tx_lane_0_detected[14]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[119:112]),
             .electrical_idle_detected(tx_eidle[14]),
             .idle_data_detected(xmtd_idle_data[14]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[14]),
	     .eie_detected(xmtd_eie[14]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[14]), 
             .idle_os_detected(xmtd_idle_os[14]),
             .fts_os_detected(xmtd_fts_os[14]), 
             .ts1_detected(xmtd_ts1[14]),
             .ts2_detected(xmtd_ts2[14]),
             .lane_num_detected(xmtd_lane_num[14]),
             .link_num_detected(xmtd_link_num[14]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[14]),
             .gen2_data_rate_detected(xmtd_gen2[14]),
             .autonomous_data_rate_detected(xmtd_autonomous[14]),
             .speed_change_data_rate_detected(xmtd_speed_change[14]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[14]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[14]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[14]),
             .loopback_detected(xmtd_loopback[14]),
             .disable_detected(xmtd_disable[14]),
             .disable_scrambling_detected(xmtd_no_scramble[14]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[14]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[14])  
             );

  // Lane 15
 
  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    15,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE15_TX (
             .reset(reset),
             .areset(areset),
 
             .clk(tx_clk_gate_lane[15] & pclk),
             .symbol_data_plus(int_tx_elecidle[15] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(tx_8b_decoded_data[127:120]),
             .pci_10b_code_violation_n(tx_10b_code_violation[15]),
             .d_or_k_code(tx_d_or_k_code[15]),  
 
             .pci_10b_data(tx_10b_data[159:150]),
             .parallel_symbol_valid(tx_valid_code[15]),    
             .current_rd(tx_current_rd[15]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[15]),
             .fifo_almost_full(tx_deskew_fifo_full[15]),
             .fifo_empty(tx_deskew_fifo_empty[15]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[15]),
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[127:120]),
             .link_number(link_number_tx[127:120]),
             .lane_0_detected(tx_lane_0_detected[15]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[127:120]),
             .electrical_idle_detected(tx_eidle[15]),
             .idle_data_detected(xmtd_idle_data[15]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[15]),
	     .eie_detected(xmtd_eie[15]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[15]), 
             .idle_os_detected(xmtd_idle_os[15]),
             .fts_os_detected(xmtd_fts_os[15]), 
             .ts1_detected(xmtd_ts1[15]),
             .ts2_detected(xmtd_ts2[15]),
             .lane_num_detected(xmtd_lane_num[15]),
             .link_num_detected(xmtd_link_num[15]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[15]),
             .gen2_data_rate_detected(xmtd_gen2[15]),
             .autonomous_data_rate_detected(xmtd_autonomous[15]),
             .speed_change_data_rate_detected(xmtd_speed_change[15]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[15]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[15]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[15]),
             .loopback_detected(xmtd_loopback[15]),
             .disable_detected(xmtd_disable[15]),
             .disable_scrambling_detected(xmtd_no_scramble[15]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[15]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[15])  
             );

  // Lane 16

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    16,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE16_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[16] & pclk),
             .symbol_data_plus(int_tx_elecidle[16] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[135:128]),
             .pci_10b_code_violation_n(tx_10b_code_violation[16]),
             .d_or_k_code(tx_d_or_k_code[16]),

             .pci_10b_data(tx_10b_data[169:160]),
             .parallel_symbol_valid(tx_valid_code[16]),
             .current_rd(tx_current_rd[16]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[16]),
             .fifo_almost_full(tx_deskew_fifo_full[16]),
             .fifo_empty(tx_deskew_fifo_empty[16]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[16]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[135:128]),
             .link_number(link_number_tx[135:128]),
             .lane_0_detected(tx_lane_0_detected[16]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[135:128]),
             .electrical_idle_detected(tx_eidle[16]),
             .idle_data_detected(xmtd_idle_data[16]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[16]),
	     .eie_detected(xmtd_eie[16]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[16]),
             .idle_os_detected(xmtd_idle_os[16]),
             .fts_os_detected(xmtd_fts_os[16]),
             .ts1_detected(xmtd_ts1[16]),
             .ts2_detected(xmtd_ts2[16]),
             .lane_num_detected(xmtd_lane_num[16]),
             .link_num_detected(xmtd_link_num[16]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[16]),
             .gen2_data_rate_detected(xmtd_gen2[16]),
             .autonomous_data_rate_detected(xmtd_autonomous[16]),
             .speed_change_data_rate_detected(xmtd_speed_change[16]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[16]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[16]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[16]),
             .loopback_detected(xmtd_loopback[16]),
             .disable_detected(xmtd_disable[16]),
             .disable_scrambling_detected(xmtd_no_scramble[16]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[16]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[16])  
             );

  // Lane 17

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    17,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE17_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[17] & pclk),
             .symbol_data_plus(int_tx_elecidle[17] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[143:136]),
             .pci_10b_code_violation_n(tx_10b_code_violation[17]),
             .d_or_k_code(tx_d_or_k_code[17]),

             .pci_10b_data(tx_10b_data[179:170]),
             .parallel_symbol_valid(tx_valid_code[17]),
             .current_rd(tx_current_rd[17]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[17]),
             .fifo_almost_full(tx_deskew_fifo_full[17]),
             .fifo_empty(tx_deskew_fifo_empty[17]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[17]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[143:136]),
             .link_number(link_number_tx[143:136]),
             .lane_0_detected(tx_lane_0_detected[17]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[143:136]),
             .electrical_idle_detected(tx_eidle[17]),
             .idle_data_detected(xmtd_idle_data[17]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[17]),
	     .eie_detected(xmtd_eie[17]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[17]),
             .idle_os_detected(xmtd_idle_os[17]),
             .fts_os_detected(xmtd_fts_os[17]),
             .ts1_detected(xmtd_ts1[17]),
             .ts2_detected(xmtd_ts2[17]),
             .lane_num_detected(xmtd_lane_num[17]),
             .link_num_detected(xmtd_link_num[17]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[17]),
             .gen2_data_rate_detected(xmtd_gen2[17]),
             .autonomous_data_rate_detected(xmtd_autonomous[17]),
             .speed_change_data_rate_detected(xmtd_speed_change[17]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[17]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[17]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[17]),
             .loopback_detected(xmtd_loopback[17]),
             .disable_detected(xmtd_disable[17]),
             .disable_scrambling_detected(xmtd_no_scramble[17]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[17]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[17])  
             );

  // Lane 18

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    18,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE18_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[18] & pclk),
             .symbol_data_plus(int_tx_elecidle[18] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[151:144]),
             .pci_10b_code_violation_n(tx_10b_code_violation[18]),
             .d_or_k_code(tx_d_or_k_code[18]),

             .pci_10b_data(tx_10b_data[189:180]),
             .parallel_symbol_valid(tx_valid_code[18]),
             .current_rd(tx_current_rd[18]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[18]),
             .fifo_almost_full(tx_deskew_fifo_full[18]),
             .fifo_empty(tx_deskew_fifo_empty[18]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[18]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[151:144]), 
             .link_number(link_number_tx[151:144]),
             .lane_0_detected(tx_lane_0_detected[18]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[151:144]),
             .electrical_idle_detected(tx_eidle[18]),
             .idle_data_detected(xmtd_idle_data[18]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[18]),
	     .eie_detected(xmtd_eie[18]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[18]),
             .idle_os_detected(xmtd_idle_os[18]),
             .fts_os_detected(xmtd_fts_os[18]),
             .ts1_detected(xmtd_ts1[18]),
             .ts2_detected(xmtd_ts2[18]),
             .lane_num_detected(xmtd_lane_num[18]),
             .link_num_detected(xmtd_link_num[18]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[18]),
             .gen2_data_rate_detected(xmtd_gen2[18]),
             .autonomous_data_rate_detected(xmtd_autonomous[18]),
             .speed_change_data_rate_detected(xmtd_speed_change[18]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[18]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[18]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[18]),
             .loopback_detected(xmtd_loopback[18]),
             .disable_detected(xmtd_disable[18]),
             .disable_scrambling_detected(xmtd_no_scramble[18]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[18]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[18])  
             );

  // Lane 19

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    19,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE19_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[19] & pclk),
             .symbol_data_plus(int_tx_elecidle[19] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[159:152]),
             .pci_10b_code_violation_n(tx_10b_code_violation[19]),
             .d_or_k_code(tx_d_or_k_code[19]),

             .pci_10b_data(tx_10b_data[199:190]),
             .parallel_symbol_valid(tx_valid_code[19]),
             .current_rd(tx_current_rd[19]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[19]),
             .fifo_almost_full(tx_deskew_fifo_full[19]),
             .fifo_empty(tx_deskew_fifo_empty[19]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),    
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[19]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[159:152]),
             .link_number(link_number_tx[159:152]),
             .lane_0_detected(tx_lane_0_detected[19]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[159:152]),
             .electrical_idle_detected(tx_eidle[19]),
             .idle_data_detected(xmtd_idle_data[19]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[19]),
	     .eie_detected(xmtd_eie[19]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[19]),
             .idle_os_detected(xmtd_idle_os[19]),
             .fts_os_detected(xmtd_fts_os[19]),
             .ts1_detected(xmtd_ts1[19]),
             .ts2_detected(xmtd_ts2[19]),
             .lane_num_detected(xmtd_lane_num[19]),
             .link_num_detected(xmtd_link_num[19]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[19]),
             .gen2_data_rate_detected(xmtd_gen2[19]),
             .autonomous_data_rate_detected(xmtd_autonomous[19]),
             .speed_change_data_rate_detected(xmtd_speed_change[19]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[19]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[19]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[19]),
             .loopback_detected(xmtd_loopback[19]),
             .disable_detected(xmtd_disable[19]),
             .disable_scrambling_detected(xmtd_no_scramble[19]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[19]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[19])  
             );

  // Lane 20

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    20,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE20_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[20] & pclk),
             .symbol_data_plus(int_tx_elecidle[20] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[167:160]),
             .pci_10b_code_violation_n(tx_10b_code_violation[20]),
             .d_or_k_code(tx_d_or_k_code[20]),

             .pci_10b_data(tx_10b_data[209:200]),
             .parallel_symbol_valid(tx_valid_code[20]),
             .current_rd(tx_current_rd[20]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[20]),
             .fifo_almost_full(tx_deskew_fifo_full[20]),
             .fifo_empty(tx_deskew_fifo_empty[20]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[20]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[167:160]),
             .link_number(link_number_tx[167:160]),
             .lane_0_detected(tx_lane_0_detected[20]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[167:160]),
             .electrical_idle_detected(tx_eidle[20]),
             .idle_data_detected(xmtd_idle_data[20]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[20]),
	     .eie_detected(xmtd_eie[20]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[20]),
             .idle_os_detected(xmtd_idle_os[20]),
             .fts_os_detected(xmtd_fts_os[20]),
             .ts1_detected(xmtd_ts1[20]),
             .ts2_detected(xmtd_ts2[20]),
             .lane_num_detected(xmtd_lane_num[20]),
             .link_num_detected(xmtd_link_num[20]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[20]),
             .gen2_data_rate_detected(xmtd_gen2[20]),
             .autonomous_data_rate_detected(xmtd_autonomous[20]),
             .speed_change_data_rate_detected(xmtd_speed_change[20]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[20]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[20]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[20]),
             .loopback_detected(xmtd_loopback[20]),
             .disable_detected(xmtd_disable[20]),
             .disable_scrambling_detected(xmtd_no_scramble[20]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[20]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[20])  
             );

  // Lane 21

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    21,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE21_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[21] & pclk),
             .symbol_data_plus(int_tx_elecidle[21] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[175:168]),
             .pci_10b_code_violation_n(tx_10b_code_violation[21]),
             .d_or_k_code(tx_d_or_k_code[21]),

             .pci_10b_data(tx_10b_data[219:210]),
             .parallel_symbol_valid(tx_valid_code[21]),
             .current_rd(tx_current_rd[21]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[21]),
             .fifo_almost_full(tx_deskew_fifo_full[21]),
             .fifo_empty(tx_deskew_fifo_empty[21]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[21]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[175:168]),
             .link_number(link_number_tx[175:168]),
             .lane_0_detected(tx_lane_0_detected[21]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[175:168]),
             .electrical_idle_detected(tx_eidle[21]),
             .idle_data_detected(xmtd_idle_data[21]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[21]),
	     .eie_detected(xmtd_eie[21]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[21]),
             .idle_os_detected(xmtd_idle_os[21]),
             .fts_os_detected(xmtd_fts_os[21]),
             .ts1_detected(xmtd_ts1[21]),
             .ts2_detected(xmtd_ts2[21]),
             .lane_num_detected(xmtd_lane_num[21]),
             .link_num_detected(xmtd_link_num[21]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[21]),
             .gen2_data_rate_detected(xmtd_gen2[21]),
             .autonomous_data_rate_detected(xmtd_autonomous[21]),
             .speed_change_data_rate_detected(xmtd_speed_change[21]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[21]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[21]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[21]),
             .loopback_detected(xmtd_loopback[21]),
             .disable_detected(xmtd_disable[21]),
             .disable_scrambling_detected(xmtd_no_scramble[21]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[21]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[21])  
             );

  // Lane 22

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    22,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE22_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[22] & pclk),
             .symbol_data_plus(int_tx_elecidle[22] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[183:176]),
             .pci_10b_code_violation_n(tx_10b_code_violation[22]),
             .d_or_k_code(tx_d_or_k_code[22]),

             .pci_10b_data(tx_10b_data[229:220]),
             .parallel_symbol_valid(tx_valid_code[22]),
             .current_rd(tx_current_rd[22]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[22]),
             .fifo_almost_full(tx_deskew_fifo_full[22]),
             .fifo_empty(tx_deskew_fifo_empty[22]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[22]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[183:176]),
             .link_number(link_number_tx[183:176]),
             .lane_0_detected(tx_lane_0_detected[22]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[183:176]),
             .electrical_idle_detected(tx_eidle[22]),
             .idle_data_detected(xmtd_idle_data[22]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[22]),
	     .eie_detected(xmtd_eie[22]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[22]),
             .idle_os_detected(xmtd_idle_os[22]),
             .fts_os_detected(xmtd_fts_os[22]),
             .ts1_detected(xmtd_ts1[22]),
             .ts2_detected(xmtd_ts2[22]),
             .lane_num_detected(xmtd_lane_num[22]),
             .link_num_detected(xmtd_link_num[22]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[22]),
             .gen2_data_rate_detected(xmtd_gen2[22]),
             .autonomous_data_rate_detected(xmtd_autonomous[22]),
             .speed_change_data_rate_detected(xmtd_speed_change[22]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[22]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[22]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[22]),
             .loopback_detected(xmtd_loopback[22]),
             .disable_detected(xmtd_disable[22]),
             .disable_scrambling_detected(xmtd_no_scramble[22]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[22]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[22])  
             );

  // Lane 23

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    23,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE23_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[23] & pclk),
             .symbol_data_plus(int_tx_elecidle[23] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[191:184]),
             .pci_10b_code_violation_n(tx_10b_code_violation[23]),
             .d_or_k_code(tx_d_or_k_code[23]),

             .pci_10b_data(tx_10b_data[239:230]),
             .parallel_symbol_valid(tx_valid_code[23]),
             .current_rd(tx_current_rd[23]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[23]),
             .fifo_almost_full(tx_deskew_fifo_full[23]),
             .fifo_empty(tx_deskew_fifo_empty[23]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[23]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[191:184]),
             .link_number(link_number_tx[191:184]),
             .lane_0_detected(tx_lane_0_detected[23]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[191:184]),
             .electrical_idle_detected(tx_eidle[23]),
             .idle_data_detected(xmtd_idle_data[23]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[23]),
	     .eie_detected(xmtd_eie[23]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[23]),
             .idle_os_detected(xmtd_idle_os[23]),
             .fts_os_detected(xmtd_fts_os[23]),
             .ts1_detected(xmtd_ts1[23]),
             .ts2_detected(xmtd_ts2[23]),
             .lane_num_detected(xmtd_lane_num[23]),
             .link_num_detected(xmtd_link_num[23]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[23]),
             .gen2_data_rate_detected(xmtd_gen2[23]),
             .autonomous_data_rate_detected(xmtd_autonomous[23]),
             .speed_change_data_rate_detected(xmtd_speed_change[23]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[23]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[23]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[23]),
             .loopback_detected(xmtd_loopback[23]),
             .disable_detected(xmtd_disable[23]),
             .disable_scrambling_detected(xmtd_no_scramble[23]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[23]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[23])  
             );

  // Lane 24

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    24,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE24_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[24] & pclk),
             .symbol_data_plus(int_tx_elecidle[24] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[199:192]),
             .pci_10b_code_violation_n(tx_10b_code_violation[24]),
             .d_or_k_code(tx_d_or_k_code[24]),

             .pci_10b_data(tx_10b_data[249:240]),
             .parallel_symbol_valid(tx_valid_code[24]),
             .current_rd(tx_current_rd[24]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[24]),
             .fifo_almost_full(tx_deskew_fifo_full[24]),
             .fifo_empty(tx_deskew_fifo_empty[24]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[24]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[199:192]),
             .link_number(link_number_tx[199:192]),
             .lane_0_detected(tx_lane_0_detected[24]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[199:192]),
             .electrical_idle_detected(tx_eidle[24]),
             .idle_data_detected(xmtd_idle_data[24]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[24]),
	     .eie_detected(xmtd_eie[24]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[24]),
             .idle_os_detected(xmtd_idle_os[24]),
             .fts_os_detected(xmtd_fts_os[24]),
             .ts1_detected(xmtd_ts1[24]),
             .ts2_detected(xmtd_ts2[24]),
             .lane_num_detected(xmtd_lane_num[24]),
             .link_num_detected(xmtd_link_num[24]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[24]),
             .gen2_data_rate_detected(xmtd_gen2[24]),
             .autonomous_data_rate_detected(xmtd_autonomous[24]),
             .speed_change_data_rate_detected(xmtd_speed_change[24]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[24]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[24]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[24]),
             .loopback_detected(xmtd_loopback[24]),
             .disable_detected(xmtd_disable[24]),
             .disable_scrambling_detected(xmtd_no_scramble[24]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[24]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[24])  
             );

  // Lane 25

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    25,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE25_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[25] & pclk),
             .symbol_data_plus(int_tx_elecidle[25] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[207:200]),
             .pci_10b_code_violation_n(tx_10b_code_violation[25]),
             .d_or_k_code(tx_d_or_k_code[25]),

             .pci_10b_data(tx_10b_data[259:250]),
             .parallel_symbol_valid(tx_valid_code[25]),
             .current_rd(tx_current_rd[25]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[25]),
             .fifo_almost_full(tx_deskew_fifo_full[25]),
             .fifo_empty(tx_deskew_fifo_empty[25]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[25]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[207:200]),
             .link_number(link_number_tx[207:200]),
             .lane_0_detected(tx_lane_0_detected[25]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[207:200]),
             .electrical_idle_detected(tx_eidle[25]),
             .idle_data_detected(xmtd_idle_data[25]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[25]),
	     .eie_detected(xmtd_eie[25]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[25]),
             .idle_os_detected(xmtd_idle_os[25]),
             .fts_os_detected(xmtd_fts_os[25]),
             .ts1_detected(xmtd_ts1[25]),
             .ts2_detected(xmtd_ts2[25]),
             .lane_num_detected(xmtd_lane_num[25]),
             .link_num_detected(xmtd_link_num[25]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[25]),
             .gen2_data_rate_detected(xmtd_gen2[25]),
             .autonomous_data_rate_detected(xmtd_autonomous[25]),
             .speed_change_data_rate_detected(xmtd_speed_change[25]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[25]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[25]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[25]),
             .loopback_detected(xmtd_loopback[25]),
             .disable_detected(xmtd_disable[25]),
             .disable_scrambling_detected(xmtd_no_scramble[25]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[25]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[25])  
             );

  // Lane 26

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    26,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE26_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[26] & pclk),
             .symbol_data_plus(int_tx_elecidle[26] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[215:208]),
             .pci_10b_code_violation_n(tx_10b_code_violation[26]),
             .d_or_k_code(tx_d_or_k_code[26]),

             .pci_10b_data(tx_10b_data[269:260]),
             .parallel_symbol_valid(tx_valid_code[26]),
             .current_rd(tx_current_rd[26]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[26]),
             .fifo_almost_full(tx_deskew_fifo_full[26]),
             .fifo_empty(tx_deskew_fifo_empty[26]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[26]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[215:208]),
             .link_number(link_number_tx[215:208]),
             .lane_0_detected(tx_lane_0_detected[26]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[215:208]),
             .electrical_idle_detected(tx_eidle[26]),
             .idle_data_detected(xmtd_idle_data[26]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[26]),
	     .eie_detected(xmtd_eie[26]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[26]),
             .idle_os_detected(xmtd_idle_os[26]),
             .fts_os_detected(xmtd_fts_os[26]),
             .ts1_detected(xmtd_ts1[26]),
             .ts2_detected(xmtd_ts2[26]),
             .lane_num_detected(xmtd_lane_num[26]),
             .link_num_detected(xmtd_link_num[26]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[26]),
             .gen2_data_rate_detected(xmtd_gen2[26]),
             .autonomous_data_rate_detected(xmtd_autonomous[26]),
             .speed_change_data_rate_detected(xmtd_speed_change[26]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[26]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[26]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[26]),
             .loopback_detected(xmtd_loopback[26]),
             .disable_detected(xmtd_disable[26]),
             .disable_scrambling_detected(xmtd_no_scramble[26]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[26]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[26])  
             );

  // Lane 27

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    27,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE27_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[27] & pclk),
             .symbol_data_plus(int_tx_elecidle[27] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[223:216]),
             .pci_10b_code_violation_n(tx_10b_code_violation[27]),
             .d_or_k_code(tx_d_or_k_code[27]),

             .pci_10b_data(tx_10b_data[279:270]),
             .parallel_symbol_valid(tx_valid_code[27]),
             .current_rd(tx_current_rd[27]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[27]),
             .fifo_almost_full(tx_deskew_fifo_full[27]),
             .fifo_empty(tx_deskew_fifo_empty[27]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[27]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[223:216]),
             .link_number(link_number_tx[223:216]),
             .lane_0_detected(tx_lane_0_detected[27]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[223:216]),
             .electrical_idle_detected(tx_eidle[27]),
             .idle_data_detected(xmtd_idle_data[27]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[27]),
	     .eie_detected(xmtd_eie[27]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[27]),
             .idle_os_detected(xmtd_idle_os[27]),
             .fts_os_detected(xmtd_fts_os[27]),
             .ts1_detected(xmtd_ts1[27]),
             .ts2_detected(xmtd_ts2[27]),
             .lane_num_detected(xmtd_lane_num[27]),
             .link_num_detected(xmtd_link_num[27]),
             .link_ctrl_reset_detected(xmtd_reset[27]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[27]),
             .gen2_data_rate_detected(xmtd_gen2[27]),
             .autonomous_data_rate_detected(xmtd_autonomous[27]),
             .speed_change_data_rate_detected(xmtd_speed_change[27]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[27]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[27]),
  // PCI_EXPRESS_GEN2 code end	       
             .loopback_detected(xmtd_loopback[27]),
             .disable_detected(xmtd_disable[27]),
             .disable_scrambling_detected(xmtd_no_scramble[27]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[27]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[27])  
             );

  // Lane 28

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    28,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE28_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[28] & pclk),
             .symbol_data_plus(int_tx_elecidle[28] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[231:224]),
             .pci_10b_code_violation_n(tx_10b_code_violation[28]),
             .d_or_k_code(tx_d_or_k_code[28]),

             .pci_10b_data(tx_10b_data[289:280]),
             .parallel_symbol_valid(tx_valid_code[28]),
             .current_rd(tx_current_rd[28]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[28]),
             .fifo_almost_full(tx_deskew_fifo_full[28]),
             .fifo_empty(tx_deskew_fifo_empty[28]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[28]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[231:224]),
             .link_number(link_number_tx[231:224]),
             .lane_0_detected(tx_lane_0_detected[28]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[231:224]),
             .electrical_idle_detected(tx_eidle[28]),
             .idle_data_detected(xmtd_idle_data[28]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[28]),
	     .eie_detected(xmtd_eie[28]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[28]),
             .idle_os_detected(xmtd_idle_os[28]),
             .fts_os_detected(xmtd_fts_os[28]),
             .ts1_detected(xmtd_ts1[28]),
             .ts2_detected(xmtd_ts2[28]),
             .lane_num_detected(xmtd_lane_num[28]),
             .link_num_detected(xmtd_link_num[28]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[28]),
             .gen2_data_rate_detected(xmtd_gen2[28]),
             .autonomous_data_rate_detected(xmtd_autonomous[28]),
             .speed_change_data_rate_detected(xmtd_speed_change[28]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[28]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[28]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[28]),
             .loopback_detected(xmtd_loopback[28]),
             .disable_detected(xmtd_disable[28]),
             .disable_scrambling_detected(xmtd_no_scramble[28]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[28]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[28])  
             );

  // Lane 29

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    29,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */          1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE29_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[29] & pclk),
             .symbol_data_plus(int_tx_elecidle[29] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[239:232]),
             .pci_10b_code_violation_n(tx_10b_code_violation[29]),
             .d_or_k_code(tx_d_or_k_code[29]),

             .pci_10b_data(tx_10b_data[299:290]),
             .parallel_symbol_valid(tx_valid_code[29]),
             .current_rd(tx_current_rd[29]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[29]),
             .fifo_almost_full(tx_deskew_fifo_full[29]),
             .fifo_empty(tx_deskew_fifo_empty[29]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[29]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[239:232]),
             .link_number(link_number_tx[239:232]),
             .lane_0_detected(tx_lane_0_detected[29]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[239:232]),
             .electrical_idle_detected(tx_eidle[29]),
             .idle_data_detected(xmtd_idle_data[29]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[29]),
	     .eie_detected(xmtd_eie[29]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[29]),
             .idle_os_detected(xmtd_idle_os[29]),
             .fts_os_detected(xmtd_fts_os[29]),
             .ts1_detected(xmtd_ts1[29]),
             .ts2_detected(xmtd_ts2[29]),
             .lane_num_detected(xmtd_lane_num[29]),
             .link_num_detected(xmtd_link_num[29]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[29]),
             .gen2_data_rate_detected(xmtd_gen2[29]),
             .autonomous_data_rate_detected(xmtd_autonomous[29]),
             .speed_change_data_rate_detected(xmtd_speed_change[29]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[29]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[29]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[29]),
             .loopback_detected(xmtd_loopback[29]),
             .disable_detected(xmtd_disable[29]),
             .disable_scrambling_detected(xmtd_no_scramble[29]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[29]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[29])  
             );

  // Lane 30

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    30,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE30_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[30] & pclk),
             .symbol_data_plus(int_tx_elecidle[30] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[247:240]),
             .pci_10b_code_violation_n(tx_10b_code_violation[30]),
             .d_or_k_code(tx_d_or_k_code[30]),

             .pci_10b_data(tx_10b_data[309:300]),
             .parallel_symbol_valid(tx_valid_code[30]),
             .current_rd(tx_current_rd[30]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[30]),
             .fifo_almost_full(tx_deskew_fifo_full[30]),
             .fifo_empty(tx_deskew_fifo_empty[30]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[30]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[247:240]),
             .link_number(link_number_tx[247:240]),
             .lane_0_detected(tx_lane_0_detected[30]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[247:240]),
             .electrical_idle_detected(tx_eidle[30]),
             .idle_data_detected(xmtd_idle_data[30]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[30]),
	     .eie_detected(xmtd_eie[30]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[30]),
             .idle_os_detected(xmtd_idle_os[30]),
             .fts_os_detected(xmtd_fts_os[30]),
             .ts1_detected(xmtd_ts1[30]),
             .ts2_detected(xmtd_ts2[30]),
             .lane_num_detected(xmtd_lane_num[30]),
             .link_num_detected(xmtd_link_num[30]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[30]),
             .gen2_data_rate_detected(xmtd_gen2[30]),
             .autonomous_data_rate_detected(xmtd_autonomous[30]),
             .speed_change_data_rate_detected(xmtd_speed_change[30]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[30]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[30]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[30]),
             .loopback_detected(xmtd_loopback[30]),
             .disable_detected(xmtd_disable[30]),
             .disable_scrambling_detected(xmtd_no_scramble[30]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[30]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[30])  
             );

  // Lane 31

  qvl_pci_express_lane_receiver #(
    /* Constraints_Mode */     PHY_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    1,
    /* PHY_LANE_NUMBER   */    31,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */         TX_SKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */       PCI_EXPRESS_GEN2)
    LANE31_TX (
             .reset(reset),
             .areset(areset),

             .clk(tx_clk_gate_lane[31] & pclk),
             .symbol_data_plus(int_tx_elecidle[31] ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(tx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(tx_8b_decoded_data[255:248]),
             .pci_10b_code_violation_n(tx_10b_code_violation[31]),
             .d_or_k_code(tx_d_or_k_code[31]),

             .pci_10b_data(tx_10b_data[319:310]),
             .parallel_symbol_valid(tx_valid_code[31]),
             .current_rd(tx_current_rd[31]),

             .deskew_fifo_read(tx_deskew_fifo_read),
             .deskew_fifo_flush(tx_deskew_fifo_flush),
             .com_read_from_fifo(tx_com_read_from_fifo[31]),
             .fifo_almost_full(tx_deskew_fifo_full[31]),
             .fifo_empty(tx_deskew_fifo_empty[31]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
             .deskew_d_or_k_code(tx_deskew_d_or_k_code[31]),

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_xmtd_lane_num),
	     .n_fts(tx_n_fts[255:248]),
             .link_number(link_number_tx[255:248]),
             .lane_0_detected(tx_lane_0_detected[31]),
             .dllp_tlp_on_link(xmting_dllp_tlp),
             .descrambled_data(tx_descrambled_data[255:248]),
             .electrical_idle_detected(tx_eidle[31]),
             .idle_data_detected(xmtd_idle_data[31]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(xmtd_eie_os[31]),
	     .eie_detected(xmtd_eie[31]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(xmtd_skp_os[31]),
             .idle_os_detected(xmtd_idle_os[31]),
             .fts_os_detected(xmtd_fts_os[31]),
             .ts1_detected(xmtd_ts1[31]),
             .ts2_detected(xmtd_ts2[31]),
             .lane_num_detected(xmtd_lane_num[31]),
             .link_num_detected(xmtd_link_num[31]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(xmtd_gen1[31]),
             .gen2_data_rate_detected(xmtd_gen2[31]),
             .autonomous_data_rate_detected(xmtd_autonomous[31]),
             .speed_change_data_rate_detected(xmtd_speed_change[31]),
	     .link_ctrl_compliance_receive_detected(xmtd_compliance_receive[31]),
             .link_ctrl_compliance_receive_loopback_detected(xmtd_compliance_receive_loopback[31]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(xmtd_reset[31]),
             .loopback_detected(xmtd_loopback[31]),
             .disable_detected(xmtd_disable[31]),
             .disable_scrambling_detected(xmtd_no_scramble[31]),
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(xmtd_comp_pattern[31]),
	     .modified_compliance_pattern_detected(xmtd_modified_comp_pattern[31])  
             ); 

  //------------------------------------------------------------
  // Lane receiver module instantiations on the receive interface
  //------------------------------------------------------------

  // Lane 0

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    0,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */       MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE00_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[0] & pclk),
             .symbol_data_plus((int_rx_elecidle[0] & ~rx_valid_in[0]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

	     .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[7:0]),
             .pci_10b_code_violation_n(rx_10b_code_violation[0]),
             .d_or_k_code(rx_d_or_k_code[0]),

             .pci_10b_data(rx_10b_data[9:0]),
             .parallel_symbol_valid(rx_valid_code[0]),
             .current_rd(rx_current_rd[0]),

	     .deskew_fifo_read(deskew_fifo_read),
	     .deskew_fifo_flush(deskew_fifo_flush),
	     .com_read_from_fifo(com_read_from_fifo[0]),
	     .fifo_almost_full(deskew_fifo_full[0]),
	     .fifo_empty(deskew_fifo_empty[0]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end	       
	     .rx_valid_in(rx_valid_in[0]),  // Specific to PIPE

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[7:0]),
             .link_number(link_number_rx[7:0]),
	     .lane_0_detected(rx_lane_0_detected[0]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[7:0]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[0]),
             .electrical_idle_detected(rx_eidle[0]),
	     .idle_data_detected(rcvd_idle_data[0]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[0]),
	     .eie_detected(rcvd_eie[0]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[0]),
             .idle_os_detected(rcvd_idle_os[0]),
             .fts_os_detected(rcvd_fts_os[0]),
             .ts1_detected(rcvd_ts1[0]),
             .ts2_detected(rcvd_ts2[0]),
             .lane_num_detected(rcvd_lane_num[0]),
             .link_num_detected(rcvd_link_num[0]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[0]),
             .gen2_data_rate_detected(rcvd_gen2[0]),
             .autonomous_data_rate_detected(rcvd_autonomous[0]),
             .speed_change_data_rate_detected(rcvd_speed_change[0]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[0]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[0]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[0]),
             .loopback_detected(rcvd_loopback[0]),
             .disable_detected(rcvd_disable[0]),
             .disable_scrambling_detected(rcvd_no_scramble[0]),
	     .skp_added(skp_added[0]),
	     .skp_removed(skp_removed[0]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[0]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[0])  
             );

   // Lane 1

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT, 
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    1,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE01_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[1] & pclk),
             .symbol_data_plus((int_rx_elecidle[1] & ~rx_valid_in[1]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

	     .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[15:8]),
             .pci_10b_code_violation_n(rx_10b_code_violation[1]),
             .d_or_k_code(rx_d_or_k_code[1]),
 
             .pci_10b_data(rx_10b_data[19:10]),
             .parallel_symbol_valid(rx_valid_code[1]),
             .current_rd(rx_current_rd[1]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[1]),
             .fifo_almost_full(deskew_fifo_full[1]),
             .fifo_empty(deskew_fifo_empty[1]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[1]), // Specific to PIPE

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[15:8]),
             .link_number(link_number_rx[15:8]),
	     .lane_0_detected(rx_lane_0_detected[1]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[15:8]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[1]),
             .electrical_idle_detected(rx_eidle[1]),
	     .idle_data_detected(rcvd_idle_data[1]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[1]),
	     .eie_detected(rcvd_eie[1]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[1]),
             .idle_os_detected(rcvd_idle_os[1]),
             .fts_os_detected(rcvd_fts_os[1]),
             .ts1_detected(rcvd_ts1[1]),
             .ts2_detected(rcvd_ts2[1]),
             .lane_num_detected(rcvd_lane_num[1]),
             .link_num_detected(rcvd_link_num[1]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[1]),
             .gen2_data_rate_detected(rcvd_gen2[1]),
             .autonomous_data_rate_detected(rcvd_autonomous[1]),
             .speed_change_data_rate_detected(rcvd_speed_change[1]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[1]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[1]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[1]),
             .loopback_detected(rcvd_loopback[1]),
             .disable_detected(rcvd_disable[1]),
             .disable_scrambling_detected(rcvd_no_scramble[1]),
	     .skp_added(skp_added[1]),
	     .skp_removed(skp_removed[1]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[1]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[1])  
             );  
 
  // Lane 2
 
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT, 
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    2,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE02_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[2] & pclk),
             .symbol_data_plus((int_rx_elecidle[2] & ~rx_valid_in[2]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

	     .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[23:16]),
             .pci_10b_code_violation_n(rx_10b_code_violation[2]),
             .d_or_k_code(rx_d_or_k_code[2]),
              
             .pci_10b_data(rx_10b_data[29:20]),
             .parallel_symbol_valid(rx_valid_code[2]),
             .current_rd(rx_current_rd[2]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[2]),
             .fifo_almost_full(deskew_fifo_full[2]),
	     .fifo_empty(deskew_fifo_empty[2]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[2]), // Specific to PIPE interface

 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[23:16]),
             .link_number(link_number_rx[23:16]),
	     .lane_0_detected(rx_lane_0_detected[2]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[23:16]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[2]),
             .electrical_idle_detected(rx_eidle[2]),
	     .idle_data_detected(rcvd_idle_data[2]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[2]),
	     .eie_detected(rcvd_eie[2]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[2]),
             .idle_os_detected(rcvd_idle_os[2]),
             .fts_os_detected(rcvd_fts_os[2]),
             .ts1_detected(rcvd_ts1[2]),
             .ts2_detected(rcvd_ts2[2]),
             .lane_num_detected(rcvd_lane_num[2]),
             .link_num_detected(rcvd_link_num[2]),
             .link_ctrl_reset_detected(rcvd_reset[2]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[2]),
             .gen2_data_rate_detected(rcvd_gen2[2]),
             .autonomous_data_rate_detected(rcvd_autonomous[2]),
             .speed_change_data_rate_detected(rcvd_speed_change[2]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[2]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[2]),
  // PCI_EXPRESS_GEN2 code end	       
             .loopback_detected(rcvd_loopback[2]),
             .disable_detected(rcvd_disable[2]),
             .disable_scrambling_detected(rcvd_no_scramble[2]),
	     .skp_added(skp_added[2]),
	     .skp_removed(skp_removed[2]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[2]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[2])  
             );

  // Lane 3
 
   qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    3,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE03_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[3] & pclk),    
             .symbol_data_plus((int_rx_elecidle[3] & ~rx_valid_in[3]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

	     .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[31:24]),
             .pci_10b_code_violation_n(rx_10b_code_violation[3]),
             .d_or_k_code(rx_d_or_k_code[3]),
              
             .pci_10b_data(rx_10b_data[39:30]),
             .parallel_symbol_valid(rx_valid_code[3]),
             .current_rd(rx_current_rd[3]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[3]),
             .fifo_almost_full(deskew_fifo_full[3]),
	     .fifo_empty(deskew_fifo_empty[3]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[3]), // Specific to PIPE interface

             .descramble_enable(!disable_descramble), 
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[31:24]),
             .link_number(link_number_rx[31:24]),
	     .lane_0_detected(rx_lane_0_detected[3]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[31:24]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[3]),
             .electrical_idle_detected(rx_eidle[3]),
	     .idle_data_detected(rcvd_idle_data[3]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[3]),
	     .eie_detected(rcvd_eie[3]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[3]),
             .idle_os_detected(rcvd_idle_os[3]),
             .fts_os_detected(rcvd_fts_os[3]),
             .ts1_detected(rcvd_ts1[3]),
             .ts2_detected(rcvd_ts2[3]),
             .lane_num_detected(rcvd_lane_num[3]),
             .link_num_detected(rcvd_link_num[3]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[3]),
             .gen2_data_rate_detected(rcvd_gen2[3]),
             .autonomous_data_rate_detected(rcvd_autonomous[3]),
             .speed_change_data_rate_detected(rcvd_speed_change[3]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[3]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[3]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[3]),
             .loopback_detected(rcvd_loopback[3]),
             .disable_detected(rcvd_disable[3]),
             .disable_scrambling_detected(rcvd_no_scramble[3]),
	     .skp_added(skp_added[3]),
	     .skp_removed(skp_removed[3]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[3]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[3])  
             );

  // Lane 4

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    4,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE04_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[4] & pclk),
             .symbol_data_plus((int_rx_elecidle[4] & ~rx_valid_in[4]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[39:32]),
             .pci_10b_code_violation_n(rx_10b_code_violation[4]),
             .d_or_k_code(rx_d_or_k_code[4]),

             .pci_10b_data(rx_10b_data[49:40]),
             .parallel_symbol_valid(rx_valid_code[4]),
             .current_rd(rx_current_rd[4]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[4]),
             .fifo_almost_full(deskew_fifo_full[4]),
	     .fifo_empty(deskew_fifo_empty[4]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[4]), // Specific to PIPE interface

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[39:32]),
             .link_number(link_number_rx[39:32]),
	     .lane_0_detected(rx_lane_0_detected[4]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[39:32]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[4]),
             .electrical_idle_detected(rx_eidle[4]),
             .idle_data_detected(rcvd_idle_data[4]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[4]),
	     .eie_detected(rcvd_eie[4]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[4]),
             .idle_os_detected(rcvd_idle_os[4]),
             .fts_os_detected(rcvd_fts_os[4]),
             .ts1_detected(rcvd_ts1[4]),
             .ts2_detected(rcvd_ts2[4]),
             .lane_num_detected(rcvd_lane_num[4]),
             .link_num_detected(rcvd_link_num[4]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[4]),
             .gen2_data_rate_detected(rcvd_gen2[4]),
             .autonomous_data_rate_detected(rcvd_autonomous[4]),
             .speed_change_data_rate_detected(rcvd_speed_change[4]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[4]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[4]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[4]),
             .loopback_detected(rcvd_loopback[4]),
             .disable_detected(rcvd_disable[4]),
             .disable_scrambling_detected(rcvd_no_scramble[4]),
	     .skp_added(skp_added[4]),
	     .skp_removed(skp_removed[4]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[4]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[4])  
             );

  // Lane 5

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    5,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE05_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[5] & pclk),
             .symbol_data_plus((int_rx_elecidle[5] & ~rx_valid_in[5]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[47:40]),
             .pci_10b_code_violation_n(rx_10b_code_violation[5]),
             .d_or_k_code(rx_d_or_k_code[5]),

             .pci_10b_data(rx_10b_data[59:50]),
             .parallel_symbol_valid(rx_valid_code[5]),
             .current_rd(rx_current_rd[5]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[5]),
             .fifo_almost_full(deskew_fifo_full[5]),
	     .fifo_empty(deskew_fifo_empty[5]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[5]), // Specific to PIPE interface

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[47:40]),
             .link_number(link_number_rx[47:40]),
	     .lane_0_detected(rx_lane_0_detected[5]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[47:40]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[5]),
             .electrical_idle_detected(rx_eidle[5]),
             .idle_data_detected(rcvd_idle_data[5]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[5]),
	     .eie_detected(rcvd_eie[5]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[5]),
             .idle_os_detected(rcvd_idle_os[5]),
             .fts_os_detected(rcvd_fts_os[5]),
             .ts1_detected(rcvd_ts1[5]),
             .ts2_detected(rcvd_ts2[5]),
             .lane_num_detected(rcvd_lane_num[5]),
             .link_num_detected(rcvd_link_num[5]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[5]),
             .gen2_data_rate_detected(rcvd_gen2[5]),
             .autonomous_data_rate_detected(rcvd_autonomous[5]),
             .speed_change_data_rate_detected(rcvd_speed_change[5]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[5]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[5]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[5]),
             .loopback_detected(rcvd_loopback[5]),
             .disable_detected(rcvd_disable[5]),
             .disable_scrambling_detected(rcvd_no_scramble[5]),
	     .skp_added(skp_added[5]),
	     .skp_removed(skp_removed[5]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[5]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[5])  
             );

  // Lane 6
 
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    6,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE06_RX (
             .reset(reset),
             .areset(areset),
  
             .clk(rx_clk_gate_lane[6] & pclk),
             .symbol_data_plus((int_rx_elecidle[6] & ~rx_valid_in[6]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[55:48]),
             .pci_10b_code_violation_n(rx_10b_code_violation[6]),
             .d_or_k_code(rx_d_or_k_code[6]),
 
             .pci_10b_data(rx_10b_data[69:60]),
             .parallel_symbol_valid(rx_valid_code[6]),
             .current_rd(rx_current_rd[6]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[6]),
             .fifo_almost_full(deskew_fifo_full[6]),
	     .fifo_empty(deskew_fifo_empty[6]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[6]), // Specific to PIPE interface
  
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[55:48]),
             .link_number(link_number_rx[55:48]),
	     .lane_0_detected(rx_lane_0_detected[6]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[55:48]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[6]),
             .electrical_idle_detected(rx_eidle[6]),
             .idle_data_detected(rcvd_idle_data[6]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[6]),
	     .eie_detected(rcvd_eie[6]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[6]),
             .idle_os_detected(rcvd_idle_os[6]),
             .fts_os_detected(rcvd_fts_os[6]),
             .ts1_detected(rcvd_ts1[6]),
             .ts2_detected(rcvd_ts2[6]),
             .lane_num_detected(rcvd_lane_num[6]),
             .link_num_detected(rcvd_link_num[6]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[6]),
             .gen2_data_rate_detected(rcvd_gen2[6]),
             .autonomous_data_rate_detected(rcvd_autonomous[6]),
             .speed_change_data_rate_detected(rcvd_speed_change[6]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[6]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[6]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[6]),
             .loopback_detected(rcvd_loopback[6]),
             .disable_detected(rcvd_disable[6]),
             .disable_scrambling_detected(rcvd_no_scramble[6]),
	     .skp_added(skp_added[6]),
	     .skp_removed(skp_removed[6]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[6]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[6])  
             );

  // Lane 7

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    7,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE07_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[7] & pclk),
             .symbol_data_plus((int_rx_elecidle[7] & ~rx_valid_in[7]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[63:56]),
             .pci_10b_code_violation_n(rx_10b_code_violation[7]),
             .d_or_k_code(rx_d_or_k_code[7]),

             .pci_10b_data(rx_10b_data[79:70]),
             .parallel_symbol_valid(rx_valid_code[7]),
             .current_rd(rx_current_rd[7]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[7]),
             .fifo_almost_full(deskew_fifo_full[7]),
	     .fifo_empty(deskew_fifo_empty[7]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[7]), // Specific to PIPE interface

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[63:56]),
             .link_number(link_number_rx[63:56]),
	     .lane_0_detected(rx_lane_0_detected[7]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[63:56]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[7]),
             .electrical_idle_detected(rx_eidle[7]),
             .idle_data_detected(rcvd_idle_data[7]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[7]),
	     .eie_detected(rcvd_eie[7]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[7]),
             .idle_os_detected(rcvd_idle_os[7]),
             .fts_os_detected(rcvd_fts_os[7]),
             .ts1_detected(rcvd_ts1[7]),
             .ts2_detected(rcvd_ts2[7]),
             .lane_num_detected(rcvd_lane_num[7]),
             .link_num_detected(rcvd_link_num[7]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[7]),
             .gen2_data_rate_detected(rcvd_gen2[7]),
             .autonomous_data_rate_detected(rcvd_autonomous[7]),
             .speed_change_data_rate_detected(rcvd_speed_change[7]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[7]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[7]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[7]),
             .loopback_detected(rcvd_loopback[7]),
             .disable_detected(rcvd_disable[7]),
             .disable_scrambling_detected(rcvd_no_scramble[7]),
	     .skp_added(skp_added[7]),
	     .skp_removed(skp_removed[7]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[7]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[7])  
             ); 

  // Lane 8

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    8,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE08_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[8] & pclk),
             .symbol_data_plus((int_rx_elecidle[8] & ~rx_valid_in[8]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[71:64]),
             .pci_10b_code_violation_n(rx_10b_code_violation[8]),
             .d_or_k_code(rx_d_or_k_code[8]),

             .pci_10b_data(rx_10b_data[89:80]),
             .parallel_symbol_valid(rx_valid_code[8]),
             .current_rd(rx_current_rd[8]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[8]),
             .fifo_almost_full(deskew_fifo_full[8]),
	     .fifo_empty(deskew_fifo_empty[8]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[8]), // Specific to PIPE interface

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[71:64]),
             .link_number(link_number_rx[71:64]),
             .lane_0_detected(rx_lane_0_detected[8]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[71:64]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[8]),
             .electrical_idle_detected(rx_eidle[8]),
             .idle_data_detected(rcvd_idle_data[8]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[8]),
	     .eie_detected(rcvd_eie[8]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[8]),
             .idle_os_detected(rcvd_idle_os[8]),
             .fts_os_detected(rcvd_fts_os[8]),
             .ts1_detected(rcvd_ts1[8]),
             .ts2_detected(rcvd_ts2[8]),
             .lane_num_detected(rcvd_lane_num[8]),
             .link_num_detected(rcvd_link_num[8]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[8]),
             .gen2_data_rate_detected(rcvd_gen2[8]),
             .autonomous_data_rate_detected(rcvd_autonomous[8]),
             .speed_change_data_rate_detected(rcvd_speed_change[8]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[8]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[8]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[8]),
             .loopback_detected(rcvd_loopback[8]),
             .disable_detected(rcvd_disable[8]),
             .disable_scrambling_detected(rcvd_no_scramble[8]),
	     .skp_added(skp_added[8]),
	     .skp_removed(skp_removed[8]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[8]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[8])  
             );

  // Lane 9

 qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    9,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE09_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[9] & pclk),
             .symbol_data_plus((int_rx_elecidle[9] & ~rx_valid_in[9]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[79:72]),
             .pci_10b_code_violation_n(rx_10b_code_violation[9]),
             .d_or_k_code(rx_d_or_k_code[9]),
 
             .pci_10b_data(rx_10b_data[99:90]),
             .parallel_symbol_valid(rx_valid_code[9]),
             .current_rd(rx_current_rd[9]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[9]),
             .fifo_almost_full(deskew_fifo_full[9]),
	     .fifo_empty(deskew_fifo_empty[9]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
             .rx_valid_in(rx_valid_in[9]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[79:72]),
             .link_number(link_number_rx[79:72]),
             .lane_0_detected(rx_lane_0_detected[9]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[79:72]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[9]),
             .electrical_idle_detected(rx_eidle[9]),
             .idle_data_detected(rcvd_idle_data[9]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[9]),
	     .eie_detected(rcvd_eie[9]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[9]),
             .idle_os_detected(rcvd_idle_os[9]),
             .fts_os_detected(rcvd_fts_os[9]),
             .ts1_detected(rcvd_ts1[9]),
             .ts2_detected(rcvd_ts2[9]),
             .lane_num_detected(rcvd_lane_num[9]),
             .link_num_detected(rcvd_link_num[9]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[9]),
             .gen2_data_rate_detected(rcvd_gen2[9]),
             .autonomous_data_rate_detected(rcvd_autonomous[9]),
             .speed_change_data_rate_detected(rcvd_speed_change[9]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[9]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[9]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[9]),
             .loopback_detected(rcvd_loopback[9]),
             .disable_detected(rcvd_disable[9]),
             .disable_scrambling_detected(rcvd_no_scramble[9]),
	     .skp_added(skp_added[9]),
	     .skp_removed(skp_removed[9]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[9]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[9])  
             );

  // Lane 10
 
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    10,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE10_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[10] & pclk),
             .symbol_data_plus((int_rx_elecidle[10] & ~rx_valid_in[10]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[87:80]),
             .pci_10b_code_violation_n(rx_10b_code_violation[10]),
             .d_or_k_code(rx_d_or_k_code[10]),
 
             .pci_10b_data(rx_10b_data[109:100]),
             .parallel_symbol_valid(rx_valid_code[10]),
             .current_rd(rx_current_rd[10]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[10]),
             .fifo_almost_full(deskew_fifo_full[10]),
	     .fifo_empty(deskew_fifo_empty[10]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[10]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[87:80]),
             .link_number(link_number_rx[87:80]),
             .lane_0_detected(rx_lane_0_detected[10]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[87:80]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[10]),
             .electrical_idle_detected(rx_eidle[10]),
             .idle_data_detected(rcvd_idle_data[10]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[10]),
	     .eie_detected(rcvd_eie[10]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[10]),
             .idle_os_detected(rcvd_idle_os[10]),
             .fts_os_detected(rcvd_fts_os[10]),
             .ts1_detected(rcvd_ts1[10]),
             .ts2_detected(rcvd_ts2[10]),
             .lane_num_detected(rcvd_lane_num[10]),
             .link_num_detected(rcvd_link_num[10]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[10]),
             .gen2_data_rate_detected(rcvd_gen2[10]),
             .autonomous_data_rate_detected(rcvd_autonomous[10]),
             .speed_change_data_rate_detected(rcvd_speed_change[10]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[10]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[10]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[10]),
             .loopback_detected(rcvd_loopback[10]),
             .disable_detected(rcvd_disable[10]),
             .disable_scrambling_detected(rcvd_no_scramble[10]),
	     .skp_added(skp_added[10]),
	     .skp_removed(skp_removed[10]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[10]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[10])  
             );

  // Lane 11
 
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    11,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE11_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[11] & pclk),
             .symbol_data_plus((int_rx_elecidle[11] & ~rx_valid_in[11]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[95:88]),
             .pci_10b_code_violation_n(rx_10b_code_violation[11]),
             .d_or_k_code(rx_d_or_k_code[11]),
 
             .pci_10b_data(rx_10b_data[119:110]),
             .parallel_symbol_valid(rx_valid_code[11]),
             .current_rd(rx_current_rd[11]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[11]),
             .fifo_almost_full(deskew_fifo_full[11]),
	     .fifo_empty(deskew_fifo_empty[11]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[11]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[95:88]),
             .link_number(link_number_rx[95:88]),
             .lane_0_detected(rx_lane_0_detected[11]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[95:88]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[11]),
             .electrical_idle_detected(rx_eidle[11]),
             .idle_data_detected(rcvd_idle_data[11]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[11]),
	     .eie_detected(rcvd_eie[11]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[11]),
             .idle_os_detected(rcvd_idle_os[11]),
             .fts_os_detected(rcvd_fts_os[11]),
             .ts1_detected(rcvd_ts1[11]),
             .ts2_detected(rcvd_ts2[11]),
             .lane_num_detected(rcvd_lane_num[11]),
             .link_num_detected(rcvd_link_num[11]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[11]),
             .gen2_data_rate_detected(rcvd_gen2[11]),
             .autonomous_data_rate_detected(rcvd_autonomous[11]),
             .speed_change_data_rate_detected(rcvd_speed_change[11]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[11]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[11]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[11]),
             .loopback_detected(rcvd_loopback[11]),
             .disable_detected(rcvd_disable[11]),
             .disable_scrambling_detected(rcvd_no_scramble[11]),
	     .skp_added(skp_added[11]),
	     .skp_removed(skp_removed[11]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[11]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[11])  
             );  

  // Lane 12

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    12,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE12_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[12] & pclk),
             .symbol_data_plus((int_rx_elecidle[12] & ~rx_valid_in[12]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[103:96]),
             .pci_10b_code_violation_n(rx_10b_code_violation[12]),
             .d_or_k_code(rx_d_or_k_code[12]),

             .pci_10b_data(rx_10b_data[129:120]),
             .parallel_symbol_valid(rx_valid_code[12]),
             .current_rd(rx_current_rd[12]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[12]),
             .fifo_almost_full(deskew_fifo_full[12]),
	     .fifo_empty(deskew_fifo_empty[12]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[12]), // Specific to PIPE interface

             .descramble_enable(!disable_descramble),       
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[103:96]),
             .link_number(link_number_rx[103:96]),
             .lane_0_detected(rx_lane_0_detected[12]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[103:96]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[12]),
             .electrical_idle_detected(rx_eidle[12]),
             .idle_data_detected(rcvd_idle_data[12]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[12]),
	     .eie_detected(rcvd_eie[12]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[12]),
             .idle_os_detected(rcvd_idle_os[12]),
             .fts_os_detected(rcvd_fts_os[12]),
             .ts1_detected(rcvd_ts1[12]),
             .ts2_detected(rcvd_ts2[12]),
             .lane_num_detected(rcvd_lane_num[12]),
             .link_num_detected(rcvd_link_num[12]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[12]),
             .gen2_data_rate_detected(rcvd_gen2[12]),
             .autonomous_data_rate_detected(rcvd_autonomous[12]),
             .speed_change_data_rate_detected(rcvd_speed_change[12]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[12]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[12]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[12]),
             .loopback_detected(rcvd_loopback[12]),
             .disable_detected(rcvd_disable[12]),
             .disable_scrambling_detected(rcvd_no_scramble[12]),
	     .skp_added(skp_added[12]),
	     .skp_removed(skp_removed[12]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[12]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[12])  
             );
 
  // Lane 13

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    13,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE13_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[13] & pclk),
             .symbol_data_plus((int_rx_elecidle[13] & ~rx_valid_in[13]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[111:104]),
             .pci_10b_code_violation_n(rx_10b_code_violation[13]),
             .d_or_k_code(rx_d_or_k_code[13]),

             .pci_10b_data(rx_10b_data[139:130]),
             .parallel_symbol_valid(rx_valid_code[13]),    
             .current_rd(rx_current_rd[13]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[13]),
             .fifo_almost_full(deskew_fifo_full[13]),
	     .fifo_empty(deskew_fifo_empty[13]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[13]), // Specific to PIPE interface

             .descramble_enable(!disable_descramble),       
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[111:104]),
             .link_number(link_number_rx[111:104]),
             .lane_0_detected(rx_lane_0_detected[13]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[111:104]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[13]),
             .electrical_idle_detected(rx_eidle[13]),   
             .idle_data_detected(rcvd_idle_data[13]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[13]),
	     .eie_detected(rcvd_eie[13]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[13]),
             .idle_os_detected(rcvd_idle_os[13]),
             .fts_os_detected(rcvd_fts_os[13]), 
             .ts1_detected(rcvd_ts1[13]),
             .ts2_detected(rcvd_ts2[13]),
             .lane_num_detected(rcvd_lane_num[13]),
             .link_num_detected(rcvd_link_num[13]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[13]),
             .gen2_data_rate_detected(rcvd_gen2[13]),
             .autonomous_data_rate_detected(rcvd_autonomous[13]),
             .speed_change_data_rate_detected(rcvd_speed_change[13]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[13]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[13]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[13]),
             .loopback_detected(rcvd_loopback[13]),   
             .disable_detected(rcvd_disable[13]), 
             .disable_scrambling_detected(rcvd_no_scramble[13]),
	     .skp_added(skp_added[13]),
	     .skp_removed(skp_removed[13]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[13]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[13])  
             );

  // Lane 14

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    14,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE14_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[14] & pclk),
             .symbol_data_plus((int_rx_elecidle[14] & ~rx_valid_in[14]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[119:112]),
             .pci_10b_code_violation_n(rx_10b_code_violation[14]),
             .d_or_k_code(rx_d_or_k_code[14]),

             .pci_10b_data(rx_10b_data[149:140]),
             .parallel_symbol_valid(rx_valid_code[14]),    
             .current_rd(rx_current_rd[14]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[14]),
             .fifo_almost_full(deskew_fifo_full[14]),
	     .fifo_empty(deskew_fifo_empty[14]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[14]), // Specific to PIPE interface

             .descramble_enable(!disable_descramble),       
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[119:112]),
             .link_number(link_number_rx[119:112]),
             .lane_0_detected(rx_lane_0_detected[14]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[119:112]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[14]),
             .electrical_idle_detected(rx_eidle[14]),   
             .idle_data_detected(rcvd_idle_data[14]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[14]),
	     .eie_detected(rcvd_eie[14]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[14]),
             .idle_os_detected(rcvd_idle_os[14]),
             .fts_os_detected(rcvd_fts_os[14]), 
             .ts1_detected(rcvd_ts1[14]),
             .ts2_detected(rcvd_ts2[14]),
             .lane_num_detected(rcvd_lane_num[14]),
             .link_num_detected(rcvd_link_num[14]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[14]),
             .gen2_data_rate_detected(rcvd_gen2[14]),
             .autonomous_data_rate_detected(rcvd_autonomous[14]),
             .speed_change_data_rate_detected(rcvd_speed_change[14]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[14]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[14]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[14]),
             .loopback_detected(rcvd_loopback[14]),   
             .disable_detected(rcvd_disable[14]), 
             .disable_scrambling_detected(rcvd_no_scramble[14]),
	     .skp_added(skp_added[14]),
	     .skp_removed(skp_removed[14]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[14]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[14])  
             );

  // Lane 15

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    15,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE15_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[15] & pclk),
             .symbol_data_plus((int_rx_elecidle[15] & ~rx_valid_in[15]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[127:120]),
             .pci_10b_code_violation_n(rx_10b_code_violation[15]),
             .d_or_k_code(rx_d_or_k_code[15]),

             .pci_10b_data(rx_10b_data[159:150]),
             .parallel_symbol_valid(rx_valid_code[15]),    
             .current_rd(rx_current_rd[15]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[15]),
             .fifo_almost_full(deskew_fifo_full[15]),
	     .fifo_empty(deskew_fifo_empty[15]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[15]), // Specific to PIPE interface

             .descramble_enable(!disable_descramble),       
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[127:120]),
             .link_number(link_number_rx[127:120]),
             .lane_0_detected(rx_lane_0_detected[15]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[127:120]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[15]),
             .electrical_idle_detected(rx_eidle[15]),   
             .idle_data_detected(rcvd_idle_data[15]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[15]),
	     .eie_detected(rcvd_eie[15]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[15]),
             .idle_os_detected(rcvd_idle_os[15]),
             .fts_os_detected(rcvd_fts_os[15]), 
             .ts1_detected(rcvd_ts1[15]),
             .ts2_detected(rcvd_ts2[15]),
             .lane_num_detected(rcvd_lane_num[15]),
             .link_num_detected(rcvd_link_num[15]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[15]),
             .gen2_data_rate_detected(rcvd_gen2[15]),
             .autonomous_data_rate_detected(rcvd_autonomous[15]),
             .speed_change_data_rate_detected(rcvd_speed_change[15]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[15]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[15]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[15]),
             .loopback_detected(rcvd_loopback[15]),   
             .disable_detected(rcvd_disable[15]), 
             .disable_scrambling_detected(rcvd_no_scramble[15]),
	     .skp_added(skp_added[15]),
	     .skp_removed(skp_removed[15]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[15]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[15])  
             );

  // Lane 16

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    16,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE16_RX (
             .reset(reset),
             .areset(areset),

             .clk(rx_clk_gate_lane[16] & pclk),
             .symbol_data_plus((int_rx_elecidle[16] & ~rx_valid_in[16]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),

             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),

             .pci_8b_data(rx_8b_decoded_data[135:128]),
             .pci_10b_code_violation_n(rx_10b_code_violation[16]),
             .d_or_k_code(rx_d_or_k_code[16]),
 
             .pci_10b_data(rx_10b_data[169:160]),
             .parallel_symbol_valid(rx_valid_code[16]),
             .current_rd(rx_current_rd[16]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[16]),
             .fifo_almost_full(deskew_fifo_full[16]),
	     .fifo_empty(deskew_fifo_empty[16]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[16]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[135:128]),
             .link_number(link_number_rx[135:128]),
             .lane_0_detected(rx_lane_0_detected[16]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[135:128]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[16]),
             .electrical_idle_detected(rx_eidle[16]),
             .idle_data_detected(rcvd_idle_data[16]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[16]),
	     .eie_detected(rcvd_eie[16]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[16]),
             .idle_os_detected(rcvd_idle_os[16]),
             .fts_os_detected(rcvd_fts_os[16]),
             .ts1_detected(rcvd_ts1[16]),
             .ts2_detected(rcvd_ts2[16]),
             .lane_num_detected(rcvd_lane_num[16]),
             .link_num_detected(rcvd_link_num[16]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[16]),
             .gen2_data_rate_detected(rcvd_gen2[16]),
             .autonomous_data_rate_detected(rcvd_autonomous[16]),
             .speed_change_data_rate_detected(rcvd_speed_change[16]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[16]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[16]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[16]),
             .loopback_detected(rcvd_loopback[16]),
             .disable_detected(rcvd_disable[16]),
             .disable_scrambling_detected(rcvd_no_scramble[16]),
	     .skp_added(skp_added[16]),
	     .skp_removed(skp_removed[16]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[16]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[16])  
             );

  // Lane 17

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    17,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE17_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[17] & pclk),
             .symbol_data_plus((int_rx_elecidle[17] & ~rx_valid_in[17]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[143:136]),
             .pci_10b_code_violation_n(rx_10b_code_violation[17]),
             .d_or_k_code(rx_d_or_k_code[17]),
 
             .pci_10b_data(rx_10b_data[179:170]),
             .parallel_symbol_valid(rx_valid_code[17]),
             .current_rd(rx_current_rd[17]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[17]),
             .fifo_almost_full(deskew_fifo_full[17]),
	     .fifo_empty(deskew_fifo_empty[17]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[17]), // Specific to PIPE interface

 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[143:136]),
             .link_number(link_number_rx[143:136]),
             .lane_0_detected(rx_lane_0_detected[17]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[143:136]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[17]),
             .electrical_idle_detected(rx_eidle[17]),
             .idle_data_detected(rcvd_idle_data[17]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[17]),
	     .eie_detected(rcvd_eie[17]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[17]),
             .idle_os_detected(rcvd_idle_os[17]),
             .fts_os_detected(rcvd_fts_os[17]),
             .ts1_detected(rcvd_ts1[17]),
             .ts2_detected(rcvd_ts2[17]),
             .lane_num_detected(rcvd_lane_num[17]),
             .link_num_detected(rcvd_link_num[17]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[17]),
             .gen2_data_rate_detected(rcvd_gen2[17]),
             .autonomous_data_rate_detected(rcvd_autonomous[17]),
             .speed_change_data_rate_detected(rcvd_speed_change[17]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[17]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[17]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[17]),
             .loopback_detected(rcvd_loopback[17]),
             .disable_detected(rcvd_disable[17]),
             .disable_scrambling_detected(rcvd_no_scramble[17]),
	     .skp_added(skp_added[17]),
	     .skp_removed(skp_removed[17]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[17]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[17])  
             );

  // Lane 18
 
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    18,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE18_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[18] & pclk),
             .symbol_data_plus((int_rx_elecidle[18] & ~rx_valid_in[18]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[151:144]),
             .pci_10b_code_violation_n(rx_10b_code_violation[18]),
             .d_or_k_code(rx_d_or_k_code[18]),
              
             .pci_10b_data(rx_10b_data[189:180]),
             .parallel_symbol_valid(rx_valid_code[18]),
             .current_rd(rx_current_rd[18]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[18]),
             .fifo_almost_full(deskew_fifo_full[18]),
	     .fifo_empty(deskew_fifo_empty[18]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[18]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[151:144]),
             .link_number(link_number_rx[151:144]),
             .lane_0_detected(rx_lane_0_detected[18]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[151:144]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[18]),
             .electrical_idle_detected(rx_eidle[18]),
             .idle_data_detected(rcvd_idle_data[18]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[18]),
	     .eie_detected(rcvd_eie[18]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[18]),
             .idle_os_detected(rcvd_idle_os[18]),
             .fts_os_detected(rcvd_fts_os[18]),
             .ts1_detected(rcvd_ts1[18]),
             .ts2_detected(rcvd_ts2[18]),
             .lane_num_detected(rcvd_lane_num[18]),
             .link_num_detected(rcvd_link_num[18]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[18]),
             .gen2_data_rate_detected(rcvd_gen2[18]),
             .autonomous_data_rate_detected(rcvd_autonomous[18]),
             .speed_change_data_rate_detected(rcvd_speed_change[18]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[18]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[18]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[18]),
             .loopback_detected(rcvd_loopback[18]),
             .disable_detected(rcvd_disable[18]),
             .disable_scrambling_detected(rcvd_no_scramble[18]),
	     .skp_added(skp_added[18]),
	     .skp_removed(skp_removed[18]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[18]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[18])  
             );

  // Lane 19

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    19,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE19_RX (
             .reset(reset),
             .areset(areset),
              
             .clk(rx_clk_gate_lane[19] & pclk),
             .symbol_data_plus((int_rx_elecidle[19] & ~rx_valid_in[19]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[159:152]),
             .pci_10b_code_violation_n(rx_10b_code_violation[19]),
             .d_or_k_code(rx_d_or_k_code[19]),
 
             .pci_10b_data(rx_10b_data[199:190]),
             .parallel_symbol_valid(rx_valid_code[19]),
             .current_rd(rx_current_rd[19]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[19]),
             .fifo_almost_full(deskew_fifo_full[19]),
	     .fifo_empty(deskew_fifo_empty[19]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[19]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[159:152]),
             .link_number(link_number_rx[159:152]),
             .lane_0_detected(rx_lane_0_detected[19]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[159:152]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[19]),
             .electrical_idle_detected(rx_eidle[19]),
             .idle_data_detected(rcvd_idle_data[19]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[19]),
	     .eie_detected(rcvd_eie[19]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[19]),
             .idle_os_detected(rcvd_idle_os[19]),
             .fts_os_detected(rcvd_fts_os[19]),
             .ts1_detected(rcvd_ts1[19]),
             .ts2_detected(rcvd_ts2[19]),
             .lane_num_detected(rcvd_lane_num[19]),
             .link_num_detected(rcvd_link_num[19]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[19]),
             .gen2_data_rate_detected(rcvd_gen2[19]),
             .autonomous_data_rate_detected(rcvd_autonomous[19]),
             .speed_change_data_rate_detected(rcvd_speed_change[19]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[19]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[19]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[19]),
             .loopback_detected(rcvd_loopback[19]),
             .disable_detected(rcvd_disable[19]),
             .disable_scrambling_detected(rcvd_no_scramble[19]),
	     .skp_added(skp_added[19]),
	     .skp_removed(skp_removed[19]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[19]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[19])  
             );

  // Lane 20
              
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    20,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE20_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[20] & pclk),
             .symbol_data_plus((int_rx_elecidle[20] & ~rx_valid_in[20]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[167:160]),
             .pci_10b_code_violation_n(rx_10b_code_violation[20]),
             .d_or_k_code(rx_d_or_k_code[20]),
 
             .pci_10b_data(rx_10b_data[209:200]),
             .parallel_symbol_valid(rx_valid_code[20]),
             .current_rd(rx_current_rd[20]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[20]),
             .fifo_almost_full(deskew_fifo_full[20]),
	     .fifo_empty(deskew_fifo_empty[20]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[20]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[167:160]),
             .link_number(link_number_rx[167:160]),
             .lane_0_detected(rx_lane_0_detected[20]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[167:160]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[20]),
             .electrical_idle_detected(rx_eidle[20]),
             .idle_data_detected(rcvd_idle_data[20]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[20]),
	     .eie_detected(rcvd_eie[20]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[20]),
             .idle_os_detected(rcvd_idle_os[20]),
             .fts_os_detected(rcvd_fts_os[20]),
             .ts1_detected(rcvd_ts1[20]),
             .ts2_detected(rcvd_ts2[20]),
             .lane_num_detected(rcvd_lane_num[20]),
             .link_num_detected(rcvd_link_num[20]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[20]),
             .gen2_data_rate_detected(rcvd_gen2[20]),
             .autonomous_data_rate_detected(rcvd_autonomous[20]),
             .speed_change_data_rate_detected(rcvd_speed_change[20]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[20]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[20]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[20]),
             .loopback_detected(rcvd_loopback[20]),
             .disable_detected(rcvd_disable[20]),
             .disable_scrambling_detected(rcvd_no_scramble[20]),
	     .skp_added(skp_added[20]),
	     .skp_removed(skp_removed[20]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[20]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[20])  
             );

  // Lane 21

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    21,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE21_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[21] & pclk),
             .symbol_data_plus((int_rx_elecidle[21] & ~rx_valid_in[21]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[175:168]),
             .pci_10b_code_violation_n(rx_10b_code_violation[21]),
             .d_or_k_code(rx_d_or_k_code[21]),
 
             .pci_10b_data(rx_10b_data[219:210]),
             .parallel_symbol_valid(rx_valid_code[21]),
             .current_rd(rx_current_rd[21]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[21]),
             .fifo_almost_full(deskew_fifo_full[21]),
	     .fifo_empty(deskew_fifo_empty[21]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[21]), // Specific to PIPE interface

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[175:168]),
             .link_number(link_number_rx[175:168]),
             .lane_0_detected(rx_lane_0_detected[21]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[175:168]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[21]),
             .electrical_idle_detected(rx_eidle[21]),
             .idle_data_detected(rcvd_idle_data[21]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[21]),
	     .eie_detected(rcvd_eie[21]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[21]),
             .idle_os_detected(rcvd_idle_os[21]),
             .fts_os_detected(rcvd_fts_os[21]),
             .ts1_detected(rcvd_ts1[21]),
             .ts2_detected(rcvd_ts2[21]),
             .lane_num_detected(rcvd_lane_num[21]),
             .link_num_detected(rcvd_link_num[21]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[21]),
             .gen2_data_rate_detected(rcvd_gen2[21]),
             .autonomous_data_rate_detected(rcvd_autonomous[21]),
             .speed_change_data_rate_detected(rcvd_speed_change[21]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[21]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[21]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[21]),
             .loopback_detected(rcvd_loopback[21]),
             .disable_detected(rcvd_disable[21]),
             .disable_scrambling_detected(rcvd_no_scramble[21]),
	     .skp_added(skp_added[21]),
	     .skp_removed(skp_removed[21]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[21]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[21])  
             );

  // Lane 22
 
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    22,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE22_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[22] & pclk),
             .symbol_data_plus((int_rx_elecidle[22] & ~rx_valid_in[22]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[183:176]),
             .pci_10b_code_violation_n(rx_10b_code_violation[22]),
             .d_or_k_code(rx_d_or_k_code[22]),
     
             .pci_10b_data(rx_10b_data[229:220]),
             .parallel_symbol_valid(rx_valid_code[22]),
             .current_rd(rx_current_rd[22]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[22]),
             .fifo_almost_full(deskew_fifo_full[22]),
	     .fifo_empty(deskew_fifo_empty[22]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[22]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[183:176]),
             .link_number(link_number_rx[183:176]),
             .lane_0_detected(rx_lane_0_detected[22]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[183:176]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[22]),
             .electrical_idle_detected(rx_eidle[22]),
             .idle_data_detected(rcvd_idle_data[22]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[22]),
	     .eie_detected(rcvd_eie[22]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[22]),
             .idle_os_detected(rcvd_idle_os[22]),
             .fts_os_detected(rcvd_fts_os[22]),
             .ts1_detected(rcvd_ts1[22]),
             .ts2_detected(rcvd_ts2[22]),
             .lane_num_detected(rcvd_lane_num[22]),
             .link_num_detected(rcvd_link_num[22]),
             .link_ctrl_reset_detected(rcvd_reset[22]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[22]),
             .gen2_data_rate_detected(rcvd_gen2[22]),
             .autonomous_data_rate_detected(rcvd_autonomous[22]),
             .speed_change_data_rate_detected(rcvd_speed_change[22]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[22]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[22]),
  // PCI_EXPRESS_GEN2 code end	       
             .loopback_detected(rcvd_loopback[22]),
             .disable_detected(rcvd_disable[22]),
             .disable_scrambling_detected(rcvd_no_scramble[22]),
	     .skp_added(skp_added[22]),
	     .skp_removed(skp_removed[22]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[22]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[22])  
             );

  // Lane 23
 
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    23,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE23_RX (
             .reset(reset),
             .areset(areset),
              
             .clk(rx_clk_gate_lane[23] & pclk),
             .symbol_data_plus((int_rx_elecidle[23] & ~rx_valid_in[23]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[191:184]),
             .pci_10b_code_violation_n(rx_10b_code_violation[23]),
             .d_or_k_code(rx_d_or_k_code[23]),
 
             .pci_10b_data(rx_10b_data[239:230]),
             .parallel_symbol_valid(rx_valid_code[23]),
             .current_rd(rx_current_rd[23]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[23]),
             .fifo_almost_full(deskew_fifo_full[23]),
	     .fifo_empty(deskew_fifo_empty[23]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[23]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[191:184]),
             .link_number(link_number_rx[191:184]),
             .lane_0_detected(rx_lane_0_detected[23]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[191:184]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[23]),
             .electrical_idle_detected(rx_eidle[23]),
             .idle_data_detected(rcvd_idle_data[23]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[23]),
	     .eie_detected(rcvd_eie[23]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[23]),
             .idle_os_detected(rcvd_idle_os[23]),
             .fts_os_detected(rcvd_fts_os[23]),
             .ts1_detected(rcvd_ts1[23]),
             .ts2_detected(rcvd_ts2[23]),
             .lane_num_detected(rcvd_lane_num[23]),
             .link_num_detected(rcvd_link_num[23]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[23]),
             .gen2_data_rate_detected(rcvd_gen2[23]),
             .autonomous_data_rate_detected(rcvd_autonomous[23]),
             .speed_change_data_rate_detected(rcvd_speed_change[23]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[23]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[23]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[23]),
             .loopback_detected(rcvd_loopback[23]),
             .disable_detected(rcvd_disable[23]),
             .disable_scrambling_detected(rcvd_no_scramble[23]),
	     .skp_added(skp_added[23]),
	     .skp_removed(skp_removed[23]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[23]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[23])  
             );

  // Lane 24
 
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    24,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE24_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[24] & pclk),
             .symbol_data_plus((int_rx_elecidle[24] & ~rx_valid_in[24]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[199:192]),
             .pci_10b_code_violation_n(rx_10b_code_violation[24]),
             .d_or_k_code(rx_d_or_k_code[24]),
 
             .pci_10b_data(rx_10b_data[249:240]),
             .parallel_symbol_valid(rx_valid_code[24]),
             .current_rd(rx_current_rd[24]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[24]),
             .fifo_almost_full(deskew_fifo_full[24]),
	     .fifo_empty(deskew_fifo_empty[24]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[24]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[199:192]),
             .link_number(link_number_rx[199:192]),
             .lane_0_detected(rx_lane_0_detected[24]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[199:192]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[24]),
             .electrical_idle_detected(rx_eidle[24]),
             .idle_data_detected(rcvd_idle_data[24]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[24]),
	     .eie_detected(rcvd_eie[24]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[24]),
             .idle_os_detected(rcvd_idle_os[24]),
             .fts_os_detected(rcvd_fts_os[24]),
             .ts1_detected(rcvd_ts1[24]),
             .ts2_detected(rcvd_ts2[24]),
             .lane_num_detected(rcvd_lane_num[24]),
             .link_num_detected(rcvd_link_num[24]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[24]),
             .gen2_data_rate_detected(rcvd_gen2[24]),
             .autonomous_data_rate_detected(rcvd_autonomous[24]),
             .speed_change_data_rate_detected(rcvd_speed_change[24]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[24]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[24]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[24]),
             .loopback_detected(rcvd_loopback[24]),
             .disable_detected(rcvd_disable[24]),
             .disable_scrambling_detected(rcvd_no_scramble[24]),
	     .skp_added(skp_added[24]),
	     .skp_removed(skp_removed[24]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[24]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[24])  
             );

  // Lane 25
 
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    25,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE25_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[25] & pclk),
             .symbol_data_plus((int_rx_elecidle[25] & ~rx_valid_in[25]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[207:200]),
             .pci_10b_code_violation_n(rx_10b_code_violation[25]),
             .d_or_k_code(rx_d_or_k_code[25]),
 
             .pci_10b_data(rx_10b_data[259:250]),
             .parallel_symbol_valid(rx_valid_code[25]),
             .current_rd(rx_current_rd[25]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[25]),
             .fifo_almost_full(deskew_fifo_full[25]),
	     .fifo_empty(deskew_fifo_empty[25]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[25]), // Specific to PIPE interface

             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[207:200]),
             .link_number(link_number_rx[207:200]),
             .lane_0_detected(rx_lane_0_detected[25]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[207:200]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[25]),
             .electrical_idle_detected(rx_eidle[25]),
             .idle_data_detected(rcvd_idle_data[25]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[25]),
	     .eie_detected(rcvd_eie[25]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[25]),
             .idle_os_detected(rcvd_idle_os[25]),
             .fts_os_detected(rcvd_fts_os[25]),
             .ts1_detected(rcvd_ts1[25]),
             .ts2_detected(rcvd_ts2[25]),
             .lane_num_detected(rcvd_lane_num[25]),
             .link_num_detected(rcvd_link_num[25]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[25]),
             .gen2_data_rate_detected(rcvd_gen2[25]),
             .autonomous_data_rate_detected(rcvd_autonomous[25]),
             .speed_change_data_rate_detected(rcvd_speed_change[25]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[25]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[25]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[25]),
             .loopback_detected(rcvd_loopback[25]),
             .disable_detected(rcvd_disable[25]),
             .disable_scrambling_detected(rcvd_no_scramble[25]),
	     .skp_added(skp_added[25]),
	     .skp_removed(skp_removed[25]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[25]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[25])  
             );

  // Lane 26
 
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    26,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE26_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[26] & pclk),
             .symbol_data_plus((int_rx_elecidle[26] & ~rx_valid_in[26]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[215:208]),
             .pci_10b_code_violation_n(rx_10b_code_violation[26]),
             .d_or_k_code(rx_d_or_k_code[26]),
 
             .pci_10b_data(rx_10b_data[269:260]),
             .parallel_symbol_valid(rx_valid_code[26]),
             .current_rd(rx_current_rd[26]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[26]),
             .fifo_almost_full(deskew_fifo_full[26]),
	     .fifo_empty(deskew_fifo_empty[26]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[26]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[215:208]),
             .link_number(link_number_rx[215:208]),
             .lane_0_detected(rx_lane_0_detected[26]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[215:208]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[26]),
             .electrical_idle_detected(rx_eidle[26]),
             .idle_data_detected(rcvd_idle_data[26]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[26]),
	     .eie_detected(rcvd_eie[26]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[26]),
             .idle_os_detected(rcvd_idle_os[26]),
             .fts_os_detected(rcvd_fts_os[26]),
             .ts1_detected(rcvd_ts1[26]),
             .ts2_detected(rcvd_ts2[26]),
             .lane_num_detected(rcvd_lane_num[26]),
             .link_num_detected(rcvd_link_num[26]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[26]),
             .gen2_data_rate_detected(rcvd_gen2[26]),
             .autonomous_data_rate_detected(rcvd_autonomous[26]),
             .speed_change_data_rate_detected(rcvd_speed_change[26]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[26]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[26]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[26]),
             .loopback_detected(rcvd_loopback[26]),
             .disable_detected(rcvd_disable[26]),
             .disable_scrambling_detected(rcvd_no_scramble[26]),
	     .skp_added(skp_added[26]),
	     .skp_removed(skp_removed[26]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[26]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[26])  
             );

  // Lane 27

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    27,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE27_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[27] & pclk),
             .symbol_data_plus((int_rx_elecidle[27] & ~rx_valid_in[27]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[223:216]),
             .pci_10b_code_violation_n(rx_10b_code_violation[27]),
             .d_or_k_code(rx_d_or_k_code[27]),
 
             .pci_10b_data(rx_10b_data[279:270]),
             .parallel_symbol_valid(rx_valid_code[27]),
             .current_rd(rx_current_rd[27]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[27]),
             .fifo_almost_full(deskew_fifo_full[27]),
	     .fifo_empty(deskew_fifo_empty[27]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[27]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[223:216]),
             .link_number(link_number_rx[223:216]),
             .lane_0_detected(rx_lane_0_detected[27]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[223:216]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[27]),
             .electrical_idle_detected(rx_eidle[27]),
             .idle_data_detected(rcvd_idle_data[27]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[27]),
	     .eie_detected(rcvd_eie[27]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[27]),
             .idle_os_detected(rcvd_idle_os[27]),
             .fts_os_detected(rcvd_fts_os[27]),
             .ts1_detected(rcvd_ts1[27]),
             .ts2_detected(rcvd_ts2[27]),
             .lane_num_detected(rcvd_lane_num[27]),
             .link_num_detected(rcvd_link_num[27]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[27]),
             .gen2_data_rate_detected(rcvd_gen2[27]),
             .autonomous_data_rate_detected(rcvd_autonomous[27]),
             .speed_change_data_rate_detected(rcvd_speed_change[27]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[27]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[27]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[27]),
             .loopback_detected(rcvd_loopback[27]),
             .disable_detected(rcvd_disable[27]),
             .disable_scrambling_detected(rcvd_no_scramble[27]),
	     .skp_added(skp_added[27]),
	     .skp_removed(skp_removed[27]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[27]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[27])  
             );

  // Lane 28
 
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    28,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE28_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[28] & pclk),
             .symbol_data_plus((int_rx_elecidle[28] & ~rx_valid_in[28]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[231:224]),
             .pci_10b_code_violation_n(rx_10b_code_violation[28]),
             .d_or_k_code(rx_d_or_k_code[28]),
 
             .pci_10b_data(rx_10b_data[289:280]),
             .parallel_symbol_valid(rx_valid_code[28]),
             .current_rd(rx_current_rd[28]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[28]),
             .fifo_almost_full(deskew_fifo_full[28]),
	     .fifo_empty(deskew_fifo_empty[28]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[28]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
             .link_number(link_number_rx[231:224]),
	     .n_fts(rx_n_fts[231:224]),
             .lane_0_detected(rx_lane_0_detected[28]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[231:224]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[28]),
             .electrical_idle_detected(rx_eidle[28]),
             .idle_data_detected(rcvd_idle_data[28]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[28]),
	     .eie_detected(rcvd_eie[28]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[28]),
             .idle_os_detected(rcvd_idle_os[28]),
             .fts_os_detected(rcvd_fts_os[28]),
             .ts1_detected(rcvd_ts1[28]),
             .ts2_detected(rcvd_ts2[28]),
             .lane_num_detected(rcvd_lane_num[28]),
             .link_num_detected(rcvd_link_num[28]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[28]),
             .gen2_data_rate_detected(rcvd_gen2[28]),
             .autonomous_data_rate_detected(rcvd_autonomous[28]),
             .speed_change_data_rate_detected(rcvd_speed_change[28]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[28]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[28]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[28]),
             .loopback_detected(rcvd_loopback[28]),
             .disable_detected(rcvd_disable[28]),
             .disable_scrambling_detected(rcvd_no_scramble[28]),
	     .skp_added(skp_added[28]),
	     .skp_removed(skp_removed[28]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[28]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[28])  
             );
  // Lane 29
 
  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    29,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE29_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[29] & pclk),
             .symbol_data_plus((int_rx_elecidle[29] & ~rx_valid_in[29]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[239:232]),
             .pci_10b_code_violation_n(rx_10b_code_violation[29]),
             .d_or_k_code(rx_d_or_k_code[29]),
 
             .pci_10b_data(rx_10b_data[299:290]),
             .parallel_symbol_valid(rx_valid_code[29]),
             .current_rd(rx_current_rd[29]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[29]),
             .fifo_almost_full(deskew_fifo_full[29]),
	     .fifo_empty(deskew_fifo_empty[29]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[29]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[239:232]),
             .link_number(link_number_rx[239:232]),
             .lane_0_detected(rx_lane_0_detected[29]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[239:232]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[29]),
             .electrical_idle_detected(rx_eidle[29]),
             .idle_data_detected(rcvd_idle_data[29]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[29]),
	     .eie_detected(rcvd_eie[29]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[29]),
             .idle_os_detected(rcvd_idle_os[29]),
             .fts_os_detected(rcvd_fts_os[29]),
             .ts1_detected(rcvd_ts1[29]),
             .ts2_detected(rcvd_ts2[29]),
             .lane_num_detected(rcvd_lane_num[29]),
             .link_num_detected(rcvd_link_num[29]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[29]),
             .gen2_data_rate_detected(rcvd_gen2[29]),
             .autonomous_data_rate_detected(rcvd_autonomous[29]),
             .speed_change_data_rate_detected(rcvd_speed_change[29]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[29]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[29]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[29]),
             .loopback_detected(rcvd_loopback[29]),
             .disable_detected(rcvd_disable[29]),
             .disable_scrambling_detected(rcvd_no_scramble[29]),
	     .skp_added(skp_added[29]),
	     .skp_removed(skp_removed[29]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[29]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[29])  
             );

  // Lane 30

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    30,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE30_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[30] & pclk),
             .symbol_data_plus((int_rx_elecidle[30] & ~rx_valid_in[30]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[247:240]),
             .pci_10b_code_violation_n(rx_10b_code_violation[30]),
             .d_or_k_code(rx_d_or_k_code[30]),
 
             .pci_10b_data(rx_10b_data[309:300]),
             .parallel_symbol_valid(rx_valid_code[30]),
             .current_rd(rx_current_rd[30]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[30]),
             .fifo_almost_full(deskew_fifo_full[30]),
	     .fifo_empty(deskew_fifo_empty[30]),
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[30]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[247:240]),
             .link_number(link_number_rx[247:240]),
             .lane_0_detected(rx_lane_0_detected[30]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[247:240]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[30]),
             .electrical_idle_detected(rx_eidle[30]),
             .idle_data_detected(rcvd_idle_data[30]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[30]),
	     .eie_detected(rcvd_eie[30]),  
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[30]),
             .idle_os_detected(rcvd_idle_os[30]),
             .fts_os_detected(rcvd_fts_os[30]),
             .ts1_detected(rcvd_ts1[30]),
             .ts2_detected(rcvd_ts2[30]),
             .lane_num_detected(rcvd_lane_num[30]),
             .link_num_detected(rcvd_link_num[30]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[30]),
             .gen2_data_rate_detected(rcvd_gen2[30]),
             .autonomous_data_rate_detected(rcvd_autonomous[30]),
             .speed_change_data_rate_detected(rcvd_speed_change[30]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[30]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[30]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[30]),
             .loopback_detected(rcvd_loopback[30]),
             .disable_detected(rcvd_disable[30]),
             .disable_scrambling_detected(rcvd_no_scramble[30]),
	     .skp_added(skp_added[30]),
	     .skp_removed(skp_removed[30]),  
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[30]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[30])  
             );

  // Lane 31

  qvl_pci_express_rx_lane_receiver #(
    /* Constraints_Mode */     MAC_LAYER_CONSTRAINT,
    /* INTERFACE_TYPE    */    1,
    /* TX_INTERFACE      */    0,
    /* PHY_LANE_NUMBER   */    31,
    /* ZI_DOUBLE_DATA_RATE     */ ZI_DOUBLE_DATA_RATE,
    /* ZI_ELECTRICAL_IDLE_VAL */  ZI_ELECTRICAL_IDLE_VAL,
    /* MAX_LINK_WIDTH */         MAX_LINK_WIDTH,
    /* DESKEW_SUPPORT */       DESKEW_SUPPORT,
    /* PIPE_MONITOR */         1,
    /* ENABLE_DATA_PLUS_MINUS_CHECK */ 0,
    /* PCI_EXPRESS_GEN2 */     PCI_EXPRESS_GEN2)
    LANE31_RX (
             .reset(reset),
             .areset(areset),
 
             .clk(rx_clk_gate_lane[31] & pclk),
             .symbol_data_plus((int_rx_elecidle[31] & ~rx_valid_in[31]) ? 10'b0 : 10'b1),
             .symbol_data_minus(10'b0),
 
             .level_select(rx_level_select),
	     .phy_layer_checks_disable(phy_layer_checks_disable),
 
             .pci_8b_data(rx_8b_decoded_data[255:248]),
             .pci_10b_code_violation_n(rx_10b_code_violation[31]),
             .d_or_k_code(rx_d_or_k_code[31]),
 
             .pci_10b_data(rx_10b_data[319:310]),
             .parallel_symbol_valid(rx_valid_code[31]),
             .current_rd(rx_current_rd[31]),

             .deskew_fifo_read(deskew_fifo_read),
             .deskew_fifo_flush(deskew_fifo_flush),
             .com_read_from_fifo(com_read_from_fifo[31]),
             .fifo_almost_full(deskew_fifo_full[31]),
	     .fifo_empty(deskew_fifo_empty[31]), 
  // PCI_EXPRESS_GEN2 code start
             .current_speed_5gt(current_speed_5gt),
	     .stable_speed_5gt(stable_speed_5gt),  
  // PCI_EXPRESS_GEN2 code end
	     .rx_valid_in(rx_valid_in[31]), // Specific to PIPE interface
 
             .descramble_enable(!disable_descramble),
	     .lanes_with_lane_num(int_rcvd_lane_num),
	     .n_fts(rx_n_fts[255:248]),
             .link_number(link_number_rx[255:248]),
             .lane_0_detected(rx_lane_0_detected[31]),
             .dllp_tlp_on_link(rcving_dllp_tlp),
             .descrambled_data(rx_descrambled_data[255:248]),
	     .deskew_d_or_k_code(rx_deskew_d_or_k_code[31]),
             .electrical_idle_detected(rx_eidle[31]),
             .idle_data_detected(rcvd_idle_data[31]),
  // PCI_EXPRESS_GEN2 code start
	     .eie_os_detected(rcvd_eie_os[31]),
	     .eie_detected(rcvd_eie[31]),	
  // PCI_EXPRESS_GEN2 code end	       
             .skp_os_detected(rcvd_skp_os[31]),
             .idle_os_detected(rcvd_idle_os[31]),
             .fts_os_detected(rcvd_fts_os[31]),
             .ts1_detected(rcvd_ts1[31]),
             .ts2_detected(rcvd_ts2[31]),
             .lane_num_detected(rcvd_lane_num[31]),
             .link_num_detected(rcvd_link_num[31]),
  // PCI_EXPRESS_GEN2 code start					  
             .gen1_data_rate_detected(rcvd_gen1[31]),
             .gen2_data_rate_detected(rcvd_gen2[31]),
             .autonomous_data_rate_detected(rcvd_autonomous[31]),
             .speed_change_data_rate_detected(rcvd_speed_change[31]),
	     .link_ctrl_compliance_receive_detected(rcvd_compliance_receive[31]),
             .link_ctrl_compliance_receive_loopback_detected(rcvd_compliance_receive_loopback[31]),
  // PCI_EXPRESS_GEN2 code end	       
             .link_ctrl_reset_detected(rcvd_reset[31]),
             .loopback_detected(rcvd_loopback[31]),
             .disable_detected(rcvd_disable[31]),
             .disable_scrambling_detected(rcvd_no_scramble[31]),
	     .skp_added(skp_added[31]),
             .skp_removed(skp_removed[31]),   
	     .compliance_check_enable(compliance_check_enable),
             .compliance_pattern_detected(rcvd_comp_pattern[31]),
	     .modified_compliance_pattern_detected(rcvd_modified_comp_pattern[31])  
             );

  //----------------------------------------------------------
  // Link training module instantiations
  //----------------------------------------------------------

  assign int_skp_added = skp_added;
  assign int_skp_removed = skp_removed;  
 
  assign int_tx_eidle = tx_eidle;
  assign int_tx_10b_code_violation = tx_10b_code_violation;
  // PCI_EXPRESS_GEN2 code start
  assign int_xmtd_eie_os = xmtd_eie_os; 
   // PCI_EXPRESS_GEN2 code end   
  assign int_xmtd_skp_os = xmtd_skp_os;
  assign int_xmtd_idle_os = xmtd_idle_os;
  assign int_xmtd_fts_os = xmtd_fts_os;
  assign int_xmtd_ts1 = xmtd_ts1;
  assign int_xmtd_ts2 = xmtd_ts2;
  assign int_xmtd_lane_num = xmtd_lane_num;
  assign int_xmtd_link_num = xmtd_link_num;
  // PCI_EXPRESS_GEN2 code start
  assign int_xmtd_gen1 = xmtd_gen1; 
  assign int_xmtd_gen2 = xmtd_gen2;
  assign int_xmtd_autonomous = xmtd_autonomous; 
  assign int_xmtd_speed_change = xmtd_speed_change; 
  assign int_xmtd_compliance_receive = xmtd_compliance_receive; 
  assign int_xmtd_compliance_receive_loopback = xmtd_compliance_receive_loopback; 
  // PCI_EXPRESS_GEN2 code end   
  assign int_xmtd_reset = xmtd_reset;
  assign int_xmtd_loopback = xmtd_loopback;
  assign int_xmtd_disable = xmtd_disable;
  assign int_xmtd_no_scramble = xmtd_no_scramble;
  assign int_xmtd_idle_data = xmtd_idle_data;
  assign int_xmtd_comp_pattern = xmtd_comp_pattern;
  // PCI_EXPRESS_GEN2 code start  
  assign int_xmtd_modified_comp_pattern = xmtd_modified_comp_pattern; 
  // PCI_EXPRESS_GEN2 code end
   
  assign int_rx_eidle = rx_eidle; 
  assign int_rx_10b_code_violation = rx_10b_code_violation;
  // PCI_EXPRESS_GEN2 code start
  assign int_rcvd_eie_os = rcvd_eie_os; 
   // PCI_EXPRESS_GEN2 code end   
  assign int_rcvd_skp_os = rcvd_skp_os; 
  assign int_rcvd_idle_os = rcvd_idle_os; 
  assign int_rcvd_fts_os = rcvd_fts_os;
  assign int_rcvd_ts1 = rcvd_ts1; 
  assign int_rcvd_ts2 = rcvd_ts2; 
  assign int_rcvd_lane_num = rcvd_lane_num;    
  assign int_rcvd_link_num = rcvd_link_num;
  // PCI_EXPRESS_GEN2 code start
  assign int_rcvd_gen1 = rcvd_gen1; 
  assign int_rcvd_gen2 = rcvd_gen2;
  assign int_rcvd_autonomous = rcvd_autonomous; 
  assign int_rcvd_speed_change = rcvd_speed_change; 
  assign int_rcvd_compliance_receive = rcvd_compliance_receive; 
  assign int_rcvd_compliance_receive_loopback = rcvd_compliance_receive_loopback; 
  // PCI_EXPRESS_GEN2 code end   
  assign int_rcvd_reset = rcvd_reset; 
  assign int_rcvd_loopback = rcvd_loopback; 
  assign int_rcvd_disable = rcvd_disable; 
  assign int_rcvd_no_scramble = rcvd_no_scramble;
  assign int_rcvd_idle_data = rcvd_idle_data; 
  assign int_rcvd_comp_pattern = rcvd_comp_pattern;
  // PCI_EXPRESS_GEN2 code start  
  assign int_rcvd_modified_comp_pattern = rcvd_modified_comp_pattern; 
  // PCI_EXPRESS_GEN2 code end 

  // tx link training module instantiation

  qvl_pci_express_link_training_monitor #(
    /* Constraints_Mode  */          Constraints_Mode,
    /* LINK_WIDTH           */       MAX_LINK_WIDTH,
    /* PCI_EXPRESS_DEVICE_TYPE */    PCI_EXPRESS_DEVICE_TYPE,
    /* ZI_DOUBLE_DATA_RATE      */      ZI_DOUBLE_DATA_RATE,
    /* MIN_TS1_COUNT */              MIN_TS1_COUNT,
  // PCI_EXPRESS_GEN2 code start
    /* ZI_L1_40NS_COUNT */           (INTERFACE_TYPE == 0 ? 10 : 5),
  // PCI_EXPRESS_GEN2 code end
    /* PCI_EXPRESS_GEN2 */           PCI_EXPRESS_GEN2)
              LINK_TRAIN(
			   .reset(reset),
                           .areset(areset),
                           .clk(pclk),
			   .rx_clk(pclk),
			   .level_select(tx_level_select),
			   .rx_level_select(rx_level_select),
			   .skip_link_training(skip_link_training),
			   .phy_layer_checks_disable(phy_layer_checks_disable),
			   .extended_fts_sequence(extended_sync_enable),
			   .tx_valid(int_tx_valid),
                           .tx_eidle(int_tx_eidle), 
			   .tx_code_violation(int_tx_10b_code_violation),
  // PCI_EXPRESS_GEN2 code start			 
			   .xmtd_eie_ordered_set(int_xmtd_eie_os),
		           .xmtd_eie_sym(int_xmtd_eie),
  // PCI_EXPRESS_GEN2 code end			 
                           .xmtd_skip_ordered_set(int_xmtd_skp_os), 
                           .xmtd_idle_os(int_xmtd_idle_os), 
                           .xmtd_fts_os(int_xmtd_fts_os), 
                           .xmtd_ts1(int_xmtd_ts1),
                           .xmtd_ts2(int_xmtd_ts2), 
                           .xmtd_lane_num(int_xmtd_lane_num),
                           .xmtd_link_num(int_xmtd_link_num),
  // PCI_EXPRESS_GEN2 code start
                           .xmtd_gen1(int_xmtd_gen1), 
                           .xmtd_gen2(int_xmtd_gen2),
                           .xmtd_autonomous(int_xmtd_autonomous), 
                           .xmtd_speed_change(int_xmtd_speed_change), 
                           .xmtd_compliance_receive(int_xmtd_compliance_receive), 
                           .xmtd_compliance_receive_loopback(int_xmtd_compliance_receive_loopback), 
  // PCI_EXPRESS_GEN2 code end			 
                           .xmtd_reset(int_xmtd_reset),
			   .xmtd_loopback(int_xmtd_loopback),
			   .xmtd_disable(int_xmtd_disable),
			   .xmtd_no_scramble(int_xmtd_no_scramble),
			   .xmtd_idle_data(int_xmtd_idle_data),
			   .xmtd_compliance_pattern(int_xmtd_comp_pattern),
			   .tx_dllp_tlp_on_link(xmting_dllp_tlp),
// PCI_EXPRESS_GEN2 code start			 
			   .tx_tlp(tlp_xmtd_tx), 
			   .tx_dllp(dllp_xmtd_tx),
// PCI_EXPRESS_GEN2 code end
                           // Input ports

                           .int_rx_valid(int_rx_valid),
                           .int_rx_eidle(int_rx_eidle),
			   .int_rx_10b_code_violation(int_rx_10b_code_violation),
  // PCI_EXPRESS_GEN2 code start			 
			   .int_rcvd_eie_ordered_set(int_rcvd_eie_os),
		           .int_rcvd_eie_sym(int_rcvd_eie),
  // PCI_EXPRESS_GEN2 code end			 
			   .int_rcvd_skip_ordered_set(int_rcvd_skp_os),
			   .int_rcvd_idle_os(int_rcvd_idle_os),
			   .int_rcvd_fts_os(int_rcvd_fts_os),
			   .int_rcvd_ts1(int_rcvd_ts1),
			   .int_rcvd_ts2(int_rcvd_ts2),
			   .int_rcvd_lane_num(int_rcvd_lane_num),
                           .int_rcvd_link_num(int_rcvd_link_num),
  // PCI_EXPRESS_GEN2 code start
                           .int_rcvd_gen1(int_rcvd_gen1), 
                           .int_rcvd_gen2(int_rcvd_gen2),
                           .int_rcvd_autonomous(int_rcvd_autonomous), 
                           .int_rcvd_speed_change(int_rcvd_speed_change), 
                           .int_rcvd_compliance_receive(int_rcvd_compliance_receive), 
                           .int_rcvd_compliance_receive_loopback(int_rcvd_compliance_receive_loopback), 
  // PCI_EXPRESS_GEN2 code end			 
			   .int_rcvd_reset(int_rcvd_reset),
			   .int_rcvd_loopback(int_rcvd_loopback),
			   .int_rcvd_disable(int_rcvd_disable),
			   .int_rcvd_no_scramble(int_rcvd_no_scramble),
			   .int_rcvd_idle_data(int_rcvd_idle_data),
			   .rx_dllp_tlp_on_link(rcving_dllp_tlp),
// PCI_EXPRESS_GEN2 code start			 
			   .rx_tlp(tlp_xmtd_rx), 
			   .rx_dllp(dllp_xmtd_rx),
// PCI_EXPRESS_GEN2 code end			 

	                   .tx_n_fts_field_not_same(tx_n_fts_field_not_same),
                           .rx_n_fts_field_not_same(rx_n_fts_field_not_same),
  // Additional gen1 code start			  
			   .tx_link_num_field_not_same(tx_link_num_field_not_same),
                           .rx_link_num_field_not_same(rx_link_num_field_not_same),
			   .tx_link_num(link_number_tx[7:0]),
			   .rx_link_num(link_number_rx[7:0]),
  // Additional gen1 code end

                           .rx_n_fts(rx_n_fts[7:0]),

                           .xmtd_pm_enter_command_flag(xmtd_pm_enter_command_flag),
                           .rcvd_pm_enter_command_flag(rcvd_pm_enter_command_flag),

			   .L0s_entry_supported(L0s_entry_supported),

			   // Output ports

                           .disable_descramble(int_disable_descramble),
			   .link_width_negotiated(link_width_negotiated),
  // PCI_EXPRESS_GEN2 code start
                           .current_speed_5gt(current_speed_5gt),
			   .stable_speed_5gt(stable_speed_5gt),
                           .xmtd_eie_before_fts_count(xmtd_eie_before_fts_count),
			   .rcvd_eie_before_fts_count(rcvd_eie_before_fts_count),
			   .changed_speed_recovery(changed_speed_recovery),
  // PCI_EXPRESS_GEN2 code end		
                           .tx_link_width(link_width),
			   .link_width_bitmap(link_width_bitmap),
                           .tx_phy_status(phy_status),
			   .enable_compliance_pattern_check(compliance_check_enable),
  // Additional gen1 code start			  			 
			   .ltssm_present_state(ltssm_present_state),
			   .ltssm_next_state(ltssm_next_state),
  // Additional gen1 code end			  			 
                           .deskew_control(deskew_control)
                           );

  //-----------------------------------------------------------------
  // TX and RX monitor module instantiations
  //-----------------------------------------------------------------

  assign int_tx_valid = (tx_valid_code & link_width_bitmap);
  assign int_tx_d_or_k_code = (DESKEW_SUPPORT) ? tx_deskew_d_or_k_code : tx_d_or_k_code;
 
  assign int_rx_valid = (rx_valid_code & link_width_bitmap);
  assign int_rx_d_or_k_code = (DESKEW_SUPPORT) ? rx_deskew_d_or_k_code : rx_d_or_k_code;

  assign eidle_detected_tx = ((phy_status === 1'b0 &&
		   |(int_tx_eidle & active_lanes_bitmap) === 1'b1) ||
		   (phy_status === 1'b1 &&
		   |(int_tx_eidle & link_width_bitmap) === 1'b1));

  assign eidle_detected_rx = ((phy_status === 1'b0 &&
                   |(int_rx_eidle & active_lanes_bitmap) === 1'b1) ||
                   (phy_status === 1'b1 &&
                   |(int_rx_eidle & link_width_bitmap) === 1'b1)); 

  // tx monitor module instantiations

  qvl_pci_express_phy_monitor #(
    /* Constraints_Mode */         PHY_LAYER_CONSTRAINT,
    /* MAX_LINK_WIDTH */           MAX_LINK_WIDTH,
    /* ZI_DOUBLE_DATA_RATE */      ZI_DOUBLE_DATA_RATE,
    /* PCI_EXPRESS_DEVICE_TYPE */  PCI_EXPRESS_DEVICE_TYPE,
    /* TX_INTERFACE */             1,
    /* INTERFACE_TYPE */           1,
    /* PCI_EXPRESS_GEN2 */         PCI_EXPRESS_GEN2)
              TX_PHY_MON (
                         .reset(reset),
		         .areset(areset),
			 .clk(pclk),
                         .level_select(tx_level_select),
			 .phy_layer_checks_disable(phy_layer_checks_disable),
			 .descrambled_data(int_tx_descrambled_data),
                         .d_or_k_code(int_tx_d_or_k_code),
			 .valid(int_tx_valid),
			 .data_10b_code_violation_n(int_tx_10b_code_violation),
			 .link_width(link_width),
			 .phy_status(phy_status),
			 .dll_status(dll_status),
  // PCI_EXPRESS_GEN2 code start			 
			 .eie_os_detected(|int_xmtd_eie_os),
  // PCI_EXPRESS_GEN2 code end			  
                         .skp_os_detected(|int_xmtd_skp_os),
			 .fts_os_detected(|int_xmtd_fts_os),
                         .idle_data_detected(|int_xmtd_idle_data),
			 .idle_os_detected(|int_xmtd_idle_os),
                         .electrical_idle_detected(eidle_detected_tx),
			 .no_check_edb(1'b0),  // Not set for Tx 
			 .xmting_dllp_tlp(xmting_dllp_tlp),
			 .tlp_xmtd(tlp_xmtd_tx),
			 .tlp_count(tlp_count_tx),
			 .dllp_xmtd(dllp_xmtd_tx),
			 .dllp_count(dllp_count_tx),
			 .nullified_tlp_xmtd(nullified_tlp_xmtd_tx),
			 .inc_sdp_stp(tx_inc_sdp_stp),
			 .inc_pad(tx_inc_pad),
			 .inc_end(tx_inc_end),
			 .inc_stp_on_non_zero_lane(tx_inc_stp_on_non_zero_lane)
		         );

  // rx monitor module instantiations

  qvl_pci_express_phy_monitor #(
    /* Constraints_Mode */         MAC_LAYER_CONSTRAINT,
    /* LINK_WIDTH */               MAX_LINK_WIDTH,
    /* ZI_DOUBLE_DATA_RATE */      ZI_DOUBLE_DATA_RATE,
    /* PCI_EXPRESS_DEVICE_TYPE */  PCI_EXPRESS_DEVICE_TYPE,
    /* TX_INTERFACE */             0,
    /* INTERFACE_TYPE */           1,
    /* PCI_EXPRESS_GEN2 */         PCI_EXPRESS_GEN2)
             RX_PHY_MON (
                         .reset(reset),
			 .areset(areset),
			 .clk(pclk),
                         .level_select(rx_level_select),
			 .phy_layer_checks_disable(phy_layer_checks_disable),
			 .descrambled_data(int_rx_descrambled_data),
                         .d_or_k_code(int_rx_d_or_k_code),
			 .valid(int_rx_valid),
			 .data_10b_code_violation_n(int_rx_10b_code_violation),
                         .link_width(link_width),
                         .phy_status(phy_status),
			 .dll_status(dll_status),
  // PCI_EXPRESS_GEN2 code start			 
			 .eie_os_detected(|int_rcvd_eie_os),
  // PCI_EXPRESS_GEN2 code end			 
                         .skp_os_detected(|int_rcvd_skp_os),
			 .fts_os_detected(|int_rcvd_fts_os),
                         .idle_data_detected(|int_rcvd_idle_data),
		         .idle_os_detected(|int_rcvd_idle_os),
	                 .electrical_idle_detected(eidle_detected_rx),
			 .no_check_edb(no_check_for_edb_without_stp), //Only for RX
			 .xmting_dllp_tlp(rcving_dllp_tlp),
			 .tlp_xmtd(tlp_xmtd_rx),
			 .tlp_count(tlp_count_rx),
			 .dllp_xmtd(dllp_xmtd_rx),
			 .dllp_count(dllp_count_rx),
			 .nullified_tlp_xmtd(nullified_tlp_xmtd_rx),
			 .inc_sdp_stp(rx_inc_sdp_stp),
			 .inc_pad(rx_inc_pad),
			 .inc_end(rx_inc_end),
			 .inc_stp_on_non_zero_lane(rx_inc_stp_on_non_zero_lane)
			 );

  //-----------------------------------------------------------------
  // Transaction layer blocks instantiation 
  //-----------------------------------------------------------------

  wire [7:0] fc_init1_done;
  wire [7:0] fc_init2_done;
 // If STP is detected then tlp_detected_tx_rx goes 1. 
  wire tlp_detected_tx_rx = ((tx_descrambled_data[7:0] === 8'hfb && tx_d_or_k_code === 1'b1) || 
			     (rx_descrambled_data[7:0] === 8'hfb && rx_d_or_k_code === 1'b1)); 
  qvl_pci_express_transaction_layer_pkt_monitor #(
  /* Constraints_Mode */                PHY_LAYER_CONSTRAINT,
  /* PCI_EXPRESS_DEVICE_TYPE */         PCI_EXPRESS_DEVICE_TYPE,
  /* MAX_LINK_WIDTH */                  MAX_LINK_WIDTH,       
  /* TX_INTERFACE */                             1,
  /* ZI_DOUBLE_DATA_RATE */                ZI_DOUBLE_DATA_RATE,
  /* RESERVED_FIELD_CHECK_ENABLE */     RESERVED_FIELD_CHECK_ENABLE,
  /* VENDOR_SPECIFIC_ENCODING_ENABLE */ VENDOR_SPECIFIC_ENCODING_ENABLE,
  /* HOT_PLUG_MESSAGE_ENABLE */         HOT_PLUG_MESSAGE_ENABLE,
  /* PCI_EXPRESS_GEN2 */                PCI_EXPRESS_GEN2)
 
  TRAN_TX(
          .reset(reset | eidle_detected_tx),
          .areset(areset),
          .level_select(tx_level_select),
          .clk(pclk),
	  .transaction_layer_checks_disable(transaction_layer_checks_disable),
          .descrambled_data(int_tx_descrambled_data),
          .data_d_or_k_code(int_tx_d_or_k_code),
          .data_10b_code_violation_n(int_tx_10b_code_violation),
          .valid_code(int_tx_valid),
          .link_width(link_width),
          .dll_status(dll_status),
  // Additional gen1 code start			  			 
	  .phy_status(phy_status),
	  .tc_mapped_to_vc_id_0(tc_mapped_to_vc_id_0_real),
	  .tc_mapped_to_vc_id_1(tc_mapped_to_vc_id_1_real),
	  .tc_mapped_to_vc_id_2(tc_mapped_to_vc_id_2_real),
	  .tc_mapped_to_vc_id_3(tc_mapped_to_vc_id_3_real),
	  .tc_mapped_to_vc_id_4(tc_mapped_to_vc_id_4_real),
	  .tc_mapped_to_vc_id_5(tc_mapped_to_vc_id_5_real),
	  .tc_mapped_to_vc_id_6(tc_mapped_to_vc_id_6_real),
	  .tc_mapped_to_vc_id_7(tc_mapped_to_vc_id_7_real),
	  .fc_init1_done(fc_init1_done),
  // Additional gen1 code end	  
          .extended_tag_field_enable(device_control_register[8]),
          .max_payload_size((device_capabilities_register[2:0] > device_control_register[7:5])? device_control_register[7:5] : device_capabilities_register[2:0]),
	  .max_read_req_size(device_control_register[14:12]),
	  .tc_mapped_bitmap(tc_mapped_bitmap),
  // PCI_EXPRESS_GEN2 code start	  
	  .acs_translation_blocking_enable(acs_translation_blocking_enable),
  // PCI_EXPRESS_GEN2 code end	  
	  .no_check_edb (1'b0), // Not set for Tx
// Additional gen1 code start		  
	  .initial_cfg_started_other_dev(initial_cfg_started_rx),
	  .last_captured_req_id_other_dev(last_captured_req_id_rx),
	  .lock_established_other_device(lock_established_rx),
	  .lock_completed_other_device(lock_completed_rx),
// Additional gen1 code end
          .tlp_packet_detected(tx_tlp_detected),
          .tlp_pkt1(tx_tlp_pkt1),
          .tlp_pkt2(tx_tlp_pkt2),
          .malformed_tlp_detected(tx_malformed_tlp),
	  .inc_tlps_with_digests(tx_tlps_with_digests),
	  .inc_tlps_with_ecrc(tx_tlps_with_ecrc),
// Additional gen1 code start		  
	  .initial_cfg_started(initial_cfg_started_tx),
	  .last_captured_req_id(last_captured_req_id_tx),
	  .lock_established(lock_established_tx),
	  .lock_completed(lock_completed_tx),
// Additional gen1 code end	  
          .pm_active_state_nak_detected(xmtd_pm_active_state_nak_tlp),
          .pm_pme_detected(xmtd_pm_pme_tlp),
          .pme_turn_off_detected(xmtd_pme_turn_off_tlp),
          .pme_to_ack_detected(xmtd_pme_to_ack_tlp)
         );

  qvl_pci_express_transaction_layer_pkt_monitor #(
  /* Constraints_Mode */               MAC_LAYER_CONSTRAINT,
  /* PCI_EXPRESS_DEVICE_TYPE */        PCI_EXPRESS_DEVICE_TYPE,
  /* MAXIMUM_LINK_WIDTH */             MAX_LINK_WIDTH,
  /* TX_INTERFACE */                             0,
  /* ZI_DOUBLE_DATA_RATE */               ZI_DOUBLE_DATA_RATE,
  /* RESERVED_FIELD_CHECK_ENABLE */    RESERVED_FIELD_CHECK_ENABLE,
  /* VENDOR_SPECIFIC_ENCODING_ENABLE */ VENDOR_SPECIFIC_ENCODING_ENABLE,
  /* HOT_PLUG_MESSAGE_ENABLE */         HOT_PLUG_MESSAGE_ENABLE,
  /* PCI_EXPRESS_GEN2 */                PCI_EXPRESS_GEN2)

  TRAN_RX(
          .reset(reset | eidle_detected_rx),
          .areset(areset),
          .level_select(rx_level_select),
          .clk(pclk),
	  .transaction_layer_checks_disable(transaction_layer_checks_disable),
          .descrambled_data(int_rx_descrambled_data),
          .data_d_or_k_code(int_rx_d_or_k_code),
          .data_10b_code_violation_n(int_rx_10b_code_violation),
          .valid_code(int_rx_valid),
          .link_width(link_width),
          .dll_status(dll_status),
  // Additional gen1 code start			  			 
	  .phy_status(phy_status),
	  .tc_mapped_to_vc_id_0(tc_mapped_to_vc_id_0_real),
	  .tc_mapped_to_vc_id_1(tc_mapped_to_vc_id_1_real),
	  .tc_mapped_to_vc_id_2(tc_mapped_to_vc_id_2_real),
	  .tc_mapped_to_vc_id_3(tc_mapped_to_vc_id_3_real),
	  .tc_mapped_to_vc_id_4(tc_mapped_to_vc_id_4_real),
	  .tc_mapped_to_vc_id_5(tc_mapped_to_vc_id_5_real),
	  .tc_mapped_to_vc_id_6(tc_mapped_to_vc_id_6_real),
	  .tc_mapped_to_vc_id_7(tc_mapped_to_vc_id_7_real),
	  .fc_init1_done(fc_init1_done),
  // Additional gen1 code end	  
          .extended_tag_field_enable(device_control_register[8]),
          .max_payload_size((device_capabilities_register[2:0] > device_control_register[7:5])? device_control_register[7:5] : device_capabilities_register[2:0]),
	  .max_read_req_size(device_control_register[14:12]),
	  .tc_mapped_bitmap(tc_mapped_bitmap),
  // PCI_EXPRESS_GEN2 code start	  
	  .acs_translation_blocking_enable(acs_translation_blocking_enable),
  // PCI_EXPRESS_GEN2 code end	  
	  .no_check_edb (no_check_for_edb_without_stp),
// Additional gen1 code start		  
	  .initial_cfg_started_other_dev(initial_cfg_started_tx),
	  .last_captured_req_id_other_dev(last_captured_req_id_tx),
	  .lock_established_other_device(lock_established_tx),
	  .lock_completed_other_device(lock_completed_tx),
// Additional gen1 code end
          .tlp_packet_detected(rx_tlp_detected),
          .tlp_pkt1(rx_tlp_pkt1),
          .tlp_pkt2(rx_tlp_pkt2),
          .malformed_tlp_detected(rx_malformed_tlp),
	  .inc_tlps_with_digests(rx_tlps_with_digests), 
	  .inc_tlps_with_ecrc(rx_tlps_with_ecrc),
// Additional gen1 code start		  
	  .initial_cfg_started(initial_cfg_started_rx),
	  .last_captured_req_id(last_captured_req_id_rx),
	  .lock_established(lock_established_rx),
	  .lock_completed(lock_completed_rx),
// Additional gen1 code end
          .pm_active_state_nak_detected(rcvd_pm_active_state_nak_tlp), 
          .pm_pme_detected(rcvd_pm_pme_tlp), 
          .pme_turn_off_detected(rcvd_pme_turn_off_tlp),  
          .pme_to_ack_detected(rcvd_pme_to_ack_tlp) 
         );

  // Transaction monitor instantiation

  qvl_pci_express_transaction_monitor #(
    /* Constraints_Mode */         Constraints_Mode, 
    /* ZI_DOUBLE_DATA_RATE */         ZI_DOUBLE_DATA_RATE,
    /* MAX_REQUESTS_ADDR_WIDTH */  MAX_REQUESTS_ADDR_WIDTH,
    /* PCI_EXPRESS_GEN2 */         PCI_EXPRESS_GEN2,
                                   CPL_TIMEOUT_CLK)
 
  TRAN_MON(
           .reset(reset),
           .areset(areset),
           .tx_level_select(tx_level_select),
           .rx_level_select(rx_level_select),
           .tx_clk(pclk),
           .rx_clk(pclk),
	   .transaction_layer_checks_disable(transaction_layer_checks_disable),
	   .disable_cpl_timeout(disable_cpl_timeout),
           .xmtd_tlp(tx_tlp_detected),
           .xmtd_tlp_packet1(tx_tlp_pkt1),
           .xmtd_tlp_packet2(tx_tlp_pkt2),
           .xmtd_malformed_tlp(tx_malformed_tlp),
           .tx_retry_progress(tx_retry_progress),
           .xmtd_lcrc_error(xmtd_lcrc_error),
           .rcvd_tlp(rx_tlp_detected),
           .rcvd_tlp_packet1(rx_tlp_pkt1),
           .rcvd_tlp_packet2(rx_tlp_pkt2),
           .rcvd_malformed_tlp(rx_malformed_tlp),
           .rx_retry_progress(rx_retry_progress),
           .rcvd_lcrc_error(rcvd_lcrc_error),
 
           // DLL interface
 
           .dll_status(dll_status),
	   .phy_status(phy_status)
           );

  //-----------------------------------------------------------------
  // Statistics module instantiation
  //-----------------------------------------------------------------

  qvl_pci_express_statistics #(
  /* ZI_DOUBLE_DATA_RATE */        ZI_DOUBLE_DATA_RATE,
  /* PCI_EXPRESS_GEN2 */           PCI_EXPRESS_GEN2)

         TX_STATS(
         .reset(reset),
         .areset(areset),
         .clk(pclk),
         .phy_status(phy_status),
         .descrambled_data(tx_descrambled_data[7:0]),
         .d_or_k_code(tx_d_or_k_code[0]),
         .valid(tx_valid_code[0]),
         .inc_tlp(tlp_xmtd_tx),
	 .tlp_count(tlp_count_tx),
         .inc_dllp(dllp_xmtd_tx),
	 .dllp_count(dllp_count_tx),
         .inc_nullified_tlp(nullified_tlp_xmtd_tx),
         .inc_ts1_os(|int_xmtd_ts1),
         .inc_ts2_os(|int_xmtd_ts2),
  // PCI_EXPRESS_GEN2 code start
         .inc_gen1(|int_xmtd_gen1), 
         .inc_gen2(|int_xmtd_gen2),
         .inc_autonomous(|int_xmtd_autonomous), 
         .inc_speed_change(|int_xmtd_speed_change), 
         .inc_compliance_receive(|int_xmtd_compliance_receive), 
         .inc_compliance_receive_loopback(|int_xmtd_compliance_receive_loopback), 
  // PCI_EXPRESS_GEN2 code end		  
         .inc_reset(|int_xmtd_reset),
         .inc_loopback(|int_xmtd_loopback),
         .inc_disable(|int_xmtd_disable),
         .inc_no_scramble(|int_xmtd_no_scramble),
         .inc_fts_os(|int_xmtd_fts_os),
         .inc_idle_os(|int_xmtd_idle_os),
  // PCI_EXPRESS_GEN2 code start
	 .inc_modified_compliance_pattern(|int_xmtd_modified_comp_pattern),	  
	 .inc_eie_os(|int_xmtd_eie_os),
	 .inc_eie(|int_xmtd_eie),  
  // PCI_EXPRESS_GEN2 code end		  
         .inc_skp_os(|int_xmtd_skp_os),
         .link_width(link_width),
         .link_number(link_number_tx[7:0]),
         .inc_pad(tx_inc_pad), 
         .inc_sdp_stp(tx_inc_sdp_stp),
	 .inc_end(tx_inc_end),
	 .inc_stp_on_non_zero_lane(tx_inc_stp_on_non_zero_lane),
         .inc_idle_data(|int_xmtd_idle_data),
  // PCI_EXPRESS_GEN2 code start
         .current_speed_5gt(current_speed_5gt),
         .inc_eie_before_fts_count(xmtd_eie_before_fts_count),
	 .changed_speed_recovery(changed_speed_recovery),	  
  // PCI_EXPRESS_GEN2 code end    
         .level_select(tx_level_select),
         .tlp_packet_detected(tx_tlp_detected),
         .tlp_pkt1(tx_tlp_pkt1),
         .tlp_pkt2(tx_tlp_pkt2),
         .inc_tlps_with_digests(tx_tlps_with_digests),
         .inc_tlps_with_ecrc(tx_tlps_with_ecrc),
	 .inc_tlps_with_lcrc(xmtd_lcrc_error),
	 .inc_malformed_tlps(tx_malformed_tlp),
  // Additional gen1 code start			  			 
	 .ltssm_present_state(ltssm_present_state),
	 .ltssm_next_state(ltssm_next_state),
  // Additional gen1 code end	 	  
          // DLL Statistics
         .dllp_ack_detected(tx_dllp_ack_detected),
         .dllp_ack_ended(tx_dllp_ack_ended),
         .dllp_nak_detected(tx_dllp_nak_detected),
         .dllp_nak_ended(tx_dllp_nak_ended),
         .dllp_pm_enter_L1_detected(tx_dllp_pm_enter_L1_detected),
         .dllp_pm_enter_L1_ended(tx_dllp_pm_enter_L1_ended),
         .dllp_pm_enter_L23_detected(tx_dllp_pm_enter_L23_detected),
         .dllp_pm_enter_L23_ended(tx_dllp_pm_enter_L23_ended),
         .dllp_pm_active_req_L0s_detected(tx_dllp_pm_active_req_L0s_detected),
         .dllp_pm_active_req_L0s_ended(tx_dllp_pm_active_req_L0s_ended),
         .dllp_pm_active_req_L1_detected(tx_dllp_pm_active_req_L1_detected),
         .dllp_pm_active_req_L1_ended(tx_dllp_pm_active_req_L1_ended),
         .dllp_pm_request_ack_detected(tx_dllp_pm_request_ack_detected),
         .dllp_pm_request_ack_ended(tx_dllp_pm_request_ack_ended),
         .dllp_vendor_specific_detected(tx_dllp_vendor_specific_detected),
         .dllp_vendor_specific_ended(tx_dllp_vendor_specific_ended),
         .dllp_initfc1_p_detected(tx_dllp_initfc1_p_detected),
         .dllp_initfc1_p_ended(tx_dllp_initfc1_p_ended),
         .dllp_initfc1_np_detected(tx_dllp_initfc1_np_detected),
         .dllp_initfc1_np_ended(tx_dllp_initfc1_np_ended),
         .dllp_initfc1_cpl_detected(tx_dllp_initfc1_cpl_detected),
         .dllp_initfc1_cpl_ended(tx_dllp_initfc1_cpl_ended),
         .dllp_initfc2_p_detected(tx_dllp_initfc2_p_detected),
         .dllp_initfc2_p_ended(tx_dllp_initfc2_p_ended),
         .dllp_initfc2_np_detected(tx_dllp_initfc2_np_detected),
         .dllp_initfc2_np_ended(tx_dllp_initfc2_np_ended),
         .dllp_initfc2_cpl_detected(tx_dllp_initfc2_cpl_detected),
         .dllp_initfc2_cpl_ended(tx_dllp_initfc2_cpl_ended),
         .dllp_updatefc_p_detected(tx_dllp_updatefc_p_detected),
         .dllp_updatefc_p_ended(tx_dllp_updatefc_p_ended),
         .dllp_updatefc_np_detected(tx_dllp_updatefc_np_detected),
         .dllp_updatefc_np_ended(tx_dllp_updatefc_np_ended),
         .dllp_updatefc_cpl_detected(tx_dllp_updatefc_cpl_detected),
         .dllp_updatefc_cpl_ended(tx_dllp_updatefc_cpl_ended),
         .detected_dllp_pkt_valid(tx_detected_dllp_pkt_valid),
         .ended_dllp_pkt_valid(tx_ended_dllp_pkt_valid),
         .detected_retry_progress(tx_retry_progress[1]),
         .ended_retry_progress(tx_retry_progress[0]),
         .current_expected_tlp_seq_num(tx_current_expected_tlp_seq_num),
         .ack_nak_sequence_number_of_dllp(tx_ack_nak_sequence_number_of_dllp),
         .replay_timer(tx_replay_timer),
         .acknak_timer(tx_acknak_timer),
         .num_outstanding_tlps(tx_num_outstanding_tlps),
         .incr_detected_duplicate_tlp(1'b0),
         .incr_ended_duplicate_tlp(1'b0),
         .vc_tlp_detected(vc_tlp_transmitted)
               );
 
  qvl_pci_express_statistics #(
  /* ZI_DOUBLE_DATA_RATE */          ZI_DOUBLE_DATA_RATE,
  /* PCI_EXPRESS_GEN2 */             PCI_EXPRESS_GEN2)

         RX_STATS(
         .reset(reset),
         .areset(areset),
         .clk(pclk),
         .phy_status(phy_status),
         .descrambled_data(rx_descrambled_data[7:0]),
         .d_or_k_code(rx_d_or_k_code[0]),
         .valid(rx_valid_code[0]),
         .inc_tlp(tlp_xmtd_rx),
	 .tlp_count(tlp_count_rx),
         .inc_dllp(dllp_xmtd_rx),
	 .dllp_count(dllp_count_rx),
         .inc_nullified_tlp(nullified_tlp_xmtd_rx),
         .inc_ts1_os(|int_rcvd_ts1),
         .inc_ts2_os(|int_rcvd_ts2),
  // PCI_EXPRESS_GEN2 code start
         .inc_gen1(|int_rcvd_gen1), 
         .inc_gen2(|int_rcvd_gen2),
         .inc_autonomous(|int_rcvd_autonomous), 
         .inc_speed_change(|int_rcvd_speed_change), 
         .inc_compliance_receive(|int_rcvd_compliance_receive), 
         .inc_compliance_receive_loopback(|int_rcvd_compliance_receive_loopback), 
  // PCI_EXPRESS_GEN2 code end		  
         .inc_reset(|int_rcvd_reset),
         .inc_loopback(|int_rcvd_loopback),
         .inc_disable(|int_rcvd_disable),
         .inc_no_scramble(|int_rcvd_no_scramble),
         .inc_fts_os(|int_rcvd_fts_os),
         .inc_idle_os(|int_rcvd_idle_os),
  // PCI_EXPRESS_GEN2 code start	
	 .inc_modified_compliance_pattern(|int_rcvd_modified_comp_pattern), 	  
	 .inc_eie_os(|int_rcvd_eie_os),
	 .inc_eie(|int_rcvd_eie),  
  // PCI_EXPRESS_GEN2 code end		  
         .inc_skp_os(|int_rcvd_skp_os),
         .link_width(link_width),
         .link_number(link_number_rx[7:0]),
         .inc_pad(rx_inc_pad),
         .inc_sdp_stp(rx_inc_sdp_stp),
	 .inc_end(rx_inc_end),    
         .inc_stp_on_non_zero_lane(rx_inc_stp_on_non_zero_lane),
         .inc_idle_data(|int_rcvd_idle_data),
  // PCI_EXPRESS_GEN2 code start
         .current_speed_5gt(current_speed_5gt),
         .inc_eie_before_fts_count(rcvd_eie_before_fts_count),
         .changed_speed_recovery(changed_speed_recovery), 		  
  // PCI_EXPRESS_GEN2 code end    
         .level_select(rx_level_select),
         .tlp_packet_detected(rx_tlp_detected),
         .tlp_pkt1(rx_tlp_pkt1),
         .tlp_pkt2(rx_tlp_pkt2),
         .inc_tlps_with_digests(rx_tlps_with_digests),
         .inc_tlps_with_ecrc(rx_tlps_with_ecrc),
         .inc_tlps_with_lcrc(rcvd_lcrc_error),
         .inc_malformed_tlps(rx_malformed_tlp),
  // Additional gen1 code start			  			 
	 .ltssm_present_state(5'b0),
	 .ltssm_next_state(5'b0),
  // Additional gen1 code end		  
          // DLL Statistics
         .dllp_ack_detected(rx_dllp_ack_detected),
         .dllp_ack_ended(rx_dllp_ack_ended),
         .dllp_nak_detected(rx_dllp_nak_detected),
         .dllp_nak_ended(rx_dllp_nak_ended),
         .dllp_pm_enter_L1_detected(rx_dllp_pm_enter_L1_detected),
         .dllp_pm_enter_L1_ended(rx_dllp_pm_enter_L1_ended),
         .dllp_pm_enter_L23_detected(rx_dllp_pm_enter_L23_detected),
         .dllp_pm_enter_L23_ended(rx_dllp_pm_enter_L23_ended),
         .dllp_pm_active_req_L0s_detected(rx_dllp_pm_active_req_L0s_detected),
         .dllp_pm_active_req_L0s_ended(rx_dllp_pm_active_req_L0s_ended),
         .dllp_pm_active_req_L1_detected(rx_dllp_pm_active_req_L1_detected),
         .dllp_pm_active_req_L1_ended(rx_dllp_pm_active_req_L1_ended),
         .dllp_pm_request_ack_detected(rx_dllp_pm_request_ack_detected),
         .dllp_pm_request_ack_ended(rx_dllp_pm_request_ack_ended),
         .dllp_vendor_specific_detected(rx_dllp_vendor_specific_detected),
         .dllp_vendor_specific_ended(rx_dllp_vendor_specific_ended),
         .dllp_initfc1_p_detected(rx_dllp_initfc1_p_detected),
         .dllp_initfc1_p_ended(rx_dllp_initfc1_p_ended),
         .dllp_initfc1_np_detected(rx_dllp_initfc1_np_detected),
         .dllp_initfc1_np_ended(rx_dllp_initfc1_np_ended),
         .dllp_initfc1_cpl_detected(rx_dllp_initfc1_cpl_detected),
         .dllp_initfc1_cpl_ended(rx_dllp_initfc1_cpl_ended),
         .dllp_initfc2_p_detected(rx_dllp_initfc2_p_detected),
         .dllp_initfc2_p_ended(rx_dllp_initfc2_p_ended),
         .dllp_initfc2_np_detected(rx_dllp_initfc2_np_detected),
         .dllp_initfc2_np_ended(rx_dllp_initfc2_np_ended),
         .dllp_initfc2_cpl_detected(rx_dllp_initfc2_cpl_detected),
         .dllp_initfc2_cpl_ended(rx_dllp_initfc2_cpl_ended),
         .dllp_updatefc_p_detected(rx_dllp_updatefc_p_detected),
         .dllp_updatefc_p_ended(rx_dllp_updatefc_p_ended),
         .dllp_updatefc_np_detected(rx_dllp_updatefc_np_detected),
         .dllp_updatefc_np_ended(rx_dllp_updatefc_np_ended),
         .dllp_updatefc_cpl_detected(rx_dllp_updatefc_cpl_detected),
         .dllp_updatefc_cpl_ended(rx_dllp_updatefc_cpl_ended),
         .detected_dllp_pkt_valid(rx_detected_dllp_pkt_valid),
         .ended_dllp_pkt_valid(rx_ended_dllp_pkt_valid),
         .detected_retry_progress(rx_retry_progress[1]),
         .ended_retry_progress(rx_retry_progress[0]),
         .current_expected_tlp_seq_num(rx_current_expected_tlp_seq_num),
         .ack_nak_sequence_number_of_dllp(rx_ack_nak_sequence_number_of_dllp),
         .replay_timer(rx_replay_timer),
         .acknak_timer(rx_acknak_timer),
         .num_outstanding_tlps(rx_num_outstanding_tlps),
         .incr_detected_duplicate_tlp(rx_incr_detected_duplicate_tlp),
         .incr_ended_duplicate_tlp(rx_incr_ended_duplicate_tlp),
         .vc_tlp_detected(vc_tlp_received)
         ); 

  //-----------------------------------------------------------------
  // Data Link layer monitor instantiation.
  //-----------------------------------------------------------------

  qvl_pci_express_link_layer_monitor #(
  /* Constraints_Mode */                Constraints_Mode,
  /* NUMBER_OF_LANES  */                MAX_LINK_WIDTH,
  /* ZI_DOUBLE_DATA_RATE */             ZI_DOUBLE_DATA_RATE,
  /* RESERVED_FIELD_CHECK_ENABLE */     RESERVED_FIELD_CHECK_ENABLE,
  /* VENDOR_SPECIFIC_ENCODING_ENABLE */ VENDOR_SPECIFIC_ENCODING_ENABLE,
  /* OVERRIDE_TIMER_VALUE */            OVERRIDE_TIMER_VALUE,
  /* REPLAY_TIMER_VALUE */              REPLAY_TIMER_VALUE,
  /* ACKNAK_TIMER_VALUE */              ACKNAK_TIMER_VALUE,
  /* DEVICE_TYPE */                     PCI_EXPRESS_DEVICE_TYPE,
  /* PCI_EXPRESS_GEN2 */                PCI_EXPRESS_GEN2,				       
  /* MAC_LAYER_SIDE */                  MAC_LAYER_SIDE)
          LINK_LAYER_MONITOR(
         .areset(areset),
         .reset(reset),
         .phy_status(phy_status),
         .link_layer_checks_disable(link_layer_checks_disable),
         .tx_10b_code_violation(!(&(int_tx_10b_code_violation | ~(link_width_bitmap)))),
	 .tx_link_clk(pclk),
         .tx_level_select(tx_level_select),
         .tx_descrambled_data(int_tx_descrambled_data),
         .tx_d_or_k_code(int_tx_d_or_k_code),
         .tx_valid_code(int_tx_valid),
         .rx_10b_code_violation(!(&(int_rx_10b_code_violation | ~(link_width_bitmap)))),
	 .rx_link_clk(pclk),
         .rx_level_select(rx_level_select),
         .rx_descrambled_data(int_rx_descrambled_data),
         .rx_d_or_k_code(int_rx_d_or_k_code),
         .rx_valid_code(int_rx_valid),
         .max_payload_size(device_control_register[7:5]),
	 .maximum_max_payload_size(device_capabilities_register[2:0]),
	 .max_read_req_size(device_control_register[14:12]),
         .link_operating_width(link_width),
// PCI_EXPRESS_GEN2 code start
         .current_speed_5gt(current_speed_5gt),
// PCI_EXPRESS_GEN2 code end			     
         .link_up(dll_status),
         .tx_replay_timer_elapsed(),
         .tx_replay_num_elapsed(),
         // P,NP,Cpl DLL Type
         .tx_detected_lcrc_error(xmtd_lcrc_error[1]),
	 .tx_ended_lcrc_error(xmtd_lcrc_error[0]),
	 .tx_detected_retry_progress(tx_retry_progress[1]),
	 .tx_ended_retry_progress(tx_retry_progress[0]),
	 .rx_replay_timer_elapsed(),
	 .rx_replay_num_elapsed(),
         // P,NP,Cpl DLL Type
         .rx_detected_lcrc_error(rcvd_lcrc_error[1]),
         .rx_ended_lcrc_error(rcvd_lcrc_error[0]),
         .rx_detected_retry_progress(rx_retry_progress[1]),
	 .rx_ended_retry_progress(rx_retry_progress[0]),
         // Statistics
         .tx_dllp_ack_detected(tx_dllp_ack_detected),
         .tx_dllp_ack_ended(tx_dllp_ack_ended),
         .tx_dllp_nak_detected(tx_dllp_nak_detected),
         .tx_dllp_nak_ended(tx_dllp_nak_ended),
         .tx_dllp_pm_enter_L1_detected(tx_dllp_pm_enter_L1_detected),
         .tx_dllp_pm_enter_L1_ended(tx_dllp_pm_enter_L1_ended),
         .tx_dllp_pm_enter_L23_detected(tx_dllp_pm_enter_L23_detected),
         .tx_dllp_pm_enter_L23_ended(tx_dllp_pm_enter_L23_ended),
       .tx_dllp_pm_active_req_L0s_detected(tx_dllp_pm_active_req_L0s_detected),
         .tx_dllp_pm_active_req_L0s_ended(tx_dllp_pm_active_req_L0s_ended),
         .tx_dllp_pm_active_req_L1_detected(tx_dllp_pm_active_req_L1_detected),
         .tx_dllp_pm_active_req_L1_ended(tx_dllp_pm_active_req_L1_ended),
         .tx_dllp_pm_request_ack_detected(tx_dllp_pm_request_ack_detected),
         .tx_dllp_pm_request_ack_ended(tx_dllp_pm_request_ack_ended),
         .tx_dllp_vendor_specific_detected(tx_dllp_vendor_specific_detected),
         .tx_dllp_vendor_specific_ended(tx_dllp_vendor_specific_ended),
         .tx_dllp_initfc1_p_detected(tx_dllp_initfc1_p_detected),
         .tx_dllp_initfc1_p_ended(tx_dllp_initfc1_p_ended),
         .tx_dllp_initfc1_np_detected(tx_dllp_initfc1_np_detected),
         .tx_dllp_initfc1_np_ended(tx_dllp_initfc1_np_ended),
         .tx_dllp_initfc1_cpl_detected(tx_dllp_initfc1_cpl_detected),
         .tx_dllp_initfc1_cpl_ended(tx_dllp_initfc1_cpl_ended),
         .tx_dllp_initfc2_p_detected(tx_dllp_initfc2_p_detected),
         .tx_dllp_initfc2_p_ended(tx_dllp_initfc2_p_ended),
         .tx_dllp_initfc2_np_detected(tx_dllp_initfc2_np_detected),
         .tx_dllp_initfc2_np_ended(tx_dllp_initfc2_np_ended),
         .tx_dllp_initfc2_cpl_detected(tx_dllp_initfc2_cpl_detected),
         .tx_dllp_initfc2_cpl_ended(tx_dllp_initfc2_cpl_ended),
         .tx_dllp_updatefc_p_detected(tx_dllp_updatefc_p_detected),
         .tx_dllp_updatefc_p_ended(tx_dllp_updatefc_p_ended),
         .tx_dllp_updatefc_np_detected(tx_dllp_updatefc_np_detected),
         .tx_dllp_updatefc_np_ended(tx_dllp_updatefc_np_ended),
         .tx_dllp_updatefc_cpl_detected(tx_dllp_updatefc_cpl_detected),
         .tx_dllp_updatefc_cpl_ended(tx_dllp_updatefc_cpl_ended),
         .tx_detected_dllp_pkt_valid(tx_detected_dllp_pkt_valid),
	 .tx_detected_dllp_pkt(tx_detected_dllp_pkt),
         .tx_ended_dllp_pkt_valid(tx_ended_dllp_pkt_valid),
	 .tx_ended_dllp_pkt(tx_ended_dllp_pkt),
         .tx_next_tlp_seq_num(tx_current_expected_tlp_seq_num),
       .tx_ack_nak_sequence_number_of_dllp(tx_ack_nak_sequence_number_of_dllp),
         .tx_replay_timer(tx_replay_timer),
         .tx_acknak_timer(tx_acknak_timer),
         .tx_num_outstanding_tlps(tx_num_outstanding_tlps),
         .tx_incr_detected_duplicate_tlp(tx_incr_detected_duplicate_tlp),
         .tx_incr_ended_duplicate_tlp(tx_incr_ended_duplicate_tlp),
         .vc_tlp_transmitted(vc_tlp_transmitted),
         .rx_dllp_ack_detected(rx_dllp_ack_detected),
         .rx_dllp_ack_ended(rx_dllp_ack_ended),
         .rx_dllp_nak_detected(rx_dllp_nak_detected),
         .rx_dllp_nak_ended(rx_dllp_nak_ended),
         .rx_dllp_pm_enter_L1_detected(rx_dllp_pm_enter_L1_detected),
         .rx_dllp_pm_enter_L1_ended(rx_dllp_pm_enter_L1_ended),
         .rx_dllp_pm_enter_L23_detected(rx_dllp_pm_enter_L23_detected),
         .rx_dllp_pm_enter_L23_ended(rx_dllp_pm_enter_L23_ended),
       .rx_dllp_pm_active_req_L0s_detected(rx_dllp_pm_active_req_L0s_detected),
       .rx_dllp_pm_active_req_L0s_ended(rx_dllp_pm_active_req_L0s_ended),
         .rx_dllp_pm_active_req_L1_detected(rx_dllp_pm_active_req_L1_detected),
         .rx_dllp_pm_active_req_L1_ended(rx_dllp_pm_active_req_L1_ended),
         .rx_dllp_pm_request_ack_detected(rx_dllp_pm_request_ack_detected),
         .rx_dllp_pm_request_ack_ended(rx_dllp_pm_request_ack_ended),
         .rx_dllp_vendor_specific_detected(rx_dllp_vendor_specific_detected),
         .rx_dllp_vendor_specific_ended(rx_dllp_vendor_specific_ended),
         .rx_dllp_initfc1_p_detected(rx_dllp_initfc1_p_detected),
         .rx_dllp_initfc1_p_ended(rx_dllp_initfc1_p_ended),
         .rx_dllp_initfc1_np_detected(rx_dllp_initfc1_np_detected),
         .rx_dllp_initfc1_np_ended(rx_dllp_initfc1_np_ended),
         .rx_dllp_initfc1_cpl_detected(rx_dllp_initfc1_cpl_detected),
         .rx_dllp_initfc1_cpl_ended(rx_dllp_initfc1_cpl_ended),
         .rx_dllp_initfc2_p_detected(rx_dllp_initfc2_p_detected),
         .rx_dllp_initfc2_p_ended(rx_dllp_initfc2_p_ended),
         .rx_dllp_initfc2_np_detected(rx_dllp_initfc2_np_detected),
         .rx_dllp_initfc2_np_ended(rx_dllp_initfc2_np_ended),
         .rx_dllp_initfc2_cpl_detected(rx_dllp_initfc2_cpl_detected),
         .rx_dllp_initfc2_cpl_ended(rx_dllp_initfc2_cpl_ended),
         .rx_dllp_updatefc_p_detected(rx_dllp_updatefc_p_detected),
         .rx_dllp_updatefc_p_ended(rx_dllp_updatefc_p_ended),
         .rx_dllp_updatefc_np_detected(rx_dllp_updatefc_np_detected),
         .rx_dllp_updatefc_np_ended(rx_dllp_updatefc_np_ended),
         .rx_dllp_updatefc_cpl_detected(rx_dllp_updatefc_cpl_detected),
         .rx_dllp_updatefc_cpl_ended(rx_dllp_updatefc_cpl_ended),
         .rx_detected_dllp_pkt_valid(rx_detected_dllp_pkt_valid),
	 .rx_detected_dllp_pkt(rx_detected_dllp_pkt),
         .rx_ended_dllp_pkt_valid(rx_ended_dllp_pkt_valid),
	 .rx_ended_dllp_pkt(rx_ended_dllp_pkt),
         .rx_next_tlp_seq_num(rx_current_expected_tlp_seq_num),
       .rx_ack_nak_sequence_number_of_dllp(rx_ack_nak_sequence_number_of_dllp),
         .rx_replay_timer(rx_replay_timer),
         .rx_acknak_timer(rx_acknak_timer),
         .rx_num_outstanding_tlps(rx_num_outstanding_tlps),
         .rx_incr_detected_duplicate_tlp(rx_incr_detected_duplicate_tlp),
         .rx_incr_ended_duplicate_tlp(rx_incr_ended_duplicate_tlp),
         .vc_tlp_received(vc_tlp_received),

	 .extended_sync_enable(extended_sync_enable),
	 .L0s_entry_supported(L0s_entry_supported),
	 .tx_n_fts(tx_n_fts[7:0]),
	 .rx_n_fts(tx_n_fts[7:0]),
	 .fc_init1_done(fc_init1_done[0]),
	 .fc_init2_done(fc_init2_done[0])
         );

  //--------------------------------------------------------------
  // Flow control module instantiation for VC0
  //--------------------------------------------------------------

  qvl_pci_express_flow_control #(
  /* Constraints_Mode */                 Constraints_Mode,
  /* VC_ID */                            0,
  /* VC_ID_STRING */                     "0.",
  /* ZI_DOUBLE_DATA_RATE */              ZI_DOUBLE_DATA_RATE,
  /* UPDATE_FC_30US_TIMER_CLK*/          UPDATE_FC_30US_TIMER_CLK,				 
  /* MAC_LAYER_SIDE */                   MAC_LAYER_SIDE)
     VC0_FLOW_CTRL (.reset(reset),
      	   .areset(areset),
	   .tx_clk(pclk),
	   .rx_clk(pclk),
	   .tx_level_select(tx_level_select),
	   .rx_level_select(rx_level_select),
	   .transaction_layer_checks_disable(transaction_layer_checks_disable),
	   .link_layer_checks_disable(link_layer_checks_disable),
	   .enable_vc_id(enable_vc_id_real[0]),
	   .tc_mapped_to_vc_id(tc_mapped_to_vc_id_0_real),
	   .xmtd_tlp(tx_tlp_detected),
	   .xmtd_tlp_packet1(tx_tlp_pkt1),
	   .xmtd_tlp_packet2(tx_tlp_pkt2),
	   .xmtd_malformed_tlp(tx_malformed_tlp),
	   .tx_retry_progress(tx_retry_progress),
	   .xmtd_lcrc_error(xmtd_lcrc_error),
	   .rcvd_tlp(rx_tlp_detected),
	   .rcvd_tlp_packet1(rx_tlp_pkt1),
	   .rcvd_tlp_packet2(rx_tlp_pkt2),
	   .rcvd_malformed_tlp(rx_malformed_tlp),
	   .rx_retry_progress(rx_retry_progress),
	   .rcvd_lcrc_error(rcvd_lcrc_error),
	   .tx_detected_dllp_pkt_valid(tx_detected_dllp_pkt_valid),
	   .tx_detected_dllp_pkt(tx_detected_dllp_pkt),
	   .tx_ended_dllp_pkt_valid(tx_ended_dllp_pkt_valid),
	   .tx_ended_dllp_pkt(tx_ended_dllp_pkt),
	   .rx_detected_dllp_pkt_valid(rx_detected_dllp_pkt_valid),
	   .rx_detected_dllp_pkt(rx_detected_dllp_pkt),
	   .rx_ended_dllp_pkt_valid(rx_ended_dllp_pkt_valid),
	   .rx_ended_dllp_pkt(rx_ended_dllp_pkt),
	   .tx_valid_code(|int_tx_valid),
	   .rx_valid_code(|int_rx_valid),
// Additional gen1 code start			    
	   .enable_ufc_counter(enable_ufc_counter),
	   .extended_sync_enable(extended_sync_enable),
 	   .tlp_detected_tx_rx(tlp_detected_tx_rx),	    
// Additional gen1 code end		    
	   .data_link_up(dll_status),
	   .phy_status(phy_status),
	   .fc_init1_done(fc_init1_done[0]),
	   .fc_init2_done(fc_init2_done[0])
	   );

  //---------------------------------------------------------------
  // Flow control module instantiation for VC1
  //---------------------------------------------------------------

  qvl_pci_express_flow_control #(
  /* Constraints_Mode */                 Constraints_Mode,
  /* VC_ID */                            1,
  /* VC_ID_STRING */                     "1.",
  /* ZI_DOUBLE_DATA_RATE */              ZI_DOUBLE_DATA_RATE,
  /* UPDATE_FC_30US_TIMER_CLK*/          UPDATE_FC_30US_TIMER_CLK,				 
  /* MAC_LAYER_SIDE */                   MAC_LAYER_SIDE)
     VC1_FLOW_CTRL (.reset(reset),
           .areset(areset),
           .tx_clk(pclk),
           .rx_clk(pclk),
           .tx_level_select(tx_level_select),
           .rx_level_select(rx_level_select),
           .transaction_layer_checks_disable(transaction_layer_checks_disable),
           .link_layer_checks_disable(link_layer_checks_disable),
           .enable_vc_id(enable_vc_id_real[1]),
           .tc_mapped_to_vc_id(tc_mapped_to_vc_id_1_real),
           .xmtd_tlp(tx_tlp_detected),
           .xmtd_tlp_packet1(tx_tlp_pkt1),
           .xmtd_tlp_packet2(tx_tlp_pkt2),
           .xmtd_malformed_tlp(tx_malformed_tlp),
           .tx_retry_progress(tx_retry_progress),
           .xmtd_lcrc_error(xmtd_lcrc_error),
           .rcvd_tlp(rx_tlp_detected),
           .rcvd_tlp_packet1(rx_tlp_pkt1),
           .rcvd_tlp_packet2(rx_tlp_pkt2),
           .rcvd_malformed_tlp(rx_malformed_tlp),
           .rx_retry_progress(rx_retry_progress),
           .rcvd_lcrc_error(rcvd_lcrc_error),
           .tx_detected_dllp_pkt_valid(tx_detected_dllp_pkt_valid),
           .tx_detected_dllp_pkt(tx_detected_dllp_pkt),
           .tx_ended_dllp_pkt_valid(tx_ended_dllp_pkt_valid),
           .tx_ended_dllp_pkt(tx_ended_dllp_pkt),
           .rx_detected_dllp_pkt_valid(rx_detected_dllp_pkt_valid),
           .rx_detected_dllp_pkt(rx_detected_dllp_pkt),
           .rx_ended_dllp_pkt_valid(rx_ended_dllp_pkt_valid),
           .rx_ended_dllp_pkt(rx_ended_dllp_pkt),
           .tx_valid_code(|int_tx_valid),
           .rx_valid_code(|int_rx_valid),
// Additional gen1 code start			    
	   .enable_ufc_counter(enable_ufc_counter),
	   .extended_sync_enable(extended_sync_enable),
 	   .tlp_detected_tx_rx(tlp_detected_tx_rx),	    
// Additional gen1 code end		    
           .data_link_up(dll_status),
           .phy_status(phy_status),
           .fc_init1_done(fc_init1_done[1]),
           .fc_init2_done(fc_init2_done[1])
           ); 

  //---------------------------------------------------------------
  // Flow control module instantiation for VC2
  //---------------------------------------------------------------

  qvl_pci_express_flow_control #( 
  /* Constraints_Mode */                 Constraints_Mode,
  /* VC_ID */                            2,
  /* VC_ID_STRING */                     "2.",
  /* ZI_DOUBLE_DATA_RATE */              ZI_DOUBLE_DATA_RATE,
  /* UPDATE_FC_30US_TIMER_CLK*/          UPDATE_FC_30US_TIMER_CLK,				  
  /* MAC_LAYER_SIDE */                   MAC_LAYER_SIDE)
     VC2_FLOW_CTRL (.reset(reset),
           .areset(areset),
           .tx_clk(pclk),
           .rx_clk(pclk),
           .tx_level_select(tx_level_select),
           .rx_level_select(rx_level_select),
           .transaction_layer_checks_disable(transaction_layer_checks_disable),
           .link_layer_checks_disable(link_layer_checks_disable),
           .enable_vc_id(enable_vc_id_real[2]),
           .tc_mapped_to_vc_id(tc_mapped_to_vc_id_2_real),
           .xmtd_tlp(tx_tlp_detected),
           .xmtd_tlp_packet1(tx_tlp_pkt1),
           .xmtd_tlp_packet2(tx_tlp_pkt2),
           .xmtd_malformed_tlp(tx_malformed_tlp),
           .tx_retry_progress(tx_retry_progress),
           .xmtd_lcrc_error(xmtd_lcrc_error),
           .rcvd_tlp(rx_tlp_detected),
           .rcvd_tlp_packet1(rx_tlp_pkt1),
           .rcvd_tlp_packet2(rx_tlp_pkt2),
           .rcvd_malformed_tlp(rx_malformed_tlp),
           .rx_retry_progress(rx_retry_progress),
           .rcvd_lcrc_error(rcvd_lcrc_error),
           .tx_detected_dllp_pkt_valid(tx_detected_dllp_pkt_valid),
           .tx_detected_dllp_pkt(tx_detected_dllp_pkt),
           .tx_ended_dllp_pkt_valid(tx_ended_dllp_pkt_valid),
           .tx_ended_dllp_pkt(tx_ended_dllp_pkt),
           .rx_detected_dllp_pkt_valid(rx_detected_dllp_pkt_valid),
           .rx_detected_dllp_pkt(rx_detected_dllp_pkt),
           .rx_ended_dllp_pkt_valid(rx_ended_dllp_pkt_valid),
           .rx_ended_dllp_pkt(rx_ended_dllp_pkt),
           .tx_valid_code(|int_tx_valid),
           .rx_valid_code(|int_rx_valid),
// Additional gen1 code start			    
	   .enable_ufc_counter(enable_ufc_counter),
	   .extended_sync_enable(extended_sync_enable),
 	   .tlp_detected_tx_rx(tlp_detected_tx_rx),	    
// Additional gen1 code end		    
           .data_link_up(dll_status),
           .phy_status(phy_status),
           .fc_init1_done(fc_init1_done[2]),
           .fc_init2_done(fc_init2_done[2])
           );

  //---------------------------------------------------------------
  // Flow control module instantiation for VC3
  //---------------------------------------------------------------

  qvl_pci_express_flow_control #(
  /* Constraints_Mode */                 Constraints_Mode,
  /* VC_ID */                            3,
  /* VC_ID_STRING */                     "3.",
  /* ZI_DOUBLE_DATA_RATE */              ZI_DOUBLE_DATA_RATE,
  /* MAC_LAYER_SIDE */                    MAC_LAYER_SIDE)
     VC3_FLOW_CTRL (.reset(reset),
           .areset(areset),
           .tx_clk(pclk),
           .rx_clk(pclk),
           .tx_level_select(tx_level_select),
           .rx_level_select(rx_level_select),
           .transaction_layer_checks_disable(transaction_layer_checks_disable),
           .link_layer_checks_disable(link_layer_checks_disable),
           .enable_vc_id(enable_vc_id_real[3]),
           .tc_mapped_to_vc_id(tc_mapped_to_vc_id_3_real),
           .xmtd_tlp(tx_tlp_detected),
           .xmtd_tlp_packet1(tx_tlp_pkt1),
           .xmtd_tlp_packet2(tx_tlp_pkt2),
           .xmtd_malformed_tlp(tx_malformed_tlp),
           .tx_retry_progress(tx_retry_progress),
           .xmtd_lcrc_error(xmtd_lcrc_error),
           .rcvd_tlp(rx_tlp_detected),
           .rcvd_tlp_packet1(rx_tlp_pkt1),
           .rcvd_tlp_packet2(rx_tlp_pkt2),
           .rcvd_malformed_tlp(rx_malformed_tlp),
           .rx_retry_progress(rx_retry_progress),
           .rcvd_lcrc_error(rcvd_lcrc_error),
           .tx_detected_dllp_pkt_valid(tx_detected_dllp_pkt_valid),
           .tx_detected_dllp_pkt(tx_detected_dllp_pkt),
           .tx_ended_dllp_pkt_valid(tx_ended_dllp_pkt_valid),
           .tx_ended_dllp_pkt(tx_ended_dllp_pkt),
           .rx_detected_dllp_pkt_valid(rx_detected_dllp_pkt_valid),
           .rx_detected_dllp_pkt(rx_detected_dllp_pkt),
           .rx_ended_dllp_pkt_valid(rx_ended_dllp_pkt_valid),
           .rx_ended_dllp_pkt(rx_ended_dllp_pkt),
           .tx_valid_code(|int_tx_valid),
           .rx_valid_code(|int_rx_valid),
// Additional gen1 code start			    
	   .enable_ufc_counter(enable_ufc_counter),
	   .extended_sync_enable(extended_sync_enable),
 	   .tlp_detected_tx_rx(tlp_detected_tx_rx),	    
// Additional gen1 code end		    
           .data_link_up(dll_status),
           .phy_status(phy_status),
           .fc_init1_done(fc_init1_done[3]),
           .fc_init2_done(fc_init2_done[3])
           );

  //---------------------------------------------------------------
  // Flow control module instantiation for VC4
  //---------------------------------------------------------------

  qvl_pci_express_flow_control #(
  /* Constraints_Mode */                 Constraints_Mode,
  /* VC_ID */                            4,
  /* VC_ID_STRING */                     "4.",
  /* ZI_DOUBLE_DATA_RATE */              ZI_DOUBLE_DATA_RATE,
  /* UPDATE_FC_30US_TIMER_CLK*/          UPDATE_FC_30US_TIMER_CLK,				 
  /* MAC_LAYER_SIDE */                   MAC_LAYER_SIDE)
     VC4_FLOW_CTRL (.reset(reset),
           .areset(areset),
           .tx_clk(pclk),
           .rx_clk(pclk),
           .tx_level_select(tx_level_select),
           .rx_level_select(rx_level_select),
           .transaction_layer_checks_disable(transaction_layer_checks_disable),
           .link_layer_checks_disable(link_layer_checks_disable),
           .enable_vc_id(enable_vc_id_real[4]),
           .tc_mapped_to_vc_id(tc_mapped_to_vc_id_4_real),
           .xmtd_tlp(tx_tlp_detected),
           .xmtd_tlp_packet1(tx_tlp_pkt1),
           .xmtd_tlp_packet2(tx_tlp_pkt2),
           .xmtd_malformed_tlp(tx_malformed_tlp),
           .tx_retry_progress(tx_retry_progress),
           .xmtd_lcrc_error(xmtd_lcrc_error),
           .rcvd_tlp(rx_tlp_detected),
           .rcvd_tlp_packet1(rx_tlp_pkt1),
           .rcvd_tlp_packet2(rx_tlp_pkt2),
           .rcvd_malformed_tlp(rx_malformed_tlp),
           .rx_retry_progress(rx_retry_progress),
           .rcvd_lcrc_error(rcvd_lcrc_error),
           .tx_detected_dllp_pkt_valid(tx_detected_dllp_pkt_valid),
           .tx_detected_dllp_pkt(tx_detected_dllp_pkt),
           .tx_ended_dllp_pkt_valid(tx_ended_dllp_pkt_valid),
           .tx_ended_dllp_pkt(tx_ended_dllp_pkt),
           .rx_detected_dllp_pkt_valid(rx_detected_dllp_pkt_valid),
           .rx_detected_dllp_pkt(rx_detected_dllp_pkt),
           .rx_ended_dllp_pkt_valid(rx_ended_dllp_pkt_valid),
           .rx_ended_dllp_pkt(rx_ended_dllp_pkt),
           .tx_valid_code(|int_tx_valid),
           .rx_valid_code(|int_rx_valid),
// Additional gen1 code start			    
	   .enable_ufc_counter(enable_ufc_counter),
	   .extended_sync_enable(extended_sync_enable),
 	   .tlp_detected_tx_rx(tlp_detected_tx_rx),	    
// Additional gen1 code end		    
           .data_link_up(dll_status),
           .phy_status(phy_status),
           .fc_init1_done(fc_init1_done[4]),
           .fc_init2_done(fc_init2_done[4])
           );

  //--------------------------------------------------------------- 
  // Flow control module instantiation for VC5
  //---------------------------------------------------------------

  qvl_pci_express_flow_control #(
  /* Constraints_Mode */                 Constraints_Mode,
  /* VC_ID */                            5,
  /* VC_ID_STRING */                     "5.",
  /* ZI_DOUBLE_DATA_RATE */              ZI_DOUBLE_DATA_RATE,
  /* UPDATE_FC_30US_TIMER_CLK*/          UPDATE_FC_30US_TIMER_CLK,				 
  /* MAC_LAYER_SIDE */                   MAC_LAYER_SIDE)
     VC5_FLOW_CTRL (.reset(reset),
           .areset(areset),
           .tx_clk(pclk),
           .rx_clk(pclk),
           .tx_level_select(tx_level_select),
           .rx_level_select(rx_level_select),
           .transaction_layer_checks_disable(transaction_layer_checks_disable),
           .link_layer_checks_disable(link_layer_checks_disable),
           .enable_vc_id(enable_vc_id_real[5]),
           .tc_mapped_to_vc_id(tc_mapped_to_vc_id_5_real),
           .xmtd_tlp(tx_tlp_detected),
           .xmtd_tlp_packet1(tx_tlp_pkt1),
           .xmtd_tlp_packet2(tx_tlp_pkt2),
           .xmtd_malformed_tlp(tx_malformed_tlp),
           .tx_retry_progress(tx_retry_progress),
           .xmtd_lcrc_error(xmtd_lcrc_error),
           .rcvd_tlp(rx_tlp_detected),
           .rcvd_tlp_packet1(rx_tlp_pkt1),
           .rcvd_tlp_packet2(rx_tlp_pkt2),
           .rcvd_malformed_tlp(rx_malformed_tlp),
           .rx_retry_progress(rx_retry_progress),
           .rcvd_lcrc_error(rcvd_lcrc_error),
           .tx_detected_dllp_pkt_valid(tx_detected_dllp_pkt_valid),
           .tx_detected_dllp_pkt(tx_detected_dllp_pkt),
           .tx_ended_dllp_pkt_valid(tx_ended_dllp_pkt_valid),
           .tx_ended_dllp_pkt(tx_ended_dllp_pkt),
           .rx_detected_dllp_pkt_valid(rx_detected_dllp_pkt_valid),
           .rx_detected_dllp_pkt(rx_detected_dllp_pkt),
           .rx_ended_dllp_pkt_valid(rx_ended_dllp_pkt_valid),
           .rx_ended_dllp_pkt(rx_ended_dllp_pkt),
           .tx_valid_code(|int_tx_valid),
           .rx_valid_code(|int_rx_valid),
// Additional gen1 code start			    
	   .enable_ufc_counter(enable_ufc_counter),
	   .extended_sync_enable(extended_sync_enable),
 	   .tlp_detected_tx_rx(tlp_detected_tx_rx),	    
// Additional gen1 code end		    
           .data_link_up(dll_status),
           .phy_status(phy_status),
           .fc_init1_done(fc_init1_done[5]),
           .fc_init2_done(fc_init2_done[5])
           );

  //--------------------------------------------------------------- 
  // Flow control module instantiation for VC6
  //---------------------------------------------------------------

  qvl_pci_express_flow_control #(
  /* Constraints_Mode */                 Constraints_Mode,
  /* VC_ID */                            6,
  /* VC_ID_STRING */                     "6.",
  /* ZI_DOUBLE_DATA_RATE */              ZI_DOUBLE_DATA_RATE,
  /* UPDATE_FC_30US_TIMER_CLK*/          UPDATE_FC_30US_TIMER_CLK,				 
  /* MAC_LAYER_SIDE */                   MAC_LAYER_SIDE)
     VC6_FLOW_CTRL (.reset(reset),
           .areset(areset),
           .tx_clk(pclk),
           .rx_clk(pclk),
           .tx_level_select(tx_level_select),
           .rx_level_select(rx_level_select),
           .transaction_layer_checks_disable(transaction_layer_checks_disable),
           .link_layer_checks_disable(link_layer_checks_disable),
           .enable_vc_id(enable_vc_id_real[6]),
           .tc_mapped_to_vc_id(tc_mapped_to_vc_id_6_real),
           .xmtd_tlp(tx_tlp_detected),
           .xmtd_tlp_packet1(tx_tlp_pkt1),
           .xmtd_tlp_packet2(tx_tlp_pkt2),
           .xmtd_malformed_tlp(tx_malformed_tlp),
           .tx_retry_progress(tx_retry_progress),
           .xmtd_lcrc_error(xmtd_lcrc_error),
           .rcvd_tlp(rx_tlp_detected),
           .rcvd_tlp_packet1(rx_tlp_pkt1),
           .rcvd_tlp_packet2(rx_tlp_pkt2),
           .rcvd_malformed_tlp(rx_malformed_tlp),
           .rx_retry_progress(rx_retry_progress),
           .rcvd_lcrc_error(rcvd_lcrc_error),
           .tx_detected_dllp_pkt_valid(tx_detected_dllp_pkt_valid),
           .tx_detected_dllp_pkt(tx_detected_dllp_pkt),
           .tx_ended_dllp_pkt_valid(tx_ended_dllp_pkt_valid),
           .tx_ended_dllp_pkt(tx_ended_dllp_pkt),
           .rx_detected_dllp_pkt_valid(rx_detected_dllp_pkt_valid),
           .rx_detected_dllp_pkt(rx_detected_dllp_pkt),
           .rx_ended_dllp_pkt_valid(rx_ended_dllp_pkt_valid),
           .rx_ended_dllp_pkt(rx_ended_dllp_pkt),
           .tx_valid_code(|int_tx_valid),
           .rx_valid_code(|int_rx_valid),
// Additional gen1 code start			    
	   .enable_ufc_counter(enable_ufc_counter),
	   .extended_sync_enable(extended_sync_enable),
 	   .tlp_detected_tx_rx(tlp_detected_tx_rx),	    
// Additional gen1 code end		    
           .data_link_up(dll_status),
           .phy_status(phy_status),
           .fc_init1_done(fc_init1_done[6]),
           .fc_init2_done(fc_init2_done[6])
           );

  //--------------------------------------------------------------- 
  // Flow control module instantiation for VC7
  //---------------------------------------------------------------

  qvl_pci_express_flow_control #(
  /* Constraints_Mode */                 Constraints_Mode,
  /* VC_ID */                            7,
  /* VC_ID_STRING */                     "7.",
  /* ZI_DOUBLE_DATA_RATE */              ZI_DOUBLE_DATA_RATE,
  /* UPDATE_FC_30US_TIMER_CLK*/          UPDATE_FC_30US_TIMER_CLK,				 
  /* MAC_LAYER_SIDE */                   MAC_LAYER_SIDE)
     VC7_FLOW_CTRL (.reset(reset),
           .areset(areset),
           .tx_clk(pclk),
           .rx_clk(pclk),
           .tx_level_select(tx_level_select),
           .rx_level_select(rx_level_select),
           .transaction_layer_checks_disable(transaction_layer_checks_disable),
           .link_layer_checks_disable(link_layer_checks_disable),
           .enable_vc_id(enable_vc_id_real[7]),
           .tc_mapped_to_vc_id(tc_mapped_to_vc_id_7_real),
           .xmtd_tlp(tx_tlp_detected),
           .xmtd_tlp_packet1(tx_tlp_pkt1),
           .xmtd_tlp_packet2(tx_tlp_pkt2),
           .xmtd_malformed_tlp(tx_malformed_tlp),
           .tx_retry_progress(tx_retry_progress),
           .xmtd_lcrc_error(xmtd_lcrc_error),
           .rcvd_tlp(rx_tlp_detected),
           .rcvd_tlp_packet1(rx_tlp_pkt1),
           .rcvd_tlp_packet2(rx_tlp_pkt2),
           .rcvd_malformed_tlp(rx_malformed_tlp),
           .rx_retry_progress(rx_retry_progress),
           .rcvd_lcrc_error(rcvd_lcrc_error),
           .tx_detected_dllp_pkt_valid(tx_detected_dllp_pkt_valid),
           .tx_detected_dllp_pkt(tx_detected_dllp_pkt),
           .tx_ended_dllp_pkt_valid(tx_ended_dllp_pkt_valid),
           .tx_ended_dllp_pkt(tx_ended_dllp_pkt),
           .rx_detected_dllp_pkt_valid(rx_detected_dllp_pkt_valid),
           .rx_detected_dllp_pkt(rx_detected_dllp_pkt),
           .rx_ended_dllp_pkt_valid(rx_ended_dllp_pkt_valid),
           .rx_ended_dllp_pkt(rx_ended_dllp_pkt),
           .tx_valid_code(|int_tx_valid),
           .rx_valid_code(|int_rx_valid),
// Additional gen1 code start			    
	   .enable_ufc_counter(enable_ufc_counter),
	   .extended_sync_enable(extended_sync_enable),
 	   .tlp_detected_tx_rx(tlp_detected_tx_rx),	    
// Additional gen1 code end		    
           .data_link_up(dll_status),
           .phy_status(phy_status),
           .fc_init1_done(fc_init1_done[7]),
           .fc_init2_done(fc_init2_done[7])
           );

  //---------------------------------------------------------------
  // Power management module instantiation.
  //---------------------------------------------------------------

  qvl_pci_express_power_management_monitor #(
  /* Constraints_Mode   */              Constraints_Mode,
  /* PCI_EXPRESS_DEVICE_TYPE */         PCI_EXPRESS_DEVICE_TYPE,
  /* ZI_DOUBLE_DATA_RATE */                ZI_DOUBLE_DATA_RATE,
  /* MAX_LINK_WIDTH */                  MAX_LINK_WIDTH,
  /* PCI_EXPRESS_GEN2 */                PCI_EXPRESS_GEN2)
		PM_MONITOR (.reset(reset),
    .areset(areset),
    .tx_clk(pclk),
    .tx_level_select(tx_level_select),
    .xmtd_pm_active_state_nak_tlp(xmtd_pm_active_state_nak_tlp),
    .xmtd_pm_pme_tlp(xmtd_pm_pme_tlp),
    .xmtd_pme_turn_off_tlp(xmtd_pme_turn_off_tlp),
    .xmtd_pme_to_ack_tlp(xmtd_pme_to_ack_tlp),
    .xmtd_tlp(|tx_tlp_detected),
    .xmtd_idle_os(int_xmtd_idle_os),
    .tx_dllp_pm_enter_l1_detected(tx_dllp_pm_enter_L1_detected),
    .tx_dllp_pm_enter_l1_ended(tx_dllp_pm_enter_L1_ended),
    .tx_dllp_pm_enter_l23_detected(tx_dllp_pm_enter_L23_detected),
    .tx_dllp_pm_enter_l23_ended(tx_dllp_pm_enter_L23_ended),
    .tx_dllp_pm_active_req_l1_detected(tx_dllp_pm_active_req_L1_detected),
    .tx_dllp_pm_active_req_l1_ended(tx_dllp_pm_active_req_L1_ended),
    .tx_dllp_pm_request_ack_detected(tx_dllp_pm_request_ack_detected),
    .tx_dllp_pm_request_ack_ended(tx_dllp_pm_request_ack_ended),
    .tx_detected_dllp_pkt_valid(tx_detected_dllp_pkt_valid),
    .tx_ended_dllp_pkt_valid(tx_ended_dllp_pkt_valid),
    .tx_num_outstanding_tlps(tx_num_outstanding_tlps),

    .rx_clk(pclk),
    .rx_level_select(rx_level_select),
    .rcvd_pm_active_state_nak_tlp(rcvd_pm_active_state_nak_tlp),
    .rcvd_pm_pme_tlp(rcvd_pm_pme_tlp),
    .rcvd_pme_turn_off_tlp(rcvd_pme_turn_off_tlp),
    .rcvd_pme_to_ack_tlp(rcvd_pme_to_ack_tlp),
    .rcvd_tlp(|rx_tlp_detected),
    .rcvd_idle_os(int_rcvd_idle_os),
    .rx_dllp_pm_enter_l1_detected(rx_dllp_pm_enter_L1_detected),
    .rx_dllp_pm_enter_l1_ended(rx_dllp_pm_enter_L1_ended),
    .rx_dllp_pm_enter_l23_detected(rx_dllp_pm_enter_L23_detected),
    .rx_dllp_pm_enter_l23_ended(rx_dllp_pm_enter_L23_ended),
    .rx_dllp_pm_active_req_l1_detected(rx_dllp_pm_active_req_L1_detected),
    .rx_dllp_pm_active_req_l1_ended(rx_dllp_pm_active_req_L1_ended),
    .rx_dllp_pm_request_ack_detected(rx_dllp_pm_request_ack_detected),
    .rx_dllp_pm_request_ack_ended(rx_dllp_pm_request_ack_ended),
    .rx_detected_dllp_pkt_valid(rx_detected_dllp_pkt_valid),
    .rx_ended_dllp_pkt_valid(rx_ended_dllp_pkt_valid),
    .rx_num_outstanding_tlps(rx_num_outstanding_tlps),

    .pm_checks_disable(link_layer_checks_disable | transaction_layer_checks_disable),

    // Output ports

    .xmtd_pm_enter_command_flag(xmtd_pm_enter_command_flag),
    .rcvd_pm_enter_command_flag(rcvd_pm_enter_command_flag)

     );

`protected

    MTI!#VrkZ\a=nRuuO*YE{YZw,xRw\D\G,Aj*=}?Apj|"iOeaF7#W!QHBA6<EK$R0p?Ar|-{>}U]T
    !?_{7T'm[,m71b!a$BH5A-5H<IR_@J~ara*Oa>RsA}X]};/n{ABasWCHhJTzi4_XV_v@;XN{-,z{
    5NiDi}dfE@\2luT{&OjJ\s5k$^CxQ|$t?xknGz~z1uJOjBQj>*->~rK5qaYQ_!v^[C2u<OBi=5]7
    52vCY\1uZ!GR^<]-5WY+1]1~$]zWGT,<{sfY<T'1xoT=+^;G+l~o$I;pQaJ7,*Y=^zu$}?$0}~!U
    BH;$DZR;3B7p=+N*;ps:(%!wVj]m7maRpTf*3D[[m@2#H1C):}$I~7Wz1<YUDomDe,-=3$p+}!j]
    $<U}[RYJEm$a^uN^%Bs^e^*7k#1-[E*<;[o?<B]oO*Zei9X7\i7k[7JCnp^V<
`endprotected
   
  reg [2:0] present_state_pd;
  reg [2:0] next_state_pd;
  reg [2:0] r_present_state_pd;

  reg [1:0] r_power_down;
  reg r_phystatus;
  reg p2_p1_transit; // Asserted when the state changes from P2 to P1
  reg [8*3 - 1:0] p_string;
  reg [8*3 - 1:0] r_string;
  reg [8*3 - 1:0] next_state_pd_string;
  reg [8*3 - 1:0] present_state_pd_string;

  reg [MAX_LINK_WIDTH - 1:0] r_tx_compliance;
  reg tx_compliance_more_than_one_clock;
  reg tx_elecidle_deasserted;
  reg r_tx_detect_rx_loopback;
  // PCI_EXPRESS_GEN2 code start
  reg r_rate;
  reg [2:0] r_tx_margin;
  reg r_tx_deemph;
  reg r_enable_rate_change_check;
  // PCI_EXPRESS_GEN2 code end
  reg [15:0] temp1_rx_data;
  reg [INTERFACE_TYPE :0] temp1_rx_data_k;
  reg [2:0] temp_rx_status;
  reg temp_rx_valid;

  reg [MAX_LINK_WIDTH - 1:0] edb_not_found;
  reg [MAX_LINK_WIDTH - 1:0] com_not_found_when_rxstatus_001;
  reg [MAX_LINK_WIDTH - 1:0] com_not_found_when_rxstatus_010;  

  // PCI_EXPRESS_GEN2 code start
  wire enable_rate_change_check = r_enable_rate_change_check;
  // PCI_EXPRESS_GEN2 code end

  // Additional Gen1 code start   
  reg   [2:0] r_rx_status_hold;
  reg   [2:0] r_com_on_high_hold; 
  wire  [2:0] rx_status_hold = r_rx_status_hold;
  wire  [2:0] com_on_high_hold = r_com_on_high_hold;

  // Additional Gen1 code end

`protected

    MTI!#]?UJt}mVzF$(!R^IADKn{oslew$vo7$i|,,Y["Ge{1|oZvk?r+Bj$k^GArkkX}!A^a1IGka
    |*U{!,#I~dzI<[Gl$#pW3u2Euav,Z_F*\jC6m*z^oRiA]lvz#_xZxB+T@{zG'Z}ZyB#X*xG'Tu\H
    <]-\**H*TZE';we3z|?xrkVGH}U]zOv,49x'*3xv?<?-Q3s<+*dDNOk=[G!D!pk1K'x3[^=$Dz7=
    OO'*OQ{2\^ip[Y3nX*exR!Vj21^'#bG\Z^xc9;xOa3B&RoQB@C>!^-^<Q]vQ/.,'~AJ>-77\Ei?j
    XO-nr?N,I-vkto(p'XUz3'r*nv!kUBI^lxrBmQB[RvXueB'Y]j=-a7kfvZ=p49=p<u\$^=Oz?U?,
    Q3W<@^IlE[R,E?!7TjE;Yj^*wYE'iT~Tl\3=#V,--p=~]VbeDR;zT<QGVK}RWBir_+@e-pCJoB[G
    2eQ_<HlFzsk<I>X+A=*,)<[nY",}k#7Yp;zzCo\'?53Qj$_}~\T+JEtWC[xp!naQ<{aaHIix_uO7
    wGe"6^GZjO13ekQ?=nea#Bk^pl#An+7p~*kR{7>mXz+!3ww{z{1+ux[VumxoKM/#xB,rCRup<x2l
    o{\sUvpgmX_!gU\3XV=k{vOJHv;*uwz@BaT]_7^x+*~W!^WQVe_l-A5K*Z*]+HA8qQ1Z*HIBl^5D
    $az2]Y*vAIT3mVi57^+\s<<Ko:Z,iG#B]AK$BowA*mYJA-ZRkRpY\B_$!K;wHD,Q=vHU]<=_[@|+
    5Yn}CmR#XlzwR\}i1O$Q-u~N/wT+Ix5i{!'?=;tT+,lo@o\545(^?;TeO=A(!r'iB!<{JTB#H=DT
    T,+[_[Qi,3zJ,A3!x'$w6.?CA>3s2sUXuK>1ks=u3xoAtkV,B-\w;HsVjB^~m8J_]W3IZ![Xsu7u
    zK^,^i:^3~@lio,uoVZD?Z2z!G{m5jo[K-;eyRkA^tj\A==e[w;rJar7wQjv=kus]*~Gie[=-Qq1
    x^7!_Ul|rHvo%Wj*aTlA75D%ZRBkI3],XB5pnE2\oX>@To^AKH+l."NQ}5iB@HZF+[okI1Yuzs!}
    VIR3R~E>Nz<QEH$o';ETnC3Ak@YiarAHDm$!k~sH[Y~T,^BpwEC^[H$e~0ORv#]r?2QK=}$}Qjq^
    ,\BnY[3)z*!ZR7j-}!+W<DeBz>R><n[^pK*W,2X5_p^,-<!\^{YATU25}DnX:D[a@BB!,HTj,T}B
    Q#+ZA]?Im{-o?_n~$nQ;I\7saaYUv1[_p_YoJxT]A~UAT>sBW\9'r5Jrvk_VZ<v![v5,BGCAo_Y]
    =i\i+Z2@ouIKnw>WjJu_kzXjpavs<7xclX<e[vj]_>5}I^~W^rG5TxIOB<3XA^-lzUZOv2[K1[OE
    z2IY[{Dzo7YrQas7Kra~*sO_vvZ~TRlz<G@l+5wlZ*[Gj,%TxD\#a~$<vXl:av3-Ko/>Xu*NwUIl
    [D?zWa2*72-?LDxAz89voR-^J'eG!u*c'_meOHKp{CYGXv;Br\A-[o\3{ElB]-oR's=lA'#3I]A1
    OY{Ae=oQe~{T_pAEX[A>$rG[!11Uei2Y'&;DI#*CG~xj'-KBo*\oRQ}nT;\#R<tcp7srpmV!=+^e
    sT@Xx!VrV#W3QA1G(#p3B0C<l>KaO$+j!~1*\?A$EU{>V71DJ},X-TI~aUu=~xk}U*r=\{JA{Jz<
    u;gh@>e_35zUrOB_zO-_IJes|*Lzllu5?J?I!3OU7T}+E=1UrU,E_$~$YQ=>QWpx$iXsHK_GA'!2
    7D[UX,TUjTv'=j3-*a1'BQ!><owU^!~rI\Gsez!Yp$>zs$1SV~J?y[o{r[QATT1^GeV7sq;Hw\Q]
    oEW-3^*IlXCp]RuHe!W}3~\?z^jx*>#n^lX>@$,pZ$+xe'f'X!xJE-^1nKs*roB*5p'wY;^EX,DO
    O#7M@=GZ5pkBeMZrGlk_<=e;R$^RVseK~xlso=OxO_qC$\p]va'[_[?+x=7<$CIRo5GVlVQesDsr
    ,U\:Xw=\'GBjHnW{&+}GTHpDx]}-ue^a~m>ZXr1YzER,X@(6r2;UNws+oe1?_W,rR\7+uzHE_UCD
    7wxKpoBp'q>CTl:eW\~j<7CF(!aYiKx$Az*ZX]G*Gnz>oO3_H$@Q+pD^IwYT[EmBUB;o7Dk-!&AR
    iH6*GDk;sBa3e@+YCKJ;p7mC=H]rRQEx{olb[k!--=GkTXJjsawR^>,rCJ*wpQI]#5$VBs?RZeKB
    Ge+sVi*_w_r!R5rjOWWziVCK7}w>_$>V5T~E7K}T*H5^;j5R$wp{|#]X^wn}-3CZO57o@$VozKRm
    IqPF^pVlono#nr]JEm2,I$=rD@A*'i,e7;@1Mrz7*<VU\[5+<5A22CBVvecwvlWPs[}wj,3\\V7a
    iHG7iAAGc\Z2jDJ{D{\*GA>OX^u{l*<YQP^@]5Kau^~I-],IO#u{vCC!\r}Ga7o{2Gk>oiteGKK*
    wa\HU7=IPOdkA3-^~n7j$BB7kV~12x$a]77pI{^K<+<*Z$~^O1oRr#'=$&a*>{up1G<OHsc,AKUV
    ~eo+Ir7FvIQ*-jlIl3WTrse~&;v5[=K*~'<Il;**eiEpks-3^GK-RTVKT$vE$k'>\lV{a-E2>_+[
    IR~am&i{<l4z$I-YIrz-1\]wV)RI$p721!Tt#NY}#lM/B#s[dB\-=r--Y0s=$HvYZpR<VC{vVpz\
    UC9CTO@=XC@KOjJp[;lNn>2jp3*_w,@T7^A+al=G3w\r^oD?=zHYKwOHV@\#CB[}Z}U~}l@EQ=''
    !7tq=BAQE+C#?IIx7<KI>eDk#]H[7C<OrR#W>G#k[fJV}A\QK{m*;]E-v#@E}v?]jWp#4B-Kj!-@
    r7;R#7?YT?vIC@}-7se>@|EIX*D_I##,aDoYX7~>H$9U>Iu;HuZs-[{M}ezw!Q'w(YU\7sxem5UQ
    @5KH?<z{Eo_H=5**@>IOj}aEH^oKx2saZ>x7HvmZJr*{^RXOz\;35eA>WnzXloGVHKz*On<nnmVx
    {GZ|1Hw>@*wBR)wo@#O=7C1so1vpv#^I7zmt1O~o{_YEVDeGH1?^d#\]moC,{c?>G,=>_>eMDge1
    Xn$pHTS'OA';I,3Cl~VQCYGH^\i#pprr<wJ+E?$SMIT5^DkX+0^<'37mpiXnzs]"F>=U!]A^T!$D
    i$!j+#G^7(X]13I?ou_xr,\kp'J\nwK>s*Z*?TAnU<}EpDG*m$hA=Zn3'nK{5[2jz<x}H1G,!o\]
    !<TCBlRs5,j\Y'p'I+5,5!K5#}ukT12XH,<b]!Ke$'Hr[Te^'jas7IZo}lGE55p}[mQw-Y_7Q=X]
    y&b-}l;sZoWA<~v]7wpoC<]v'aVC,$'!Yk=GRKXBevX\1rv_{Z_l!n?35*l*7$IpQQu]O2u*~~B<
    \kH@-Go[CsYisOjxU55Wr><jBV-PkOj2HDA$$u>!Q>5AGROAiwB{''?HXr\<,Hewt2+CH3r,l{E]
    n[<W]oC@Y,Xp$\CO=1IC[~C~$o_-1^x2=e;Y,D-=W,w;3d^XC1hA-$<unvK<^~[/^QEoW]QEq@Bx
    s<U5kX]T!<xzi}\Vk<['{[n{?U_V^"_G[X@X^nNCa<@ma]^kvXjo<;>,7AB;HDWoeZ_2wY{#*v_:
    B'^npu~?oosJl'[Jy*G1R351T353?7DO7j\E{cerX{};-Al$iI2O^npa{$pBTlqHnori+DO<1D2M
    V^^2772^'S_I?=uU_1fDD$Vi]DW:G.>]{YdDoG;~DUw$UG~)2]AQCR{a^XD}s]?v,p+H*_*1B}Ee
    IBRWK+*B1>!u|WAneJ5x]BGm^xvY'/[vxW0E+Aw).&'7}p#}J~]Jo}E-{Ok+AKR?jE=?HrQTuQ_U
    <}@D'Iu.]xV+YvQ#3G~J_$<_vY2x@}3@p]<!~V^uxDprV!I7m=>ob72v{BmsAs8>'vzwGGpRk2m1
    K_^N>HR\o6;U3k=__sAU+<lR,@F,JJE3Hl^E*u[Zr@jvI#zi-T2nsKpx?mQUw~pk+oJk^@>[<~O\
    m;,->7wVXK]}#'5A7VX,pz{2-[pDasl,XJRl5n3T]0'e^pfyI]C1}X],7\VTC?!EIr\+wa=^q#,1
    VVZZ;lDAv!7XXri^?%jQ\YKQK,NN${}+IK;wre={ZOIZFpv<+HvDn=nh'YlJAIr}x1vZvU+,o\nl
    R25k^w[Jv+rW]]YB%sze+G+[K<A>{_'?;U5ka![YWAYexeBkEBCkB@r*TunYllp1+AQ>$O+1Ovn-
    E,EIe{>v\Y;_>=aB'3XjR_AO-UxwZ)5il[:(ox',;l<51{W1QA!lD@l's$Bo{_oHO+sT[nJQ+Y[D
    JjrO_#We!B]k<71nTv'C>OYvPfM*p{lk_\{L5x~zdwwomImxZH{x^s<3VpEp$\a$v9G<u]ZHQsi7
    ]Wnw~<_ATps}H?75KW$*+Qx*}l^Q=IZ'X1X7?pA>TeB$xO!EiAm71B?VC2!n_T{A{azJok?5Jo7H
    jGCav!}5jV^AB]Cz-+wY~GW_rx?'k';]?uzZ{x+V?X3jrOroj{Ri$2w>Z<[B{wQ-wuH<sCCx[#fO
    7EBBO#sr2pl><2s'WQ3R!U'D?x+Q<E@uQ(?A$kWV,UT==z2^R>v?HZD{1-$'C5,#!lz*,E#DReWA
    X$t73_~ZEn}#>$WeAr~=:6LAxjU#V*]Y@z['RAojW=-]T_E,RXTssWBvjW@me;+<wCI1#-?7\EJ+
    T^'dm[I[[3Xa7ZKOU_i=kUp_F6_x?v<T2}
`endprotected

  //--------------------------------------------------------------------------
  // OVL SVA Assertions are included here
  //--------------------------------------------------------------------------
`include "qvl_pci_express_pipe_monitor_assertions.inc"

`ifdef ZI_INLINED_PSL
`include "0in_ac_inline_for_mod_zi_cw_pci_express_pipe_monitor.inc"
`endif
`ifdef ZI_INLINED_CHX
`include "zi_cw_pci_express_pipe_monitor.zi_chx.inc"
`else
`ifdef ZI_INLINED_CHX_qvl_pci_express_pipe_monitor
`include "zi_cw_pci_express_pipe_monitor.zi_chx.inc"
`endif
`endif

`qvlendmodule // end of qvl_pci_express_pipe_monitor
